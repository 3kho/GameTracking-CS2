					
						
							
								break;
								depthSuccess++;
								exception += "."
								exception += entry;
								result = result[identifier];
							Log( key + " = " + lookupTable[value] + " <-- " + value );
							Log( key + " = " + result + " <-- " + value );
							Log( key + " = \"" + "~" + value + "\" (unresolved)" );
							build_refs(val.watches[i].val);
							else
							exception += unresolvedId;
							foreach ( entry in m_bindNamesStack )
							iLast = iNext + 1;
							identifiers.push( value.slice( iLast, iNext ) );
							if ( identifier in result )
							local exception = "Unresolved symbol: " + bind + " in ";
							subTableOrArray[key] = "~" + value.slice( 1 );
							subTableOrArray[key] = "~" + value;
							subTableOrArray[key] = lookupTable[value];
							subTableOrArray[key] = result;
							throw exception; 
							unresolvedId = value;
							{
							}
						//::print( "Added " + value + " to call chain " + key + "\n" );
						//::print( "Added " + value + " to call chain.\n" );
						//::print( "Creating new call chain " + key + "\n");
						//::print( "Creating new call simple chain\n");
						args.push( vargv[i] );
						chain <- [];
						chain.push( value );
						chains[key] <- [];
						else
						emitvalue("type","val",v.val);
						foreach( identifier in identifiers )
						found = true;
						identifiers.push( value.slice( iLast ) );
						if ( depthSuccess == identifiers.len() )
						if ( throwException )
						if ( value in lookupTable )
						if(val.watches[i].status!="error")
						key = key.slice( prefix.len() );
						local depthSuccess = 0;
						local iLast = 1;
						local iNext;
						local identifiers = [];
						local result = lookupTable;
						result = func();
						result = func.acall( args ); 
						return false;
						val.watches[i] <- evaluate_watch(val.locals,i,watch);
						val.watches[i] <- {status="error"}
						value = value.slice( 1 );
						while ( ( iNext = value.find( ".", iLast ) ) != null )
						{
						}
					args.push( scope );
					args.push( vargv[i] );
					attribute("exp",v.exp);
					attribute("id",i.tostring());
					attribute("status",v.status);
					colon = description.len();
					continue;
					else
					else if ( controlChar == '@' )
					else{
					emitvalue("kt","kv",idx);
					emitvalue("vt","v",obj[idx]);
					for ( i = 0; i < vargc; i++ )
					found = false;
					found = true;
					foundMatch = ( key.find( prefix ) == 0 )
					foundMatch = ( prefix == key );
					if ( !(chain) )
					if ( !(key in chains) )
					if ( !args.len() )
					if ( !chain.len() || chain != value )
					if ( !chain.len() || chain.top() != value )
					if ( !exactMatch )
					if ( controlChar == '^' )
					if ( result != null && !result )
					if ( unresolvedId != null )
					if(v.status!="error") {
					if(val.src!="NATIVE"){
					key = key.slice( prefix.len() );
					local chain = chains[key];
					local controlChar = value[0]
					local func = chain[i];
					local result;
					local unresolvedId = null;
					result = func.pacall( scope, args ); 
					result = func.pcall( scope );
					return false;
					return;
					val.watches[i].exp <- watch;
					{
					}
				Assert( typeof(symbol) == "string" )
				Document( symbol, itemDescription[0], itemDescription[1] );
				EstablishDelegation( childTable, value );
				Log( "{" );
				Log( "}" );
				Log( isTable ? "{" : "[" );
				Log( isTable ? "}" : "]" );
				Log( key + " =" );
				Log( subTablePair[0] + " = " );
				RemoveDelegation( value );
				args.push( scope );
				attribute("name",getvalue(i).tostring());
				beginelement("e");	
				beginelement("w");
				description = description.slice( colon + 1 );
				else
				emitvalue("type","val",v);
				endelement("e");	
				endelement("w");
				for ( i = 0; i < vargc; i++ )
				for ( i = chain.len() - 1; i >= 0; i -= 1 )
				foreach(i,watch in watches)
				func(obj,idx,val);
				func_src=func_src+","
				if ( !Resolve( subTablePair[1], subTablePair[1], false ) )
				if ( !args.len() )
				if ( ::type(idx) == "string" && idx.find( "__" ) == 0 )
				if ( Resolve( ( isTable ) ? value : lookupTable, value, throwException ) )
				if ( colon == null )
				if ( exactMatch )
				if ( foundMatch )
				if ( key.find( prefix ) == 0 )
				if ( result != null && !result )
				if ( string != "*" && name.tolower().find( string.tolower() ) == null )
				if ( value.len() )
				if ( vargc > 0 )
				if(::type(val) == "function")
				local alias = description.slice( 1, colon );
				local args = [];
				local colon = description.find( ":" );
				local foundMatch = false;
				local func = chain[i];
				local i;
				local result;
				m_bindNamesStack.pop();
				m_bindNamesStack.push( key );
				matches.append( name ); 
				matches.append( string )
				name = alias;
				print( "  " );
				printl( "Description: " + documentation[1] );
				signature = "#";
				signature = GetFunctionSignature( this[name], name );
				signature = documentation[0];
				val.watches <- {}
				{
				}
			    build_refs(i);
			    build_refs(val);
			EstablishDelegation( m_targetTable, subTablePair[1] );
			RemoveDelegation( subTablePair[1] );
			attribute("typeof",_typeof);
			beginelement("l");
			build_refs(l);
			delete roottable[name];
			else
			endelement("l");
			first=null
			for ( i = chain.len() - 1; i >= 0; i -= 1 )
			for ( local i = 0; i < m_logIndent; i++ )
			foreach( name, documentation in Documentation.functions )
			foreach( subTablePair in m_fixupSet )
			foreach( symbol, itemDescription in symbolOrTable )
			foreach(i,v in val.watches)
			func(obj,idx,obj[idx]);
			func_src=func_src+i
			if ( chain.len() )
			if ( description[0] == '#' )
			if ( documentation[0] != "#" )
			if ( documentation[1].len() )
			if ( isTable || isArray )
			if ( string in Documentation.functions )
			if ( type == "string" )
			if ( type == "table" )
			if ( typeof( value ) == "function" ) 
			if ( vargc > 0 )
			if(!first){
			if("watches" in this) {
			iterateobject(i,function (obj,idx,val) {
			local args = [];
			local b = ( description[0] == '#' );
			local chain = chains[event];
			local documentation = Documentation.functions[name];
			local i;
			local isArray = ( type == "array" )
			local isTable = ( type == "table" );
			local result = name;
			local signature;
			local type = typeof value;
			objs_reg.refs[t] <- objs_reg.maxid++;
			params.append(v)
			print( "\n" ); 
			printl( "Function:    " + name );
			printl( "Signature:   " + signature );
			printl( "Symbol " + string + " not found" );
			printl( string );
			printl( symbolOrTable + ":" + itemIfSymbol.tostring() + "/" + descriptionIfSymbol );
			return NativeFunctionSignatures[nativeFunction]
			return objs_reg.refs[v].tostring();
			return pack_type(::type(v));
			return v;
			return;
			roottable[name] = saved;
			saved = roottable[name];
			scope = ::getroottable();
			scope = scopeForThis;
			})
		    foreach(idx,val in obj)
		    func(obj,idx,val);
		    iterateobject(t,function(o,i,val):(objs_reg)
		    return "null";
		    return v.tostring();
		    return v;
		    {
		    }
		    })
		   foreach(idx,val in obj.getclass())
		   {
		   }
		// Expose a bound global function to dispatch to this object
		Documentation.functions[name] <- [ signature, description ]
		HookRootMetamethod( "_get", function( key ) { return "^" + key; } );
		HookRootMetamethod( "_newslot", function( key, value ) { if ( typeof value == "table" ) { m_fixupSet.push( [ key, value ] ); this.rawset( key, value ); };  }.bindenv(this) );
		Log( "...end resolution" );
		Log( "Begin late bind on table " + m_targetTable );
		Log( "Begin resolution... " )
		Log( "End late bind on table " + m_targetTable );
		UnhookRootMetamethod( "_get" );
		UnhookRootMetamethod( "_newslot" );
		attribute("fnc",val.func);
		attribute("line",val.line.tostring());
		attribute("ref",o.tostring());
		attribute("src",val.src);
		attribute("type",(i==::getroottable()?"r":pack_type(::type(i))));
		beginelement("call");
		beginelement("o");
		case "array":
		case "bool":
		case "class":
		case "float":
		case "instance":
		case "integer":
		case "null":
		case "string":
		case "table":
		catch(e) {
		chain = [];
		chains = {};
		classes = {}
		default:
		delegate null : childTable;
		delegate null : scope;
		delegate outer : result;
		delegate parentTable : childTable;
		delete roottable[saveSlot];
		delete scope.parent[scope.__vname];
		else
		else if ( exact )
		endelement("call");
		endelement("o");
		exactMatch = exactNameMatch
		foreach( key, value in childTable )
		foreach( key, value in scope )
		foreach( key, value in subTableOrArray )
		foreach( name in matches )
		foreach( subTablePair in m_fixupSet )
		foreach(i,l in val.locals)
		foreach(i,v in val.locals)
		foreach(idx,val in obj)
		func(obj,"@ref",obj.ref());
		functions = {}
		if ( chain.len() )
		if ( description.len() )
		if ( event in chains )
		if ( m_log )
		if ( matches.len() == 0 )
		if ( name in roottable )
		if ( nativeFunction in NativeFunctionSignatures )
		if ( saved != null )
		if ( scopeForThis != null )
		if ( string == "*" || !exact )
		if ( typeof( symbolOrTable ) == "table" )
		if(!(t in objs_reg.refs)) {
		if("watches" in val) {
		if(_typeof != ::type(i)) {
		if(i != ::getroottable()){
		if(i!="this" && i[0] != '@'){ //foreach iterators start with @
		if(val.src!="NATIVE") {
		instances = {}
		level++;
		local _typeof = typeof i;
		local found = false;
		local found = true;
		local func=::compilestring(func_src);
		local matches = []
		local roottable = getroottable();
		local saveSlot = "__saved" + name;
		local saved = null;
		local saved = roottable[saveSlot];
		m_log = log;
		m_logIndent++;
		m_logIndent--;
		m_targetTable = target;
		matches.sort();
		prefix = prefixString;
		result = outer[name] <- { __vname=name, __vrefs = 1 };
		result = outer[name];
		result.(void, long double,...)(float, short) += 1;
		return "<unnamed>"
		return found;
		return true;
		return {status="error"}
		return {status="ok" , val=func().acall(params)};
		return;
		roottable["__saved" + name] <- saved;
		roottable[name] <- value;
		scope.__vname = null;
		scope[ "Dispatch" + prefixString ] <- Call.bindenv( this );
		stack.append(si);
		throw "Assertion failed";
		throw "Assertion failed: " + msg;
		throw "Bad reference counting on scope " + scope.__vname;
		try { //TRY TO USE _nexti
		while ( found )
	// private:
	// public:
	//ENUMERATE THE STACK WATCHES
	//EVALUATE ALL WATCHES
	::print("ERROR"+e+"\n");
	::setroottable( ::getroottable().parent );
	::setroottable( currentscope );
	Documentation <-
	["array"] = null,
	["array"]="a",
	["bool"]="b",
	["class"] = null,
	["class"]="y",  
	["float"]="f",
	["function"]="fn",
	["generator"]="g",
	["instance"] = null,
	["instance"]="x", 
	["integer"]="i",
	["null"]="n",
	["string"]="s",
	["table"] = null,
	["table"]="t",
	["thread"]="h",
	["userdata"]="u",
	["weakref"] = null,
	["weakref"]="w"  
	attribute(type_attrib,pack_type(::type(val)));
	attribute(value_attrib,getvalue(val).tostring());
	beginelement("calls");
	beginelement("objs");
	build_tree();
	catch(e)
	chain = null;
	chains = null;
	constructor( prefixString, scopeForThis = null )
	constructor( prefixString, scopeForThis = null, exactNameMatch = false )
	currentscope = ::getroottable();
	else
	else if ( scope.(void, long double,...)(float, short) == 0 )
	else if(ty == "weakref") {
	else {
	endelement("calls");
	endelement("objs");
	exactMatch = false
	foreach(i,o in objs_reg.refs)
	foreach(i,v in locals){
	foreach(i,val in stack)
	func_src=func_src+"){\n"
	func_src=func_src+"return ("+expression+")\n}"
	function Begin( target, log = false )
	function Call( ... )
	function Call( event, ... )
	function Document( symbolOrTable, itemIfSymbol = null, descriptionIfSymbol = null )
	function Document( symbolOrTable, itemIfSymbol = null, descriptionIfSymbol = null ) {}
	function End()
	function EstablishDelegation( parentTable, childTable )
	function HookRootMetamethod( name, value )
	function Log( string )
	function PostScriptExecute() 
	function PrintHelp( string = "*", exact = false )
	function PrintHelp( string = "*", exact = false ) {}
	function RegisterFunctionDocumentation( func, name, signature, description )
	function RemoveDelegation( childTable )
	function Resolve( lookupTable, subTableOrArray, throwException = false )
	function RetrieveNativeSignature( nativeFunction )
	function RetrieveNativeSignature( nativeFunction ) { return "<unnamed>"; }
	function UnhookRootMetamethod( name )
	if ( !(name in outer) )
	if ( b )
	if ( msg != null )
	if ( scope.(void, long double,...)(float, short) < 0 )
	if("collectgarbage" in ::getroottable()) ::collectgarbage();
	if(otype in complex_types)
	if(t == ::getroottable())
	if(ty == "instance") {
	if(type in packed_types)return packed_types[type]
	local first=1;
	local func_src="return function ("
	local otype = ::type(t);
	local params=[];
	local result;
	local ty = ::type(obj);
	m_bindNamesStack = [];
	m_fixupSet = [];
	m_log = false;
	m_logIndent = 0;
	m_targetTable = null;
	objs_reg = null;
	objs_reg.refs[::getroottable()] <- objs_reg.maxid++;
	params.append(locals["this"])
	prefix = null;
	return print( text );
	return print( text + "\n" );
	return result;
	return type
	scope = null;
	scope.(void, long double,...)(float, short) -= 1;
	see copyright notice in sqrdbg.h
	stack = null;
	switch(::type(v))
	try {
	vI<-tE<_tA<.t=
	while(si=::getstackinfos(level))
	~JPj
  what():  
 %s="%s"
 ( def. "%s" )
 2008, Valve Corporation, All rights reserved. ========
 [%.3f server clamped to %.3f]
 [^_]
 __vector(
 bytes
 const
 failed to dlopen %s error=%s
 max. %f
 min. %f
 restrict
 s n  n
 volatile
"%s" 
"%s" = "%s"
"></img>
"VVh:
$[^_]
%%.%if%s
%-80s
%-80s - %.80s
%.14g
%f %f %f))
%i %i %i %i
%s %s %s %s
%s [%d]
%s line = (%d) column = (%d) : error %s
%s/%s
%s/bin/%s
%x%x%llx_%s
&#35;
&#36;
&#92;
&AElig;
&Aacute;
&Acirc;
&Agrave;
&Aring;
&Atilde;
&Auml;
&Ccedil;
&ETH;
&Eacute;
&Ecirc;
&Egrave;
&Euml;
&Iacute;
&Icirc;
&Igrave;
&Iuml;
&Ntilde;
&Oacute;
&Ocirc;
&Ograve;
&Oslash;
&Otilde;
&Ouml;
&THORN;
&Uacute;
&Ucirc;
&Ugrave;
&Uuml;
&Yacute;
&aacute;
&acirc;
&acute;
&aelig;
&agrave;
&amp;
&apos;
&aring;
&atilde;
&auml;
&brvbar;
&ccedil;
&cedil;
&cent;
&copy;
&curren;
&deg;
&divide;
&eacute;
&ecirc;
&egrave;
&eth;
&euml;
&euro;
&frac12;
&frac14;
&frac34;
&iacute;
&icirc;
&iexcl;
&igrave;
&iquest;
&iuml;
&laquo;
&macr;
&mdash;
&micro;
&middot;
&nbsp;
&ndash;
&not;
&ntilde;
&oacute;
&ocirc;
&ograve;
&ordf;
&ordm;
&oslash;
&otilde;
&ouml;
&para;
&plusmn;
&pound;
&quot;
&quot;n
&quot;r
&raquo;
&reg;
&sect;
&shy;
&sup1;
&sup2;
&sup3;
&szlig;
&thorn;
&times;
&trade;
&uacute;
&ucirc;
&ugrave;
&uml;
&uuml;
&yacute;
&yen;
&yuml;
'_? A1> A1> A1> A1>
'break' has to be in a loop block
'continue' has to be in a loop block
(%s %p)
(%s : 0x%p)
([^_]
(anonymous namespace)
(instance : 0x%p)
(vector : (%f, %f, %f))
(weakref : 0x%p [%s] )
)te=8
)th=8
*FUNCTION [%s()] %s line [%d]
*FUNCTION [%s] %s line [%d]
+C ;C
, or } expected
,%03d
,/$`,
,[^_]
-&B'-
-+ #0
-VUUU
-allowdebug
-valveinternal
-xlsp
.QVWP
.comment
.ctors
.data
.data.rel.ro
.dtors
.dynamic
.dynstr
.dynsym
.eh_frame
.eh_frame_hdr
.fini
.gnu.version
.gnu.version_r
.gnu_debuglink
.got.plt
.hash
.init
.note.gnu.build-id
.rel.dyn
.rel.plt
.rodata
.shstrtab
.strtab
.symtab
.tbss
.text
/%Xy	
// 	   BarBar="@Test1.Foo"
// 	   Foo=1
// 	   FooFoo = "I'm foo foo"
// 	   SubTable = { boo=[bah, "@Test2.FooFoo", "@Test1.Foo"], booboo2={one=bah, two="@Test2.FooFoo", three="@Test1.Foo"} }
// 	   bah=wha
// 	   booboo2={one=bah, two="@Test2.FooFoo", three="@Test1.Foo"}
// 	   booboo=[bah, "@Test2.FooFoo", "@Test1.Foo"]
//    
//    Test1 <-
//    Test2 <-
//    delete lateBinder;
//    lateBinder <- LateBinder();
//    lateBinder.Begin( this );
//    lateBinder.End();
//    {   
//    }   
// Documentation table
// General
// Late binding: allows a table to refer to parts of itself, it's children,
// Purpose: Script initially run after squirrel VM is initialized
// Usage:
// VSquirrel support functions
// When End() is called, all of the unresolved symbols in the tables and arrays will be resolved,
// any left unresolved will become a string prepended with '~', which later code can deal with
// it's owner, and then have the references fixed up after it's fully parsed
//-----------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////
//===	======= Copyright 
//=============================================================================
0123456789ABCDEF
0123456789ABCDEF$
0123456789abcdef
0<	w(
0<	w8
0[^_]
10ConCommand
10IAppSystem
10SQInstance
10SQUserData
11CSquirrelVM
11SQDelegable
11SQGenerator
12CEmptyConVar
12SQRefCounted
13SQCollectable
13SquirrelError
14CBaseAppSystemI14IScriptManagerE
14CScriptManager
14ConCommandBase
14IScriptManager
14SquirrelObject
15CTier0AppSystemI14IScriptManagerE
15CTier1AppSystemI14IScriptManagerLi0EE
15SQFunctionProto
15SQNativeClosure
16CDefaultAccessor
16CDllDemandLoader
16CSQStateIterator
18CUtlCharConversion
19CUtlNoEscConversion
20ConVar_ServerBounded
21CUtlCStringConversion
23CSplitScreenAddedConVar
23IConCommandBaseAccessor
2ZY^_]
4SQVM
4fff>fff>fff>fff>
6ConVar
6SQBlob
7IConVar
7SQArray
7SQClass
7SQTable
8CFmtStrNILi256ELb0EE
8SQStream
8SQString
8Tu0@
9C w/
9CL~K
9IScriptVM
9S tX
9S vZ
9SQClosure
9SQWeakRef
9S\t3
9XLtK
9Z,v+
9^<~p
9^p~,
9_<~*
9s$~5
9s4~8
9s<~8
9sD~8
9x,w)
9{$~Q
9~@vX
9~LvX
9~pvV
:Eu	B
:EuWB
;K v?
;_ v6
;_8|@
;p v6
;x v;
;{$v<
;{$}Q
;~$v;
;~(v0
<*t(w
<.t.<\urf
</%s>
</h1>
</pre>
</script>
</ul>
<=tV<>
<?t5<.t1<!t-
<Itn<J
<Lt#<Xt
<Tt7<V
<[^_]
<htq<v
<img src="
<pre>
<unknown>
<unnamed>
?0,/1a,
?333333
?[^_]
?wrong argument type, expected '%s' got '%.50s'
@0;F4
@4CUNG
@<;F@
@INDEX@
@ITERATOR@
A. F.
A. G.
A. H.
A. I.
AN ERROR HAS OCCURED [%s]
AN ERROR HAS OCCURED [unknown]
APPSYSTEM: In ConnectInterfaces(), s_nRegistrationCount is %d!
ARRAY
Ac@tr
Accessed null instance
B. E.
B. G.
B. K.
B. O.
B8+B<
Broken promise
BuiltDebug
C$;S(~&
C,9C0
C. H.
C33s?
C8+C<
CALLSTACK
CCommand::Tokenize: Encountered command which overflows the argument buffer.. Clamped!
CCommand::Tokenize: Encountered command which overflows the tokenizer buffer.. Skipping!
CLASS
COLORCORRECTION_VERSION_1
CUtlBuffer::VaPrintf: String overflowed buffer [%d]
CUtlFixedMemory overflow!
CUtlLinkedList overflow! (exhausted index range)
CUtlLinkedList overflow! (exhausted memory allocator)
CUtlRBTree overflow!
Callstack mismatch in VScript/Squirrel!
Cl;Cp
CommandLine
ConVar(%s) defined with infinite float value (%s)
ConVarRef %s doesn't point to an existing ConVar
CreateFunction: typeMask string too long.
CreateInterface
Cross
D. C.
DLOPEN Error:%s
DebugTextureInfo001
Dstd::future_error
E. H.
E<3w@
Error
EventSystem001
F8+F<
FCVAR_NEVER_AS_STRING
FLOAT
Failed to read Squirrel table entry %s
Failed to restore a Squirrel object of type %s
Fl;Fp
FmtStrVSNPrintf truncated to %d without QUIET_TRUNCATION specified!
Future already retrieved
GCC: (crosstool-NG 1.12.2) 4.6.1
GENERATOR
GLIBC_2.0
GLIBC_2.1
GLIBC_2.1.3
GLIBC_2.2
GLIBC_2.2.4
GLIBC_2.3
GLIBC_2.3.2
GameUISystemMgr001
Generate a random floating point number within a range, inclusive
Generate a random integer within a range, inclusive
GenerateUniqueKey: buffer too small
GetCPUInformation
GetFunctionSignature
HT~*1
IDENTIFIER
INSTANCE
INSTANCE type assignment mismatch
INTEGER
Incompatible script version
InputStackSystemVersion001
InputSystemVersion001
InstallChangeCallback called with NULL callback, ignoring!!!
InstallChangeCallback ignoring duplicate change callback!!!
Internal error
Invalid Instance Type
Invalid character
Invalid qsort, probably compare function defect
Invalid scope handed to script VM
IsValid
It~"1
JArray
K,9K0
K09K4w
K<;Cp
LOCALS
LOG_GENERAL
L[^_]
Length
Length2D
Length2DSqr
LengthSqr
Localize_001
LoggingSystem_IsChannelEnabled
LoggingSystem_Log
MATCHFRAMEWORK_001
MDLCache004
MatSystemSurface006
MaterialSystemHardwareConfig013
MeshSystem001
Module %s is a debug build
N10__cxxabiv115__forced_unwindE
N10__cxxabiv119__foreign_exceptionE
N12_GLOBAL__N_121future_error_categoryE
N12_GLOBAL__N_121system_error_categoryE
N12_GLOBAL__N_122generic_error_categoryE
N9__gnu_cxx20recursive_init_errorE
N9__gnu_cxx24__concurrence_lock_errorE
N9__gnu_cxx26__concurrence_unlock_errorE
N@9ND
NATIVE
NATIVECLOSURE
NSt13__future_base11_State_baseE
NSt13__future_base12_Result_baseE
NSt8ios_base7failureE
NULL instance passed to vscript!
Native stack overflow
NetworkSystemVersion001
No associated state
No such file
P8+P<
Ph0~	
Physics2 Interface ActorMgr v0.1
Physics2 Interface ResourceMgr v0.1
Physics2 Interface v0.3
Plat_ExitProcess
Plat_FloatTime
Plat_IsInDebugSession
Plat_MSTime
Promise already satisfied
QQWR1
QueuedLoaderVersion001
R$;V(
RAND_MAX
RandomFloat
RandomInt
RandomSeed
RegisterFunctionDocumentation
RenderDevice001
RenderDeviceMgr001
RenderHardwareConfig001
RenderSystemSurface001
ResourceSystem004
S$9S(
S09S4
S0f+P,f
SERIALIZE_STATE
SL9SPvG
SSE and SSE2 are required.
STRING_LITERAL
SX9S\
Save load of generators not well tested. caveat emptor
SceneSystem_001
Script debugger disconnected
Script running too long, terminating
Script terminated by SQQuerySuspend
SoundSystem001
Squirrel
Squirrel 2.2.3 stable
St10bad_typeid
St11logic_error
St11range_error
St11regex_error
St12domain_error
St12future_error
St12length_error
St12out_of_range
St12system_error
St13bad_exception
St13runtime_error
St14error_category
St14overflow_error
St15underflow_error
St16invalid_argument
St17bad_function_call
St8bad_cast
St9bad_alloc
St9exception
TABLE
THREAD
ThreadSleep
ToKVString
UCS-2LE
UCS-4LE
USERDATA
USERPOINTER
UTF-32LE
UTF-8
Unknown error
V,9K4vj
V@9VD
VAvi001
VBAllocTracker001
VBik001
VDataCache003
VDmeMakeFileUtils001
VEngineCvar007
VFileSystem017
VGUI_Input005
VGUI_Panel009
VGUI_Scheme010
VGUI_Surface031
VGUI_System010
VGUI_ivgui008
VMDLLIB001
VMaterialSystem080
VMaterialSystem2_001
VNewAsyncFileSystem001
VP4002
VPhysicsCollision007
VPrecacheSystem001
VProcessUtils002
VResourceAccessControl001
VScriptManager009
VSoundEmitter003
VSquirrel_OnCreateScope
VSquirrel_OnReleaseScope
VStudioRender026
VTT for 
V_AppendSlash: ran out of space on %s.
V_MakeAbsolutePath: _getcwd failed.
Vector
Vector argument expected
WEAKREF
WQRVS
WVSRP
Warning
Warning:  %s = '%s' is infinite, clamping value.
WorldRendererMgr001
WriteMiniDump
X%`y	
XZ[^_]
X[^_]
Y%hy	
Y%xx	
Y-\x	
ZN11CSquirrelVM9DumpStateEvE9CIterator
Z[^_]
ZtiWj
[%s] "%s"
[%s] %.14g
[%s] %d
[%s] %s
[%s] ARRAY
[%s] CLASS
[%s] CLOSURE
[%s] GENERATOR
[%s] INSTANCE
[%s] NATIVECLOSURE
[%s] NULL
[%s] TABLE
[%s] THREAD
[%s] USERDATA
[%s] USERPOINTER
[%s] WEAKREF
[,;^0
[/code]
[/h1]
[/img]
[/list]
[/url]
[[^_]
[code]
[img]
[list]
[url=
\[^_]
^8+^<9
_Accum
_Fract
_GLOBAL_
_Jv_RegisterClasses
_Sat 
_Z10DevWarningPKcz
_Z6ConMsgPKcz
_Z6DevMsgPKcz
_ZTIN10__cxxabiv115__forced_unwindE
_ZTIN10__cxxabiv119__foreign_exceptionE
_ZTIN9__gnu_cxx20recursive_init_errorE
_ZTIN9__gnu_cxx24__concurrence_lock_errorE
_ZTIN9__gnu_cxx26__concurrence_unlock_errorE
_ZTSN10__cxxabiv115__forced_unwindE
_ZTSN10__cxxabiv119__foreign_exceptionE
_ZTSN9__gnu_cxx20recursive_init_errorE
_ZTSN9__gnu_cxx24__concurrence_lock_errorE
_ZTSN9__gnu_cxx26__concurrence_unlock_errorE
_ZTVN10__cxxabiv115__forced_unwindE
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv119__foreign_exceptionE
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTVN9__gnu_cxx20recursive_init_errorE
_ZTVN9__gnu_cxx24__concurrence_lock_errorE
_ZTVN9__gnu_cxx26__concurrence_unlock_errorE
__SqTypes
___tls_get_addr
___tls_get_addr@@GLIBC_2.3
__bss_start
__cxa_atexit
__cxa_atexit@@GLIBC_2.1.3
__cxa_finalize
__cxa_finalize@@GLIBC_2.1.3
__float128
__gmon_start__
__gnu_cxx::__concurrence_lock_error
__gnu_cxx::__concurrence_unlock_error
_array_default_delegate
_attributes
_base 
_call
_charsize_
_class 
_class_default_delegate
_cloned
_closure_default_delegate
_consts
_debughook
_defaultvalues
_delegate 
_delslot
_edata
_errorhandler
_fini
_floatsize_
_generator_default_delegate
_inherited
_init
_instance_default_delegate
_intsize_
_lasterror
_members
_metamethods
_metamethodsmap
_methods
_modulo
_newmember
_newslot
_nexti
_nexti failed
_nexti returned an invalid idx
_number_default_delegate
_registry
_roottable
_setjmp
_setjmp@@GLIBC_2.0
_sqdbg_debug_hook_
_sqdbg_error_handler_
_stack
_string_default_delegate
_table_default_delegate
_thread_default_delegate
_tostring
_typeof
_valveinternal
_vargsstack
_version_
_weakref_default_delegate
_xlsp
` [^_]
abort
abort@@GLIBC_2.0
accept
accept@@GLIBC_2.0
acos@@GLIBC_2.0
acosf
acosf@@GLIBC_2.0
addbreakpoint
added bp %d %s
added watch %d
added watch %d %s
alignof 
archive
arith op %c on between '%s' and '%s'
arith op %c on between '%s' and '%s' (%s)
asin@@GLIBC_2.0
asinf
asinf@@GLIBC_2.0
assert
assertion failed
atan2
atan2@@GLIBC_2.0
atan2f
atan2f@@GLIBC_2.0
atan@@GLIBC_2.0
atanf
atanf@@GLIBC_2.0
attempt to call '%s'
attempt to delete a slot from a %s
attempt to negate a %s
attempt to perform a bitwise op on a %s
attribute
basic_iostream
basic_istream
basic_ostream
basic_string::_M_replace_aux
basic_string::_S_construct null not valid
basic_string::_S_create
basic_string::append
basic_string::assign
basic_string::at
basic_string::basic_string
basic_string::compare
basic_string::copy
basic_string::erase
basic_string::insert
basic_string::replace
basic_string::resize
basic_string::substr
begin
beginelement
bind@@GLIBC_2.0
bindenv
bitwise op between '%s' and '%s'
boolean
break
c x|y|t
call already initialized
call not initialized
can't 'create' a local slot
can't assign expression
can't delete an expression
cannot apply instanceof between a %s and a %s
cannot brake deref/or comma needed after [exp]=exp slot declaration
cannot convert the string
cannot create a class in a local with the syntax(class <local>)
cannot create blob with negative size
cannot delete a local
cannot delete a slot from %s
cannot iterate %s
cannot iterate a generator
cannot resume a vm that is not running any code
cannot serialize a %s
cannot suspend an already suspended vm
cannot suspend through native calls/metamethods
cannot use character classes in ranges
cannot wakeup a idle thread
cannot wakeup a running thread
capture
castf2i
casti2f
catch
cbrtf
cbrtf@@GLIBC_2.0
char16_t
char32_t
chdir
chdir@@GLIBC_2.0
cheat
class CCallChainer
class CSimpleCallChainer
class LateBinder
class instances do not support the new slot operator
clear
clear only works on table and array
client
clientcmd_can_execute
clone
cloning a %s
close@@GLIBC_2.0
collectgarbage
compare func failed
comparsion between '%.50s' and '%.50s'
compilestring
complex 
complex_types <- {
constant too long
construction vtable for 
constructor
continue
cos@@GLIBC_2.0
cosf@@GLIBC_2.0
covariant return thunk to 
d[^_]
decimal128
decimal32
decimal64
decltype (
decltype(nullptr)
default
delagate cycle
delegate cycle detected
delegating a '%s'
delete[]
developer
disabled
disconnected
division by zero
dl_iterate_phdr
dl_iterate_phdr@@GLIBC_2.2.4
dlclose
dlclose@@GLIBC_2.0
dlerror
dlerror@@GLIBC_2.0
dlopen
dlopen@@GLIBC_2.1
dlsym
dlsym@@GLIBC_2.0
dummy
empty class
empty constant
empty separators string
enabledebuginfo
end of statement expected (; or lf)
endelement
error accept(socket)
error compiling the serialization function
error on listen(socket)
error parsing add breakpoint
error parsing add watch
error parsing remove breakpoint
error parsing remove watch
error parsing the string
expected '%c'
expected '%s'
expected ')'
expected ')' or ','
expected '='
expected paren
expf@@GLIBC_2.0
exponent expected
expression expected
expression expected, found ')'
extend
extends
f;2t{
f=siu
f=tru
failed to initialize the debugger
false
float expected for the specified format
floor
flush
foreach
fputc
fputc@@GLIBC_2.0
fputs
fputs@@GLIBC_2.0
free variables cannot be modified
free@@GLIBC_2.0
function 
function Assert( b, msg = null )
function Msg( text )
function VSquirrel_OnCreateScope( name, outer )
function VSquirrel_OnReleaseScope( scope )
function build_refs(t):(objs_reg)
function build_tree():(objs_reg)
function emitvalue(type_attrib,value_attrib,val)
function evaluate_watch(locals,id,expression)
function getvalue(v):(objs_reg)
function iterateobject(obj,func)
function pack_type(type):(packed_types)
function printl( text )
function with default parameters cannot have variable number of parameters
future
g_pMemAlloc
generic
getInstanceVarInfo: Could not retrieve UserData
getVar(): Could not create instance: %s
getVar(): Invalid type+access: 'ScriptStringVarBase' with VAR_ACCESS_CONSTANT (use VAR_ACCESS_READ_ONLY instead)
getVar(): Invalid type+access: 'const SQChar *' without VAR_ACCESS_CONSTANT
getVarInfo: Could not retrieve UserData
getattributes
getclass
getconsttable
getcwd
getcwd@@GLIBC_2.0
getinfos
getroottable
getstackinfos
getstatus
global constructors keyed to 
global destructors keyed to 
go (execution resumed)
guard variable for 
h[^_]
handle
hexadecimal number expected
hidden alias for 
iconv
iconv@@GLIBC_2.1
iconv_close
iconv_close@@GLIBC_2.1
iconv_open
iconv_open@@GLIBC_2.1
idx out of range
if ( ::getroottable().parent )
if ( currentscope )
if ( developer() > 0 )
image not found
imaginary 
indexing %s with %s
indexing 'vargv' with %s
instanceof
integer expected for the specified format
internal VM error
internal compiler error: too many locals
internal error (_nexti) wrong argument type
internal vm error bitwise op failed
internal vm error, yielding a dead generator
internal vm error, yielding dead generator
invalid base type
invalid class name
invalid constant [%s.%s]
invalid environment
invalid format
invalid free var index
invalid numeric format
invalid object type
invalid octal number
invalid or corrupted closure stream
invalid origin
invalid param
invalid param type
invalid parameter
invalid range
invalid stream
invalid token '..'
invalid type tag
invalid typemask
io error
io error (write function failure)
io error, read function failure, the origin stream could be corrupted/trucated
isalnum
isalnum@@GLIBC_2.0
isalpha
isalpha@@GLIBC_2.0
iscntrl
iscntrl@@GLIBC_2.0
islower
islower@@GLIBC_2.0
isprint
isprint@@GLIBC_2.0
ispunct
ispunct@@GLIBC_2.0
isspace
isspace@@GLIBC_2.0
isupper
isupper@@GLIBC_2.0
iswalnum
iswalnum@@GLIBC_2.0
iswalpha
iswalpha@@GLIBC_2.0
iswspace
iswspace@@GLIBC_2.0
isxdigit
isxdigit@@GLIBC_2.0
ivalid type
ivalid type, expected table
java Class for 
java resource 
l[^_]
ld-linux.so.2
letter expected
libc.so.6
libdl.so.2
libm.so.6
libpthread.so.0
libtier0.so
libvstdlib.so
listen
listen@@GLIBC_2.0
local currentscope;
local level=3;
local objs_reg = { maxid=0 ,refs={} }
local packed_types={
local si;
local stack=[]
locals
log10
log10f
log10f@@GLIBC_2.0
log@@GLIBC_2.0
logf@@GLIBC_2.0
long double
longjmp
longjmp@@GLIBC_2.0
lstrip
malloc
malloc@@GLIBC_2.0
match
mbstowcs
mbstowcs@@GLIBC_2.0
memchr
memchr@@GLIBC_2.0
memcmp
memcmp@@GLIBC_2.0
memcpy
memcpy@@GLIBC_2.0
memmove
memmove@@GLIBC_2.0
memset
memset@@GLIBC_2.0
missing "*/" in comment
modulo by zero
native
native closure expected
native function
negative size
new[]
newline in a constant
newthread
no data left to read
non-virtual thunk to 
not enough params in the stack
not enough paramters for the given format string
notconnected
notify
null cannot be used as index
null is not a valid key
null key
null vector
only generators can be resumed
operator
operator 
overflow in numeric constant
pAfailed to bind the socket
pacall
parameter %d has an invalid type '%s' ; expected: '%s'
paramscheck
parent
parent cannot be set
pcall
pow@@GLIBC_2.0
precision format too long
print
printf@@GLIBC_2.0
pthread_cancel
pthread_cancel@@GLIBC_2.0
pthread_cond_broadcast
pthread_cond_broadcast@@GLIBC_2.3.2
pthread_cond_destroy
pthread_cond_destroy@@GLIBC_2.3.2
pthread_cond_signal
pthread_cond_signal@@GLIBC_2.3.2
pthread_cond_wait
pthread_cond_wait@@GLIBC_2.3.2
pthread_mutex_lock
pthread_mutex_lock@@GLIBC_2.0
pthread_mutex_unlock
pthread_mutex_unlock@@GLIBC_2.0
pthread_once
pthread_once@@GLIBC_2.0
puts@@GLIBC_2.0
q ;q$}
r""\\
rand@@GLIBC_2.0
rawdelete
rawget
rawget works only on array/table/instance and class
rawin
rawset
rawset works only on array/table/class and instance
readblob
readn
ready
realloc
realloc@@GLIBC_2.0
recv@@GLIBC_2.0
reference temporary for 
regex_error
regexp
remove
removebreakpoint
removed bp %d %s
removed watch %d
replicated
resize failed
resume
resumed
resuming active generator
resuming dead generator
reverse
rstrip
running
s 9K4
s s n 
s89s<
s89s<v7
s89s<vf
s89s<w
s_pInterfaceRegs
scalar expected : integer,float
scalar expected : integer,float or string
search
select
select@@GLIBC_2.0
send@@GLIBC_2.0
server_can_execute
setVar(): Cannot write to an SQUserPointer: %s
setVar(): Cannot write to constant: %s
setattributes
setconsttable
setdebughook
seterrorhandler
setroottable
sin@@GLIBC_2.0
sincosf
sincosf@@GLIBC_2.1
sinf@@GLIBC_2.0
singleplayer
size must be a number
sizeof 
slice
slice out of range
snprintf@@GLIBC_2.0
socket
socket error
socket failed
socket@@GLIBC_2.0
split
sprintf@@GLIBC_2.0
srand
srand@@GLIBC_2.0
ss_added
sscanf
sscanf@@GLIBC_2.0
static
std::allocator
std::bad_alloc
std::bad_cast
std::bad_exception
std::bad_typeid
std::basic_iostream<char, std::char_traits<char> >
std::basic_istream<char, std::char_traits<char> >
std::basic_ostream<char, std::char_traits<char> >
std::basic_string
std::basic_string<char, std::char_traits<char>, std::allocator<char> >
std::exception
std::iostream
std::istream
std::ostream
std::string
std_blob
std_stream
stderr
stderr@@GLIBC_2.0
steam://openurl/
steam://openurl_external/
step into
step return
strcasecmp
strcasecmp@@GLIBC_2.0
strchr
strchr@@GLIBC_2.0
strcmp
strcmp@@GLIBC_2.0
strcpy
strcpy@@GLIBC_2.0
strerror
strerror@@GLIBC_2.0
string expected
string expected for the specified format
string literal
strlen
strlen@@GLIBC_2.0
strncat
strncat@@GLIBC_2.0
strncmp
strncmp@@GLIBC_2.0
strnlen
strnlen@@GLIBC_2.0
strstr
strstr@@GLIBC_2.0
strtod
strtod@@GLIBC_2.0
strtok
strtok@@GLIBC_2.0
strtol
strtol@@GLIBC_2.0
strtoll
strtoll@@GLIBC_2.0
strtoul
strtoul@@GLIBC_2.0
strtoull
strtoull@@GLIBC_2.0
subexpcount
suspend
suspended
swap2
swap4
swapfloat
switch
syscall
syscall@@GLIBC_2.0
system
t!RRPV
t)<.u
t,QQVW
t.RRj
t4RRj
t;9{<w
t>~$= 
tA~G=
tK~)= 
tLRRj
table expected
tan@@GLIBC_2.0
tanf@@GLIBC_2.0
tc<?t_
temp_reg
terminate called after throwing an instance of '
terminate called recursively
terminate called without an active exception
terminate from user
terminated
terminated by debugger
tg~E=
the %s type doesn't have a parent slot
the breakpoint doesn't exists
the class is locked
the function doesn't have var args
the index '%.50s' does not exist
the index doesn't exist
the object is not a class
the object is not a class instance
the object is not a closure
the object is not a nativeclosure
the object must be a weakref
the property '%s' already exists
the stream is invalid
the target is not a closure
the type doesn't have a default delegate
the watch does not exists
throw
tochar
tofloat
tointeger
tolower
tolower@@GLIBC_2.0
too many digits for an Hex number
top() on a empty array
toupper
toupper@@GLIBC_2.0
towlower
towlower@@GLIBC_2.0
towupper
towupper@@GLIBC_2.0
try {
trying to inherit from a %s
trying to modify a class that has already been instantiated
trying to resume a '%s',only genenerator can be resumed
trying to set '%s'
trying to yield a '%s',only genenerator can be yielded
tu<Etq
typecheck
typeinfo fn for 
typeinfo for 
typeinfo name for 
t|y|x
t|y|x%s
u)+C 
u4PPW
unexpected character
unexpected character(control)
unexpected type %s
unfinished string
unknown
unknown error
unknown packet
unnamed
unnamedbuffer
unrecognised escaper char
unsigned
unsigned __int128
unsigned char
unsigned int
unsigned long
unsigned long long
unsigned short
userdata
userpointer
using '%s' as delegate
v,;s0
vGf=sr
varargs
vargc
vargv
vargv index out of range
vector::_M_default_append
vscript
vscript.so.dbg
vsnprintf
vsnprintf@@GLIBC_2.0
vsprintf
vsprintf@@GLIBC_2.0
vswprintf
vswprintf@@GLIBC_2.2
v|f=di
wakeup
watches
wchar_t
wcschr
wcschr@@GLIBC_2.0
wcslen
wcslen@@GLIBC_2.0
wcsncat
wcsncat@@GLIBC_2.0
wcsncpy
wcsncpy@@GLIBC_2.0
wcstombs
wcstombs@@GLIBC_2.0
while
width format too long
writeblob
writen
wrong index
wrong indexes
wrong number of parameters
wrong parameter
wrong type
wvf=so
yield
{89{<
{89{<w
{8;{<
{default arg#
{h9{l
{lambda(
{parm#
{unnamed type#
{}()':
|[^_]
}catch(e)
}tL=,
~	zuf
~1PPVS
~d9N,
~d9N8v`
