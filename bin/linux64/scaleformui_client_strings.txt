__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
Plat_IsInDebugSession
WriteMiniDump
Plat_ExitProcess
g_pMemAlloc
__gxx_personality_v0
memset
pthread_mutex_lock
pthread_mutex_unlock
strlen
memcpy
strchr
wcslen
wcschr
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTVN10__cxxabiv121__vmi_class_type_infoE
Warning
__cxa_guard_acquire
__cxa_guard_release
__cxa_guard_abort
__stack_chk_fail
strcmp
_Z6DevMsgPKcz
__cxa_atexit
SteamAPI_RegisterCallback
SteamAPI_UnregisterCallback
strrchr
CommandLine
DevMsg
LoggingSystem_RegisterLoggingChannel
SteamAPI_InitSafe
SteamAPI_GetHSteamUser
SteamAPI_GetHSteamPipe
SteamInternal_CreateInterface
__dynamic_cast
_ZN16IDirect3DDevice911SaveGLStateEv
_ZN16IDirect3DDevice914RestoreGLStateEv
_ZN16IDirect3DDevice911GetViewportEP13_D3DVIEWPORT9
KeyValuesSystem
V_UTF8ToUnicode
strtol
LoggingSystem_IsChannelEnabled
__vsnprintf_chk
LoggingSystem_LogDirect
strstr
V_UnicodeToUTF8
_Z6ConMsgPKcz
toupper
tolower
s_pInterfaceRegs
dlopen
dlerror
__strcpy_chk
dlclose
__printf_chk
dlsym
_Z10DevWarningPKcz
getcwd
strtoul
LOG_GENERAL
LoggingSystem_Log
strtod
__errno_location
strtoll
wcstol
swscanf
wcstof
__swprintf_chk
strncpy
ThreadGetCurrentId
_ZNV16CThreadFastMutex4LockEjj
memmove
memcmp
strnlen
strcpy
strcasecmp
towupper
towlower
__pow_finite
wcsncpy
__vswprintf_chk
strncat
wcsncat
mbstowcs
wcstombs
iconv_open
iconv
iconv_close
chdir
isalnum
iswalnum
iswspace
strtoull
iscntrl
isprint
iswalpha
_ZN10CVProfNode9ExitScopeEv
_ZN12CThreadEvent3SetEv
g_VProfCurrentProfile
_ZN10CVProfNode10GetSubNodeEPKciS1_i
_ZN10CVProfNode10EnterScopeEv
_ZN17CThreadSpinRWLock15SpinLockForReadEv
_ZN17CThreadSyncObjectD2Ev
pthread_mutex_destroy
pthread_mutexattr_init
pthread_mutexattr_settype
pthread_mutex_init
_ZN12CThreadEventC1Eb
_ZN13CThreadRWLock11WaitForReadEv
_ZN17CThreadSpinRWLock16SpinLockForWriteEv
_ZN13CThreadRWLock12LockForWriteEv
_ZN13CThreadRWLock11UnlockWriteEv
__ctype_b_loc
putchar
MemAllocScratch
MemFreeScratch
pthread_self
pthread_mutex_trylock
pthread_cond_init
pthread_cond_destroy
gettimeofday
pthread_cond_timedwait
pthread_cond_wait
pthread_cond_signal
pthread_cond_broadcast
pthread_exit
usleep
pthread_attr_init
pthread_attr_setdetachstate
pthread_attr_setstacksize
pthread_attr_setschedparam
pthread_create
pthread_attr_destroy
_ZSt9terminatev
__vsprintf_chk
ceilf
sqrtf
floorf
atan2f
sincosf
inflate
inflateEnd
isspace
strncasecmp
wcscmp
wcscasecmp
localeconv
__memcpy_chk
trunc
acosf
atan2
_setjmp
__longjmp_chk
ftell
fflush
fwrite
fread
fclose
fseek
rewind
wcscoll
strncmp
floor
__strncpy_chk
inflateReset
inflateInit_
__memset_chk
strcspn
strspn
sincos
glDisable
glViewport
glEnable
glScissor
glBlendFunc
glDrawArrays
glColorMask
glStencilFunc
glStencilOp
glClearStencil
glClear
glGetString
glGetIntegerv
glGetFloatv
glBindTexture
glGetTexLevelParameteriv
glStencilMask
glDrawElements
glClearColor
glGetError
__stpcpy_chk
glFlush
glPixelStorei
glTexSubImage2D
glTexImage2D
glDeleteTextures
glReadPixels
glGetTexParameteriv
glTexParameteri
glGenTextures
glXGetProcAddressARB
__sprintf_chk
stderr
__fprintf_chk
getenv
__isoc99_sscanf
malloc
crc32
frexp
gmtime
deflate
deflateEnd
fputc
deflateInit2_
deflateReset
get_crc_table
crc32_combine
crc32_combine64
adler32
deflateSetDictionary
deflateSetHeader
deflatePrime
deflateTune
deflateBound
z_errmsg
deflateParams
deflateInit_
deflateCopy
deflate_copyright
inflateReset2
inflateInit2_
inflatePrime
inflateSetDictionary
inflateGetHeader
inflateSync
inflateSyncPoint
inflateCopy
inflateUndermine
inflateMark
inflate_copyright
zlibVersion
zlibCompileFlags
zError
adler32_combine
adler32_combine64
libtier0_client.so
libvstdlib_client.so
libsteam_api.so
libtogl_client.so
libGL.so.1
access
opendir
readdir64
closedir
__ctype_tolower_loc
strdup
strcasestr
strpbrk
freopen
fopen
fopen64
scandir
__xstat
__lxstat
__xstat64
__lxstat64
chmod
lchown
symlink
mount
unlink
mkfifo
rename
utime
utimes
realpath
mkdir
rmdir
__atan2f_finite
__atan2_finite
__log_finite
__acosf_finite
__asin_finite
__expf_finite
__acos_finite
GetCPUInformation
RandomFloat
RandomSeed
cbrtf
ThreadSleep
__exp_finite
g_pThreadPool
ThreadInterlockedCompareExchangePointer
ThreadInterlockedExchangePointer
libm.so.6
libdl.so.2
libstdc++.so.6
libpthread.so.0
ld-linux-x86-64.so.2
__pthread_key_create
pthread_once
dl_iterate_phdr
libc.so.6
__xmknod
_edata
__bss_start
GLIBC_2.2.5
CXXABI_1.3
GLIBCXX_3.4
GLIBC_2.15
GLIBC_2.3.2
GLIBC_2.7
GLIBC_2.14
GLIBC_2.11
GLIBC_2.3
GLIBC_2.4
GLIBC_2.3.4
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]A^]
[A\A]A^]
AWAVLc
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
ATUSH
[]A\H
AWAVAUATUSH
[]A\A]A^A_
fffff.
ffffff.
ffffff.
3@T]f
AUATA
A\A]A^]
AWAVI
H[A\A]A^A_]
AUATA
A\A]A^]
AWAVAUA
t#L+e
H[A\A]A^A_]
[A\A]]
AWAVAUATSH
([A\A]A^A_]
 [A\]
 [A\]
AUATSH
[A\A]]
AUATSH
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATI
X[A\A]A^A_]
AVAUATSH
0[A\A]A^]
0[A\A]A^]
fffff.
([A\A]]
[A\A]]
[A\A]]
[A\A]]
([A\A]A^A_]
8[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AUATSH
([A\A]]
fffff.
fffff.
fffff.
fffff.
AVAUI
[A\A]A^A_]
AUATL
[A\A]]
0[A\]
fffff.
fffff.
h[A\A]]
0[A\]
fffff.
AUATSH
[A\A]]
[A\A]]
[A\A]]
AWAVI
AUATI
McnhA
H[A\A]A^A_]
McfhA
H[A\A]A^A_]
H[A\A]A^A_]
AUATI
([A\A]]
AVAUI
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVI
AUATA
[A\A]A^A_]
AWAVAUATSH
X[A\A]A^A_]
fffff.
AVAUI
 [A\A]A^]
 [A\A]A^]
 [A\A]A^]
AUATI
8[A\A]]
8[A\A]]
AUATSH
[A\A]]
[A\A]]
fffff.
fffff.
fffff.
fffff.
fffff.
A\A]A^A_]
[A\A]A^A_]
[A\A]]
AUATI
[A\A]A^A_]
fffff.
AUATE1
[A\A]A^A_]
fffff.
AWAVL
[A\A]A^A_]
[A\A]A^A_]
([A\A]A^A_]
AVAUATSHc
A\A]A^]
A\A]A^]
AWAVE1
AUATI
H[A\A]A^A_]
fffff.
AWAVAUATI
([A\A]A^A_]
([A\A]A^A_]
fffff.
fffff.
AUATSH
h[A\A]]
[A\A]A^]
AUATSH
[A\A]]
M;d$ 
[A\A]]
AWAVAUATSH
8[A\A]A^A_]
8[A\A]A^A_]
 [A\A]A^]
AWAVAUATSH
8[A\A]A^A_]
8[A\A]A^A_]
fffff.
([A\A]A^A_]
([A\A]A^A_]
AUATSH
([A\A]]
([A\A]]
AWAVH
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
AWAVAUATSH
([A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVL
([A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVL
([A\A]A^A_]
H;v u
AWAVAUI
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
AWAVAUA
[A\A]A^A_]
[A\A]A^A_]
tNH9P
S@H9P
[A\A]A^A_]
AWAVAUATA
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
AWAVAUATA
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
AWAVAUATA
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
fffff.
AWAVAUATSH
[A\A]A^A_]
AUATSH
D$ptVI
([A\A]]
[A\A]]
AWAVI
AUATSH
[A\A]A^A_]
([A\A]A^A_]
AUATI
[A\A]]
[A\A]]
ffff.
AWAVAUL
[A\A]A^A_]
t(HcO
t(HcO
t(HcO
[A\A]]
AUATL
[A\A]]
AUATI
[A\A]]
[A\A]]
AVAUATL
[A\A]A^]
[A\A]]
[A\A]]
AUATSH
[A\A]]
[A\A]]
[A\A]]
A\A]A^]
[A\A]]
0[A\]
AUATI
[A\A]A^A_]
p[A\]
fffff.
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
AVAUA
A\A]A^]
AVAUI
[A\A]A^A_]
AVAUA
A\A]A^]
AWAVAUA
X[A\A]A^A_]
fffff.
AUATA
([A\A]]
([A\A]]
AUATA
[A\A]]
[A\A]]
AVAUI
[A\A]A^]
AUATE1
A\A]A^]
AWAVA
AUATI
[A\A]A^A_]
AWAVA
AUATE1
[A\A]A^A_]
fffff.
AWAVA
AUATE1
[A\A]A^A_]
fffff.
AUATI
[A\A]]
fffff.
AVAUA
A\A]A^]
fffff.
ffffff.
U;V(H
9V(w	
;V(Uf
;V(UH
;V(UH
fffff.
AWAVL
E9e(vvD
RhE9e(w
[A\A]A^A_]
 [A\]
 [A\]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
fffff.
fffff.
AWAVAUI
h[A\A]A^A_]
fffff.
AUATSH
[A\A]]
[A\A]]
A\A]A^]
A\A]A^]
fffff.
ffff.
AUATI
[A\A]]
fffff.
fffff.
AUATI
@XA^]
A\A]A^]
AWAVI
[A\A]A^A_]
A\A]A^A_]
A\A]A^A_]
rA\A]A^A_]
AWAVAUATI
dH34%(
[A\A]A^A_]
A\A]A^]
AWAVAUI
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
([A\A]A^A_]
 [A\]
 [A\]
AVAUI
[A\A]A^]
0[A\]
0[A\]
 [A\A]A^]
AUATL
8[A\A]]
AWAVD
[A\A]A^A_]
AWAVD
[A\A]A^A_]
fffff.
A\A]]
fffff.
([A\A]]
([A\A]]
fffff.
fffff.
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
0[A\]
0[A\]
0[A\]
0[A\]
0[A\]
0[A\]
A\A]A^]
0[A\]
A\A]A^]
0[A\]
8[A\A]A^A_]
[A\A]]
 [A\]
 [A\]
 [A\]
 [A\]
 [A\]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
AVAUATI
[A\A]A^]
fffff.
AWAVI
AUATSH
[A\A]A^A_]
[A\A]]
fffff.
fffff.
AVAUATSH
[A\A]A^A_]
A\A]]
[A\A]]
AUATSH
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVI
[A\A]A^A_]
8(t/E1
AUATI
;#t$H
[A\A]]
UHcGtH
UHcGpH
;w UH
0[A\]
AVAUI
[A\A]A^]
AUATSH
[A\A]]
AUATSH
[A\A]]
AUATSH
[A\A]]
AUATSH
[A\A]]
AVAUATSH
[A\A]A^]
[A\A]]
AUATL
[A\A]]
[A\A]]
AVAUI
[A\A]A^]
AWAVAUATI
[A\A]A^A_]
[A\A]]
[A\A]]
fffff.
h[A\A]A^A_]
h[A\A]A^A_]
AWAVAUATSH
I9F(A
[A\A]A^A_]
fffff.
AUATI
[A\A]]
[A\A]]
G u*H
fffff.
	w(UH
fffff.
AUATSH
H[A\A]]
AVAUATA
CXt;H
@[A\A]A^]
AVAUATSH
HcWPH
[A\A]A^A_]
fffff.
ffff.
AUATSH
[A\A]]
[A\A]]
AUATI
[A\A]]
[A\A]]
fffff.
AWAVAUI
8[A\A]A^A_]
fffff.
AVAUI
tWA9]
~)A;]
[A\A]A^A_]
[A\A]A^A_]
fffff.
{pH97tpH
AVAUATI
P[A\A]A^]
t4[A\A]A^]
A\A]A^]
[A\A]A^A_]
ffff.
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
fffff.
AWAVAUATI
x[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
HcSPH
 [A\A]A^]
fffff.
fffff.
AUATA
A\A]A^]
AUATA
A\A]A^]
A\A]A^]
ffff.
ffff.
[A\A]]
[A\A]]
AUATSH
[A\A]]
ffff.
AUATL
[A\A]]
fffff.
AUATSH
dH34%(
[A\A]]
[A\A]A^]
A\A]A^]
AUATI
~F+S$H
[A\A]A^A_]
+S$Hc
[A\A]A^A_]
[A\A]A^A_]
fffff.
AUATI
[A\A]]
[A\A]]
A\A]]
[A\A]]
A\A]]
[A\A]]
[A\A]A^A_]
AWAVI
[A\A]A^A_]
fffff.
AWAVI
h[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
fffff.
AUATI
[A\A]]
fffff.
fffff.
AWAVAUATSH
H[A\A]A^A_]
+{$Hc
[A\A]]
[A\A]]
[A\A]A^]
[A\A]A^]
AVAUI
 [A\A]A^]
fffff.
fffff.
AVAUATI
[A\A]A^]
AUATSH
[A\A]]
[A\A]]
AUATSL
[A\A]A^]
AUATS
[A\A]A^]
AWAVI
AUATSH
<}tE<{uK
[A\A]A^A_]
AWAVA
[A\A]A^A_]
[A\A]A^A_]
fffff.
AWAVAUATI
8[A\A]A^A_]
$A+D$$H
8[A\A]A^A_]
$A+D$$H
$A+D$$H
$A+D$$H
A+D$$H
A+D$$H
A+D$$H
A+D$$H
A+D$$H
A+T$$Hc
A+T$$Hc
A+T$$Hc
A+T$$Hc
AWAVAUATSH
[A\A]A^A_]
+S$Hc
+K$Hc
+S$Hc
D+s$Mc
+S$Hc
+S$Hc
+S$Hc
+S$Hc
D+c$Mc
D+c$Mc
D+c$Mc
D+c$Mc
D+s$Mc
+S$Hc
+S$Hc
+S$Hc
+S$Hc
D+c$Mc
D+c$Mc
D+c$Mc
D+c$Mc
AWAVI
AUATSH
H[A\A]A^A_]
H[A\A]A^A_]
fffff.
AVAUATSH
A\A]A^]
A\A]]
A\A]A^A_]
AWAVI
dH34%(
[A\A]A^A_]
AUATI
[A\A]]
fffff.
A\A]]
AWAVI
[A\A]A^A_]
[A\A]]
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
fffff.
AWAVAUATSH
[A\A]A^A_]
+S$Hc
+S$Hc
+K$Hc
D+{$Mc
+S$Hc
+S$Hc
+S$Hc
+S$Hc
+S$Hc
D+C$Mc
D+s$Mc
D+s$Mc
D+{$Mc
D+{$Mc
D+{$Mc
AVAUI
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
AUATS
[A\A]A^]
[A\A]A^]
fffff.
AUATI
[A\A]]
fffff.
AWAVI
AUATSH
t|Ic]
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
AVAUI
X[A\A]A^A_]
AWAVAUATA
Jc<(H
Jc<(H
([A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
+S$Hc
D+c$Mc
[A\A]]
+{$Hc
AUATS
A\A]A^]
fffff.
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
vP<_tL
AVAUATS
[A\A]A^]
ffff.
ffff.
[A\A]]
fffff.
AVAUATI
A\A]A^]
A\A]A^]
ffff.
<XueH
<Xu-H
AUATSH
A\A]]
A\A]]
ffff.
AWAVAUI
[A\A]A^A_]
AVAUATD
[A\A]A^]
A\A]A^]
ffff.
ffff.
AUATI
[A\A]]
AUATI
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]A^]
AWAVI
[A\A]A^A_]
AWAVI
[A\A]A^A_]
AVAUATA
p[A\A]A^]
AWAVL
AUATSH
[A\A]A^A_]
 [A\A]A^]
([A\A]A^A_]
[A\A]A^A_]
ffffff.
 [A\A]A^]
([A\A]A^A_]
AUATLc
[A\A]A^A_]
AWAVAUI
([A\A]A^A_]
AVAUATI
[A\A]A^]
fffff.
[A\A]]
[A\A]]
/t7I9
$<.tO
[A\A]]
[A\A]]
AUATSH
[A\A]]
dH3<%(
[A\A]]
<\tz</tv1
</tS<\tOH
A\A]]
A\A]]
AVAUA
A\A]A^]
A\A]A^]
AWAVAUI
t/<.u
</t!f
[A\A]A^A_]
[A\A]A^A_]
AVAUATSH
[A\A]A^]
,#[A\A]A^]
ffff.
[A\A]]
AUATI
[A\A]A^A_]
AWAVAUATSH
<\u&H
[A\A]A^A_]
[A\A]A^A_]
A\A]A^A_]
[A\A]A^A_]
ffffff.
AVAUATI
8[A\A]A^A_]
[A\A]A^A_]
ffff.
[A\A]]
ffffff.
fffff.
[A\A]A^]
A\A]A^]
AWAVAUI
dH3<%(
[A\A]A^A_]
AWAVAUI
t)< ~
dH3<%(
[A\A]A^A_]
fffff.
AWAVAUATSH
HcM te
8[A\A]A^A_]
8[A\A]A^A_]
A\A]A^A_]
AUATSH
[A\A]]
[A\A]]
fffff.
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
t	D; u
ffff.
AWAVAUATA
tcA:]
[A\A]A^A_]
ffffff.
ffff.
fffff.
AVAUD
ATSA9
"E:#uIA
[A\A]A^]
A\A]A^]
fffff.
AWAVAUATSH
dH3<%(
X[A\A]A^A_]
AWAVAUATSH
~2D9e
[A\A]A^A_]
]tG9E
AWAVLc
[A\A]A^A_]
[A\A]A^A_]
AUATI
<$.tlL
dH34%(
[A\A]]
AWAVL
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUA
8[A\A]A^A_]
8[A\A]A^A_]
AWAVAUA
([A\A]A^A_]
A\A]A^A_]
ffff.
AWAVAUA
8[A\A]A^A_]
AWAVAUATSH
+S$Hc
+S$Hc
+S$Hc
+S$Hc
+S$Hc
[A\A]A^A_]
+S$Hc
+S$Hc
+S$Hc
AWAVAUATSD
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATSD
[A\A]A^A_]
[A\A]A^A_]
[A\A]]
AUATA
[A\A]]
[A\A]]
AWAVI
HA\A]A^A_]
8[A\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
8[A\A]A^A_]
HA\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATSH
8[A\A]A^A_]
A\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
fffff.
ffffff.
AVAUATSH
8[A\A]A^A_]
HA\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATSH
8[A\A]A^A_]
A\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
8[A\A]A^A_]
HA\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
8[A\A]A^A_]
HA\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATSH
8[A\A]A^A_]
A\A]A^A_]
[A\A]A^A_]
8[A\A]A^A_]
AWAVI
AUATSH
X[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
X[A\A]A^A_]
A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATI
XA\A]A^A_]
X[A\A]A^A_]
[A\A]A^A_]
X[A\A]A^A_]
AWAVAUATI
H[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVI
AUATI
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
AWAVAUATI
h[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
h[A\A]A^A_]
X[A\A]A^A_]
[A\A]A^A_]
h[A\A]A^A_]
ffff.
AWAVAUI
A\A]A^A_]
h[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATI
H[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVI
AUATI
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
AUATL
[A\A]]
[A\A]]
AUATL
[A\A]]
[A\A]]
AVAUATE1
[A\A]A^]
AVAUATE1
[A\A]A^]
fffff.
AVAUATA
[A\A]A^]
AVAUATA
[A\A]A^]
ffffff.
[A\A]A^A_]
[A\A]A^A_]
ffff.
AVAUA
A;G ~
[A\A]A^A_]
[A\A]]
fffff.
<19{ |.
AVAUATA
[A\A]A^]
A+u$Hc
[A\A]A^]
fffff.
+S$Hc
AUATSH
[A\A]]
fffff.
AUATSH
[A\A]]
[A\A]]
AUATI
+s$Ic
[A\A]]
AVAUATI
A+D$$H
[A\A]A^A_]
A\A]A^A_]
E+D$$Mc
[A\A]]
[A\A]]
AWAVAUATSH
+s$Hc
([A\A]A^A_]
([A\A]A^A_]
A\A]A^A_]
+S$Hc
+S$Hc
AVAUI
A\A]A^]
[A\A]A^]
[A\A]A^]
AWAVI
AUATSH
E+F$Mc
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
[A\A]A^A_]
AVAUATSH
G A9G
8[A\A]A^A_]
8[A\A]A^A_]
A+W$Hc
[A\A]A^A_]
E+G$Mc
E+O$Mc
A+G$H
[A\A]A^A_]
E+O$Mc
E+G$Mc
E+G$Mc
A+G$Lc
E+G$Mc
E+O$Mc
A+G$Lc
AUATI
+S$Hc
[A\A]]
$+s$Hc
AWAVI
AUATA
[A\A]A^A_]
A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVH
AUATI
[A\A]A^A_]
A+L$$Hc
fffff.
AWAVE
[A\A]A^A_]
+S$Hc
+S$Hc
"t%L;}
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
fffff.
c [A\]
c [A\]
AUATS
[A\A]]
A+|$$Hc
A;t$ A
[A\A]]
fffff.
AVAUI
A\A]A^]
[A\A]A^]
[A\A]A^]
fffff.
AVAUA
+S$Hc
A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
+W$Hc
+S$Hc
AVAUATI
7+W$Hc
A+G$H
A;w A
7A+W$Hc
A+G$H
A;w A
A+G$H
A;w A
7A+W$Hc
A+G$H
A;w A
([A\A]A^A_]
[A\A]A^A_]
7A+W$Hc
A+G$H
A;w A
A+G$H
A;w A
A;\$ A
9w UH
fffff.
fffff.
AWAVAUATSH
[A\A]A^A_]
+K$Lc
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATSH
H[A\A]A^A_]
7A+W$Hc
A+G$H
A;w A
A+G$H
A;w A
[A\A]A^A_]
7A+W$Hc
A+G$H
A;w A
A+G$H
A;w A
7A+W$Hc
A+G$H
A;w A
A+G$H
A;w A
GHHcv
4$A\]
[A\A]A^]
+C$9C
+C$;C
AVAUI
[A\A]A^]
AVAUI
[A\A]A^]
fffff.
fffff.
AUATSH
[A\A]]
[A\A]]
[A\A]]
[A\A]]
AWAVAUI
[A\A]A^A_]
[A\A]]
	[A\]
[A\A]]
[A\A]]
[A\A]]
fffff.
fffff.
[A\A]]
fffff.
[A\A]]
fffff.
([A\A]]
AVAUATI
[A\A]A^]
A\A]A^]
AVAUATA
[A\A]A^]
fffff.
AWAVAUI
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
 [A\]
A\A]A^]
A\A]A^]
[A\A]A^]
fffff.
fffff.
fffff.
AUATI
[A\A]]
fffff.
AWAVAUATSH
[A\A]A^A_]
fffff.
AVAUATE1
x[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
fffff.
AWAVAUATSH
[A\A]A^A_]
tPHcE
x[A\A]A^A_]
[A\A]A^A_]
fffff.
fffff.
AWAVAUI
([A\A]A^A_]
H97t%H
AWAVAUATSH
[A\A]A^A_]
AVAUI
[A\A]A^A_]
[A\A]A^A_]
AWAVL
AUATSH
[A\A]A^A_]
AWAVAUATI
CSP1H
E;t$8
+{$Hc
H[A\A]A^A_]
+{$Hc
CSP1H
A;D$h}^I
A;D$h|
+{$Hc
+{$Hc
AVAUI
A\A]A^]
AVAUATS
A\A]A^]
fffff.
AVAUATSD
A\A]A^]
fffff.
AWAVAUATI
[A\A]A^A_]
AUATSH
D;k8|
[A\A]]
AWAVI
[A\A]A^A_]
H97t%H
[A\A]A^]
t(HcO
AVAUATSH
[A\A]A^A_]
D+c$Mc
=CSP1u
E;o8|
+S$Hc
=CSP1
+S$Hc
+S$Hc
+S$Hc
Mcg8D
+S$Hc
+S$Hc
D+C$Mc
D+K$Mc
D+C$Mc
D+c$Mc
D+c$Mc
D+c$Mc
AVAUATSH
[A\A]A^A_]
D+c$Mc
=CSP1u
E;o8|
+S$Hc
=CSP1
+S$Hc
+S$Hc
+S$Hc
Mcg8D
+S$Hc
+S$Hc
D+C$Mc
D+K$Mc
D+C$Mc
D+c$Mc
D+c$Mc
D+c$Mc
AWAVAUATA
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
R@X[]
fffff.
<	wBD
AUATSH
[A\A]]
tSHcO
fffff.
[A\A]A^A_]
fffff.
dH34%(
AUATI
[A\A]]
AUATSH
[A\A]A^]
AVAUATSH
dH34%(
[A\A]A^]
AVAUAT
A\A]A^]
A\A]A^]
A\A]A^]
ffff.
ffff.
[A\A]A^A_]
AUATL
[A\A]]
fffff.
AWAVAUATSH
E9t$$
A9D$ 
8[A\A]A^A_]
AWAVI
AUATSH
8[A\A]A^A_]
[A\A]A^A_]
[A\A]]
[A\A]]
fffff.
A]A^A_]
AUATSH
[A\A]]
A\A]]
AWAVH
H[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
AWAVAUATI
E9|$$
A9D$(
([A\A]A^A_]
([A\A]A^A_]
AWAVI
AUATSH
8[A\A]A^A_]
8[A\A]A^A_]
8[A\A]A^A_]
AVAUATSH
H[A\A]A^A_]
AUATI
[A\A]]
A;\$$|
E;l$(|
[A\A]]
 [A\]
 [A\]
AWAVAUATSH
E;r }:E9
([A\A]A^A_]
AWAVAUATSH
D;x |
[A\A]A^A_]
fffff.
AUATI
[A\A]]
fffff.
AVAUI
([A\A]A^A_]
[A\A]A^]
+F$Hc
0[A\]
AWAVL
[A\A]A^A_]
[A\A]A^A_]
[A\A]]
[A\A]]
AWAVI
AUATA
H[A\A]A^A_]
H[A\A]A^A_]
AUATA
[A\A]]
fffff.
fffff.
AVAUATSH
[A\A]A^A_]
AVAUATSH
`[A\A]A^]
AWAVI
AUATSH
D;p |
[A\A]A^A_]
fffff.
AWAVI
AUATSH
D;p |
x[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
H[A\A]A^A_]
[A\A]A^A_]
h[A\A]A^A_]
[A\A]A^A_]
AWAVL
[A\A]A^A_]
fffff.
@[A\A]A^]
fffff.
AWAVL
8[A\A]A^A_]
AWAVAUATI
A9\$(
E9l$ 
[A\A]A^A_]
AUATI
[A\A]]
[A\A]]
AWAVAUI
dH3<%(
[A\A]A^A_]
fffff.
AUATE
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
AWAVAUI
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
A9\$(
E9l$ 
|$pIc
|$pIc
[A\A]]
[A\A]]
fffff.
ffffff.
H;G0t)H
k []A\
AVAUATUH
 []A\A]A^
[]A\A]A^
0[]A\
fffff.
8[]A\A]A^A_
ATUSH
[]A\A]
fffff.
ffff.
ATUSH
Ph[]A\H
fffff.
AWAVAUATU
[]A\A]A^A_
D$Hf.
L9|$ 
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
ATUSH
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
H[]A\A]A^A_
#[]A\
AWAVAUATUSH
h[]A\A]A^A_
[]A\A]A^A_
fffff.
[]A\A]A^
[]A\A]
AUATUSL
Ph[]A\H
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
L9t$0
ATUSH
[]A\A]
[]A\A]
AUATUSH
[]A\A]A^
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AUATUSH
[]A\A]A^
AWAVAUATUSH
h[]A\A]A^A_
h[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
[]A\A]A^
AWAVI
AUATUSH
h[]A\A]A^A_
h[]A\A]A^A_
AWAVI
AUATUSH
d$(I!
[]A\A]A^A_
L9t$ 
AWAVI
AUATUSH
[]A\A]A^A_
AWAVAUATUSH
h[]A\A]A^A_
h[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
AWAVAUATUSH
t$@E1
[]A\A]A^A_
fffff.
ffffff.
AVAUI
ATUSH
[]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
AWAVI
AUATI
8[]A\A]A^A_
AUATI
[]A\A]A^
[]A\A]A^
[]A\A]
@[]A\A]A^
[]A\A]
AVAUATUSH
[]A\A]A^
[]A\A]A^
[]A\A]A^
AWAVI
[]A\A]A^A_
AWAVI
AUATI
[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
AUATI
[]A\A]A^
AVAUATUH
[]A\A]A^A_
fffff.
L$Xt:
fffff.
[]A\A]
AUATUSH
[]A\A]A^H
[]A\A]A^
 []A\
fffff.
AUATI
[]A\A]A^
H;k8rBH;k@
[]A\A]A^
[]A\A]A^
AUATUH
sht#M
[]A\A]A^A_
AWAVA
[]A\A]A^A_
C0[]A\
t(H9^
Rh[]L
AUATI
\$8L9
\$8L9
]A\A]A^
[]A\A]A^
ffff.
AUATM
[]A\A]A^A_
ATUSH
<WtW<F
AWAVI
[]A\A]A^A_
AUATI
[]A\A]
AWAVAUATUH
f	T$&
|$`E1
[]A\A]A^A_
42	t$8
fffff.
L9&t3H
[]A\A]A^
[]A\A]A^
AVAUI
[]A\A]A^A_
[]A\A]
AWAVAUI
D$(E1
[]A\A]A^A_
L$pE1
AUATA
[]A\A]A^A_
AWAVA
AUATUH
L$(dH
[]A\A]A^A_
D$`E1
AWAVM
tD=CWS
([]A\A]A^A_
CT+CP9
kLD+kPD9
([]A\A]A^A_
CT+CP9
AVAUATI
kht$I
[]A\A]A^A_
fffff.
AVAUATUSH
D$ H;G
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
G +G$
ffff.
AUATUH
([]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
[]A\A]
[]A\A]
0ATUSH
[]A\I
0ATUSH
8A\A]H
L$Ht7
L$Ht7
AVAUATUH
tR[]I
A\A]A^H
[]A\A]A^
AUATUSH
[]A\A]A^
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
0AVAUATU
h[]A\A]A^A_
\$ I!
D$ I!
L$Ht7
fffff.
[]A\A]
ATUSH
ffff.
[]A\A]A^A_
D$ dH
H+D$(H=
[]A\A]A^A_
[]A\A]A^A_
ffffff.
t	I;q
[]A\A]
[]A\A]
 []A\A]A^
 []A\A]A^
AWAVAUATUSH
[]A\A]A^A_
fffff.
AVAUI
]A\A]A^
[]A\A]A^
AVAUI
]A\A]A^
[]A\A]A^
AVAUATUSH
[]A\A]A^
 []A\A]A^
 []A\A]A^
[]A\A]
[]A\A]
[]A\A]
AVAUATUH
@[]A\A]A^
ATUSH
[]A\L
[]A\A]
t$H9r
t$H;r
A\A]A^
AVAUI
[]A\A]A^A_
fffff.
AWAVAUI
x[]A\A]A^A_
x[]A\A]A^A_
fffff.
ATUSH
[]A\A]
fffff.
fffff.
AWAVAUATI
8[]A\A]A^A_
N H9O u
N0H9O0u
N8H9O8u
N@H9O@u
FHH9GH
]A\A]A^
t	L;J
AWAVI
AUATUSH
[]A\A]A^A_
fffff.
[]A\A]
fffff.
[]A\A]A^A_
`0u0H
AWAVAUATI
T$0uJI
T$ u%I
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
AVAUATUSH
t$ tnH
x[]A\A]A^A_
H;T$`
\$@E1
\$0ud
H;l$`
x[]A\A]A^A_
H9q u
AWAVAUATUSH
[]A\A]A^A_
t$`E1
t$Huw
AVAUI
ATUSH
L$@E1
X[]A\A]A^A_
AWAVAUI
L$ H)D$ H
[]A\A]A^A_
L$ H)D$ 1
L$ H)D$ H
L$ H)T$ 
AVAUATI
[]A\A]A^A_
AWAVAUI
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
T$TE1
{8I9|$8A
T$TE1
AWAVAUI
CT+CPA9
CL+CPE
D9t$4|
CL+CP
x[]A\A]A^A_
CL+CP
x[]A\A]A^A_
x[]A\A]A^A_
fffff.
AVAUATUSH
[]A\A]A^A_
AWAVI
[]A\A]A^A_
AWAVE1
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVE
AUATI
[]A\A]A^A_
D$xfA
AWAVAUATUSH
	D$lH
D$hH;C
[]A\A]A^A_
@8u;H
L$l#H
AUATUSH
[]A\A]A^A_
AUATI
D$ tLI
[]A\A]A^A_
8[]A\A]A^A_
AWAVI
AUATUSH
D$0L#`
D$0L#`
H[]A\A]A^A_
AVAUATI
[]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
AWAVI
h[]A\A]A^A_
fffff.
AVAUATI
8[]A\A]A^A_
P[]A\A]A^
P[]A\A]A^
fffff.
ffff.
H3S H
H;:t	
J(H9N(u
J H9N u
ATUSH
[]A\A]
AVAUI
ATUSL
[]A\A]A^
>[]A\H
A]A^H
AVAUI
ATUSL
>[]A\H
A]A^H
AVAUI
ATUSL
>[]A\H
A]A^H
L$Ht7
L$Xt:
ATUSH
[]A\A]
ATUSH
[]A\A]
[]A\A]
AWAVAUATUSH
T$4H9
D$ H9
H[]A\A]A^A_
AUATUH
[]A\A]
AVAUI
ATUSH
([]A\A]A^A_
AUATUSH
[]A\A]A^
AWAVI
AUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^
AWAVI
AUATI
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^
AUATUSH
[]A\A]A^
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AUATUSH
[]A\A]A^
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVI
ATUSH
[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
fffff.
fffff.
fffff.
fffff.
@[]A\
fffff.
fffff.
+[]A\
fffff.
L$xdH3
L$Ht7
fffff.
fffff.
AUATI
t$(E1
[]A\A]A^A_
fffff.
AWAVAUATUH
[]A\A]A^A_
)d$0H
)d$pD
(d$pH
)d$`D
(d$`H
H;E`r
AVAUATUH
([]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVAUA
Ej@u@
Gj@u*E
[]A\A]A^A_
AWAVAUATI
8[]A\A]A^A_
AUATUSH
< A\A]H
[]A\A]A^
AUATUH
[]A\A]
AUATUH
[]A\A]A^
fffff.
fffff.
AVAUI
[]A\A]A^
t`H9j
[]A\A]A^
AUATA
[]A\A]
[]A\A]
AWAVI
AUATUS1
[]A\A]A^A_
AWAVAUI
ATUSH
([]A\A]A^A_
\$0[]A\
AVAUI
[]A\A]
[]A\A]1
fffff.
AWAVI
[]A\A]A^A_
]Ht I
AUATUH
([]A\A]A^A_
fffff.
AVAUATI
[]A\A]A^
r/L;m
[]A\A]A^
fffff.
H9r u
fffff.
AWAVI
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
ATUSH
 []A\
ATUSH
]A\A]
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
fffff.
AUATUH
!L9(r H
[]A\A]
[]A\A]
ATUSH
fffff.
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
AWAVI
AUATUH
,'I;m
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVAUI
ATUSH
D$ L9
x[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^A_
AUATI
[]A\A]A^
AVAUI
[]A\A]A^A_
fffff.
AUATI
@[]A\A]A^
fffff.
AVAUATUSH
[]A\A]A^
[]A\A]A^
[]A\A]A^
fffff.
AWAVAUATUSH
([]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
]A\A]
AVAUATUSH
YT$@D
D$ H9D$
[]A\A]A^A_
AWAVAUA
D$ u[
[]A\A]A^A_
AUATA
X[]A\A]
AUATI
8[]A\A]
[]A\A]
AVAUATA
8[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AVAUA
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^
AVAUM
[]A\A]A^A_
AUATI
t$0E1
X[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
AWAVAUE1
[]A\A]A^A_
AWAVAUA
A8FPt
[]A\A]A^A_
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
L$pE1
 L9d$
l$8?H
D$(H9D$
A,9F,
fffff.
AVAUATI
H[]A\A]A^A_
H[]A\A]A^A_
D$ Lc
AWAVI
AUATI
uOHcK
[]A\A]A^A_
HcD$0
Y-$&4
D$09D$
.D$TA
AWAVAUATUH
H[]A\A]A^A_
H[]A\A]A^A_
H[]A\A]A^A_
AVAUATUSH
P[]A\A]A^
AWAVAUI
ATUSH
\5]w4
[]A\A]A^A_
fffff.
fffff.
AWAVAUATUSH
T$ t5
[]A\A]A^A_
H;C`r
H+D$(
AVAUATUSH
8[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
AWAVI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
L$XdH3
 []A\
AUATI
hH;1I
[]A\A]A^
[]A\A]A^
AUATI
hH;1I
[]A\A]A^
[]A\A]A^
AUATI
hH;1I
[]A\A]A^
[]A\A]A^
AUATI
[]A\A]A^
[]A\A]A^
ATUSH
[]A\A]
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
ATUSH
[]A\A]
ATUSH
[]A\A]
[]A\A]
AVAUI
ATUSL
[]A\A]A^
>[]A\H
A]A^H
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
AVAUATUSH
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
ATUSL
L$Ht7
AVAUATI
[]A\A]A^A_
AVAUATUSH
D$0H9D$
D$(H9
D$(~*H
[]A\A]A^A_
AVAUATUSH
D$0H9D$
D$(H9
D$(~*H
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
AVAUATI
\$ L9
0[]A\A]A^
AVAUI
ATUSH
[]A\A]A^
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AVAUATUSH
 []A\A]D
[]A\A]A^
AUATI
[]A\A]
fffff.
 []A\
 []A\
u LcC8D
AVAUL
o(ATI
8[]A\A]A^A_
8[]A\A]A^A_
fffff.
 []A\
 []A\
w(USH
0[]A\
0[]A\
w(USH
0[]A\
0[]A\
[]A\A]
AUATUSH
[]A\A]A^A_
[]A\A]
AUATUSH
 []A\A]A^
k8L;n
[]A\A]A^
AUATUSH
[]A\A]A^A_
AUATI
T$@H#B
h[]A\A]A^A_
[]A\A]
AUATUSH
U@H#B
8[]A\A]A^A_
AWAVI
AUATUSH
U@H#B
8[]A\A]A^A_
AUATI
T$@H#B
[]A\A]A^A_
AVAUI
ATUSH
h[]A\A]A^A_
D$(L9
w`M;}
fffff.
AWAVL
ATUSH
[]A\A]A^A_
T$hdH3
p[]A\
H[]A\A]
[]A\A]
ATUSH
[]A\A]
AWAVAUATL
[]A\A]A^A_
H9D$ 
[]A\A]
ATUSH
W@H#B
[]A\A]A^A_
W@H#B
AVAUATUSH
8[]A\A]A^A_
W@H#B
AWAVAUATUSH
X[]A\A]A^A_
D$0E1
X[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
ATUSH
[]A\A]
fffff.
AVAUI
[]A\A]A^A_
[]A\A]A^A_
AUATA
[]A\A]
[]A\A]A^
[]A\A]
AUATUSH
A9n(w
(E9f,w
[]A\A]A^A_
AVAUI
ATUSH
L+$$K
8[]A\A]A^A_
AWAVAUATUH
t$ uN
H[]A\A]A^A_
AWAVI
AUATUSH
X[]A\A]A^A_
|$8Hc
D$0E1
fffff.
AUATUSH
W-IZ3
.=O~3
[]A\A]A^
AWAVAUATU
H[]A\A]A^A_
D9h(v/H
D$0E1
[]A\A]
AWAVA
H[]A\A]A^A_
fffff.
AVAUI
D$0H9
$H;C 
D$ t	I
[]A\A]A^A_
fffff.
AVAUATUH
@P)D$
8[]A\A]A^A_
L;U L
AVAUI
ATUSH
t$$)D$<I
D$8L9
L9t$(M
w0sCH
h[]A\A]A^A_
(H;l$
AWAVAUA
|$XA)
+t$HH
D9h0~*H
T$@Hc
[]A\A]A^A_
_L+_P
|$4Kt
AL+AP)
AVAUATUSH
X[]A\A]A^A_
AVAUATUSH
X[]A\A]A^A_
E9g(v%D
E9o,I
t$8v'H
E9o,H
ATUSH
[]A\A]
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AVAUE1
[]A\A]A^A_
AVAUE1
ATUSH
[]A\A]A^A_
AWAVAUI
ATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AWAVAUA
[]A\A]A^A_
fffff.
fffff.
AWAVAUATUSH
[]A\A]A^A_A
[]A\A]A^A_
fffff.
fffff.
fffff.
AWAVAUI
([]A\A]A^A_
AVAUATI
[]A\A]A^
fffff.
fffff.
AWAVAUATUSH
8[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
ATUSH
fffff.
 []A\
AVAUATI
[]A\A]A^
fffff.
fffff.
AWAVI
([]A\A]A^A_
fffff.
AWAVAUATUH
[]A\A]A^A_
[]A\A]A^A_
ATUSL
[]A\A]A^
fffff.
fffff.
AVAUATUSH
[]A\A]A^
[]A\A]A^
fffff.
fffff.
fffff.
fffff.
fffff.
AUATI
[]A\A]
[]A\A]
[]A\A]
[]A\A]
wHUSH
L$Ht7
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
 []A\
AWAVAUI
SLt-f
8[]A\A]A^A_
8[]A\A]A^A_
8[]A\A]A^A_
0[]A\
AWAVA
P89\$
[]A\A]A^A_
AVAUA
tBH;}(
tQH;}(
ttH;}(
tbH;}(
tlH;}(
L$b@H
txH;}(
L$b I
[]A\A]A^
GHAVAUI
ATUSH
[]A\A]A^A_
_L+_P
_L+_P
fffff.
AWAVL
([]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
[]A\A]
_L+_P
fffff.
fffff.
AWAVAUATUH
wWL;e8
[]A\A]A^A_
fffff.
AWAVAUATUH
[]A\A]A^A_
[]A\A]
AWAVAUA
([]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
AWAVAUA
([]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
AWAVI
ATUSH
CT+CPH
L$P9D$4H
CL+CP9D$4
v@A9v4
F@A9F4
[]A\A]A^A_
AVAUATUH
H;}@r
[]A\A]A^A_
AWAVAUL
o(ATUSH
[]A\A]A^A_
|$0E1
[]A\A]A^A_
AVAUI
ATUSH
x	;W0
8[]A\A]A^A_H
8[]A\A]A^A_
L$Ht7
[]A\A]A^A_
AUATUH
[]A\A]
AUATUH
X[]A\A]
fffff.
([]A\A]A^A_
AVAUI
ATUSL
[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUATUSH
L$ fD
T$"fD
[]A\A]A^
AVAUATUSH
[]A\A]A^
[]A\A]A^
[]A\A]A^
AVAUATA
D$@M9
L9l$@vVH
[]A\A]A^A_
AWAVA
AUATUSH
"D;|$
[]A\A]A^A_
[]A\A]A^A_
ATUSH
([]A\A]A^A_
AWAVAUATUSH
H9D$P
L;d$ 
L;d$H
H;D$Pv
L$PH9D$P
D$pH9D$h
[]A\A]A^A_
AUATUH
H+\$8
L$HH)
x[]A\A]A^A_
fffff.
AWAVAUATUH
D$Hf.
[]A\A]A^A_
fffff.
AUATUSH
u B9t 
D$X9D$x
[]A\A]A^A_
t$0fA
AWAVAUATI
[]A\A]A^A_
[]A\A]
AVAUATUSH
H;D$(s?
[]A\A]A^A_
L$Ht7
AUATL
[]A\A]
fffff.
fffff.
[]A\A]
[]A\A]
[]A\A]
CT[]A\A]A^
cP[]A\
CL)CP
{`u~@
fffff.
[]A\A]
fffff.
AVAUE1
[]A\A]A^A_
AVAUE1
[]A\A]A^A_
AVAUATUH
[]A\A]A^
AVAUI
u$[]D
A\A]A^
A\A]A^
fffff.
fffff.
AVAUATUH
[]A\A]A^
[]A\A]A^
AVAUATUH
[]A\A]A^
[]A\A]A^
fffff.
fffff.
fffff.
AUATUH
[]A\A]
AVAUATUH
[]A\A]A^
[]A\A]A^
AVAUATUH
[]A\A]A^
[]A\A]A^
fffff.
AVAUI
{L+{P
sL+sP
[]A\A]A^
sL+sP
fffff.
fffff.
fffff.
AVAUI
[]A\A]A^A_
fffff.
AVAUATUSH
[]A\A]A^
ffff.
AVAUATI
8[]A\A]A^A_
AWAVAUATUH
H[]A\A]A^A_
ffffff.
AWAVI
AUATUH
@LD+@PD)
([]A\A]A^A_
AUATI
[]A\A]
AUATI
([]A\A]
ffffff.
AUATUH
[]A\A]
ffff.
AUATI
[]A\A]
ffff.
AVAUATUSI
BL+BP1
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
L$(L9
D$49D$0
AUATUSH
[]A\A]A^
ffff.
AVAUATUSH
]A\A]A^
[]A\A]A^
AWAVAUI
gPUSH
H[]A\A]A^A_
AWAVAUATL
HL+HP1
H[]A\A]A^A_
AWAVAUI
ATUSH
JL+JPD
HT+HPA
x[]A\A]A^A_
JL+JPD
AWAVAUATI
l$0E1
H[]A\A]A^A_
ET+EP)
HcD$ H
ET+EP)
HcD$ H
EL+EP)
HcD$ H
ET+EP)
HcD$ H
ET+EP)
HcD$,H
ET+EP)
HcD$,H
AWAVAUATUH
PhD;d$
x[]A\A]A^A_
[]A\A]
ffff.
AUATL
g USH
[]A\A]A^
AUATL
g USH
[]A\A]A^
[]A\A]A^
AVAUATI
h[]A\A]A^A_
AUATUSH
X[]A\A]A^A_
fffff.
`[]A\
`[]A\
`[]A\
AWAVAUATL
D$(9D$,
D$(9D$,
[]A\A]A^A_
AVAUATUSH
w6I;\$
[]A\A]A^
[]A\A]A^
ffff.
AVAUATUSH
w2I;\$
[]A\A]A^
[]A\A]A^
ffff.
AWAVAUATI
\$4L9
D9t$@
D;|$ 
[]A\A]A^A_
ATUSH
[]A\A]
ATUSH
Ph[]H
ATUSH
[]A\H
A]A^H
L$Xt:
ATUSH
[]A\A]
[]A\A]
L$Xt:
AUATI
[]A\A]
fffff.
fffff.
AWAVAUI
[]A\A]A^A_
M;u v
fffff.
fffff.
AWAVAUI
ATUSH
H[]A\A]A^A_
fffff.
AWAVI
AUATUH
X[]A\A]A^A_
[]A\A]
AVAUI
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^A_
AVAUATUSJ
[]A\A]A^A_
\$pdH
fffff.
[]A\H
fffff.
fffff.
fffff.
fffff.
fffff.
AUATUSH
d$ t,
P[]A\A]A^
fffff.
fffff.
fffff.
AUATI
[]A\A]
[]A\A]
[]A\A]
ATUSH
fffff.
AWAVAUATUSH
([]A\A]A^A_
AUATUSH
[]A\A]A^
AWAVI
ATUSH
[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
[]A\A]
H9]`H
]A\A]A^
]A\A]A^
[]A\A]
fffff.
[]A\A]
fffff.
[]A\A]
fffff.
AVAUATUSH
]A\A]A^H
A\A]A^
C []A\A]A^
AVAUATI
 []A\A]A^
 []A\A]A^
ATUSH
AUATUSH
I9\$0t-[]A\A]A^
I9\$0u
A\A]A^H
AUATUH
([]A\A]
([]A\A]
AUATUSH
H[]A\A]
[]A\A]
fffff.
fffff.
[]A\A]
[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
[]A\A]
[]A\A]A^A_
L$Ht7
fffff.
C(+C$[
AVAUATUSH
[]A\A]A^A_
W0+W(
W0[H)
fffff.
fffff.
S0[]A\
AVAUI
S0[]A\A]A^
C$~[H
"A\A]A^
[]A\A]A^
,[]A\A]A^
fffff.
fffff.
fffff.
L$Ht7
Warning:
[]A\A]A^A_
Error: 
Assert: 
fffff.
fffff.
AUATI
[]A\A]L
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
G\H+G 
AVAUI
L;$$r
[]A\A]A^A_
fffff.
AWAVAUI
t$ M9
8[]A\A]A^A_
ATUSH
D$HdH3
P[]A\
fffff.
fffff.
fffff.
<0t6H
uJ[]A\
+[]A\
-[]A\
AVAUATUSH
[]A\A]A^
w+H;oXwmH
AVAUI
[]A\A]A^
w+H;oXwmH
AVAUATUH
8[]A\A]A^A_
H;]Xv
`[]A\
`[]A\
\$@H)
E u?H
D$ H)
P[]A\
ffffff.
AWAVAUATUH
H[]A\A]A^A_
H[]A\A]A^A_
AVAUL
o`ATI
([]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
fffff.
$[]A\
$[]A\
AWAVE1
X[]A\A]A^A_
AWAVAUATUSH
<,%tQH
x[]A\A]A^A_
H+D$(H=
H+D$(H=
H+D$(H=
I;NXv
H+D$(H=
H+D$(H=
H+D$(H=
I;^Xv
ffff.
D$(tJH
h[]A\A]A^A_
fffff.
AWAVAUATUS1
T$`H)
[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
fffff.
fffff.
AVAUATI
[]A\A]A^A_
fffff.
<.tFH
[]A\A]
0fA9<
2fA9<
fffff.
0fA9<
2fA9<
AUATUH
[]A\A]
[]A\A]
ATUSH
[]A\A]
AUATUH
[]A\A]
AWAVAUI
([]A\A]A^A_
AUATUH
[]A\A]
[]A\A]
AWAVI
[]A\A]A^A_
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
AVAUATI
D$(dH3
8[]A\A]A^A_
AWAVAUI
ATUSH
[]A\A]A^A_
[]A\A]A^A_
fffff.
AVAUI
[]A\A]A^
8A\A]H
AUATI
[]A\A]A^
8A\A]H
[]A\A]
[]A\A]
fffff.
AVAUI
[]A\A]A^
8A\A]H
AVAUATL
[]A\A]A^
8A\A]H
AWAVI
AUATUH
([]A\A]A^A_
([]A\A]A^A_
AWAVAUI
([]A\A]A^A_
([]A\A]A^A_
AVAUI
A\A]A^
A\A]A^
A\A]A^
fffff.
AUATUSH
[]A\A]A^
AUATUSH
[]A\A]A^
[]A\A]A^A_
dH3<%(
 []A\
fffff.
AUATUH
[]A\A]
[]A\A]
AUATI
[]A\A]
[]A\A]
[]A\A]
AVAUI
8[]A\A]A^A_
[]A\A]
AUATI
[]A\A]
[]A\A]
fffff.
fffff.
[]A\A]
 []A\
AUATUSH
@[]A\A]A^
AUATUSH
@[]A\A]A^
AUATUSH
[]A\A]
[]A\A]
fffff.
fffff.
AWAVI
AUATI
,<L;k
[]A\A]A^A_
dH3<%(
 []A\
fffff.
AUATUSH
.tPM)
[]A\A]A^A_
fffff.
[]A\A]A^
fffff.
fffff.
ATUSH
fffff.
AVAUATA
]A\A]A^
[]A\A]A^
[]A\A]A^
ffff.
[]A\A]
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]
[]A\A]
AVAUL
o ATUSH
[]A\A]A^
fffff.
fffff.
[]A\A]
[]A\A]
AUATUSt|I
A\A]A^
A\A]A^
[]A\A]
[]A\A]
fffff.
AVAUATU
[]A\A]A^A_
[]A\A]A^A_
ffff.
C$;C }
g(USH
AUATA
[]A\A]
[]A\A]
AWAVAUATA
[]A\A]A^A_
AVAUATU
[]A\A]A^A_
AWAVAUATA
[]A\A]A^A_
fffff.
fffff.
fffff.
[]A\A]
[]A\A]
[]A\A]
[]A\A]
fffff.
[]A\A]
[]A\L)
[]A\A]A^
AUATUH
4$tlH
[]A\A]A^
AVAUATUH
[]A\A]A^
[]A\A]A^
fffff.
<$[]A\
[]A\A]
AUATI
[]A\A]
fffff.
mAVAUA
ATUSH
[]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
c0[]A\
fffff.
AUATI
[]A\A]A^
[]A\A]A^
fffff.
fffff.
ATUSH
[]A\A]
t?H9p0u
fffff.
AVAUATI
D$8UH)
T$ Di
[]A\A]A^A_
[]A\A]A^A_
JPH9JX
fffff.
AUATUS
]A\A]A^
[]A\A]A^
fffff.
kx[]A\
fffff.
fffff.
AVAUATI
[]A\A]A^
ATUSH
fffff.
fffff.
AWAVA
AUATI
[]A\A]A^A_
AVAUATUH
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
|$HL;t$
|$HA9
t$@H;t$
[]A\A]A^A_
;D$Ls1H
t$(A9
t$@H;t$0t
AUATL
[]A\A]A^
AUATL
[]A\A]
AUATI
8A\A]H
[]A\A]A^
AVAUATI
[]A\A]A^
AVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
ATUSH
`[]A\A]A^
fffff.
fffff.
ffffff.
fffff.
[]A\A]A^
fffff.
ATUSH
[]A\A]
[]A\A]
[]A\A]A^1
[]A\A]A^
AVAUI
 []A\A]A^
fffff.
ATUSH
\$p[H
ATUSH
\$x[H
([]A\A]
AUATUH
EPH9CPt-E1
[]A\A]
fffff.
0[]A\A]A^
0[]A\A]A^
0[]A\A]A^
0[]A\A]A^
[]A\A]
 []A\
AWAVAUATUSH
[]A\A]A^A_
J4+J,H
J0+J(H
P4+P,
P0+P(
[]A\A]
AVAUM
H[]A\A]A^A_
fffff.
AWAVAUATI
X[]A\A]A^A_
AWAVAUATI
X[]A\A]A^A_
H[]A\A]A^A_
l$@thA
h[]A\A]A^A_
fffff.
AWAVAUATUH
[]A\A]A^A_
D$4E1
AUATUH
8[]A\A]
AUATI
([]A\A]
[]A\A]A^A_
fffff.
AWAVAUATUSH
G@|	D
X[]A\A]A^A_
X[]A\A]A^A_
fffff.
AVAUATUH
H[]A\A]A^A_
AUATUH
[]A\A]A^A_
fffff.
[]A\A]A^A_
H[]A\A]A^A_
H[]A\A]A^A_
AWAVI
	T$8H
H[]A\A]A^A_
ATUSH
d$8wS
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATA
h[]A\A]A^A_
ATUSH
0[]A\
ATUSH
0[]A\
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
h[]A\A]A^A_
AWAVAUATUSH
D$PL9
M;t$ 
L$0E)
[]A\A]A^A_
H+D$8H
C,[]A\
AUATUH
[]A\A]
AUATUH
[]A\A]
AUATUH
[]A\A]
AUATUH
[]A\A]
AUATUH
[]A\A]
AUATUH
[]A\A]
fffff.
([]A\A]
AUATI
T$4uTH
H[]A\A]
[]A\A]
([]A\A]
([]A\A]
[]A\A]
AVAUI
P[]A\A]A^
fffff.
0[]A\
fffff.
AVAUATI
YT$0L
D$ H;
[]A\A]A^A_
T$ H;
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AUATUSH
T$8+D$4+T$0E
L$<+L$4
L$8+L$0
[]A\A]A^A_
D$<+D$4
D$8+D$0E
P4+P,
E4A+E,L
E0A+E(
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AWAVM
[]A\A]A^A_
AVAUI
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
L;4$u
fffff.
[]A\A]
[]A\A]
[]A\A]
 []A\
 []A\
AUATUSH
 []A\A]A^
AVAUATUSH
D$XH9
H;D$XH
T$0E)
[]A\A]A^A_
AUATUSH
8[]A\A]
fffff.
AVAUATL
[]A\A]A^A_
AUATUH
0[]A\A]A^
AVAUATUSH
D$$E9
D;2s>A
x[]A\A]A^A_
x[]A\A]A^A_
AWAVAUATUH
H[]A\A]A^A_
AWAVI
AUATUH
X[]A\A]A^A_
fffff.
AWAVI
AUATI
D9(~oH
D$3A;F8r
D$CA;F<
[]A\A]A^A_
L$,;L$$~%
F A+F
A+V,D
A+F(D
D$SA;F8
A+F(D9
A+F,;
AVAUATE1
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AWAVAUATUH
H[]A\A]A^A_
AWAVAUATUH
D$$x|D9t$(|u
P0D;|$`
[]A\A]A^A_
L;<$v
AWAVI
[]A\A]A^A_
P(D9u4w
AWAVAUATUSH
|$ D1
d$(D1
Y-i;/
[]A\A]A^A_
AUATUH
|$dD;|$l
+T$TL
\$`;\$h
Y%K4/
P(9\$h
D9|$l
[]A\A]A^A_
fffff.
AWAVI
AUATI
*T$0A
D$!*D$1*L$2u
[]A\A]A^A_
AWAVI
t"HcE0
[]A\A]A^A_
D$T;D$\
+T$DH
\$P;\$X
+L$@H
P(9\$X
AWAVI
[]A\A]A^A_
ATUSH
[]A\A]A^A_
D$d;D$l
+T$TL
\$`;\$h
+L$PH
P(9\$h
ATUSH
[]A\A]A^A_
D$4;D$<H
+T$$H
t$0D9t$8
+L$ H
R(D9t$8
fffff.
AWAVAUATI
[]A\A]A^A_
AUATUH
[]A\A]A^A_
D$4;D$<
+T$$L
|$0D;|$8
+L$ L
s0Hct
P(D9|$8
fffff.
fffff.
ATUSH
[]A\A]
AVAUATI
wQL;k 
8[]A\A]A^A_
AWAVAUI
"L;)t#H
8[]A\A]A^A_
L;k wfJ
8[]A\A]A^A_
AWAVAUATUSH
w)u&H
8[]A\A]A^A_
8[]A\A]A^A_
8[]A\A]A^A_
AVAUATUSH
D$PE1
h[]A\A]A^A_
[]A\A]A^
[]A\A]
fffff.
AUATA
[]A\A]
[]A\A]
AWAVAUI
h[]A\A]A^A_
2@81u
AWAVI
AUATUSH
^|$PE
|$lt)1
d$P+\$
|$TD)
t$l	\$0L
L;d$(
L;|$H
[]A\A]A^A_
\$TD)
|$(A)
fffff.
AVAUATUSH
L$ dH
A9o<w
dH34%(
[]A\A]A^A_
D$(D;d$
w(tTH
ffff.
fffff.
AUATI
[]A\A]
[]A\A]
AUATI
}p[]A\A]
[]A\A]
[]A\A]
AUATUSH
[]A\A]
[]A\A]
AUATUH
[]A\A]A^A_
[]A\A]
[]A\A]
fffff.
ATUSH
[]A\A]
[]A\A]
ATUSH
[]A\A]
[]A\A]
fffff.
fffff.
fffff.
AVAUATUSH
[]A\A]A^A_
H+,$H
fffff.
AUATUH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
fffff.
AWAVAUATUSH
x[]A\A]A^A_
x[]A\A]A^A_
x[]A\A]A^A_
fffff.
fffff.
fffff.
AVAUI
ATUSH
P[]A\A]A^
P[]A\A]A^
AUATUSH
[]A\A]
[]A\A]
AUATUSH
[]A\A]
[]A\A]
AVAUATUSH
@[]A\A]A^
@[]A\A]A^
[]A\A]
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
AVAUATUH
[]A\A]A^A_
.D$ {"H
ATUSH
[]A\A]
ATUSH
[]A\A]
AWAVAUATUSH
L;$$u
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AUATUSH
([]A\A]A^A_
ffff.
ffffff.
P[]A\
)t$@H
(t$@H
ffff.
AVAUATA
[]A\A]A^
[]A\A]
fffff.
AUATUH
H;Eps5H
[]A\A]
[]A\A]
 []A\
 []A\
fffff.
[]A\A]H
AVAUI
ATUSH
 []A\A]A^
H;k`v
fffff.
ATUSH
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVAUATA
[]A\A]A^A_
fffff.
AVAUI
ATUSH
d$,fE
8[]A\A]A^A_
8[]A\A]A^A_
AUATUH
d$,E1
X[]A\A]A^A_
X[]A\A]A^A_
AUATI
[]A\A]
fffff.
;tC~)
AVAUATU
8[]A\A]A^A_
fffff.
AWAVAUA
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVAUI
[]A\A]A^A_
t$DE1
D|$hH
t$xH9
l$xL;4$u
D$H9D$D
AWAVAUATUS
[]A\A]A^A_
fffff.
K4[]A\
fffff.
AVAUATA
8[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
DD$PH
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
H9D$ 
T$,E1
D;d$,
H9D$ 
|$hE1
D;d$,
|$hE1
fffff.
AVAUI
[]A\A]A^
AUATI
[]A\A]
[]A\A]
[]A\A]
AUATUSH
[]A\A]
fffff.
AVAUATUH
[]A\A]A^A_
[]A\A]
(5R.o
(\$Pt
o5/k.
(D$Pt
o5/j.
(T$@t
(T$ D
)C0[]A\
fffff.
)K []A\
@[]A\
)T$0D
(\$ D
(T$0D
fffff.
fffff.
AVAUATUSH
t$ H)F(1
D$ fE
8[]A\A]A^A_
H;G(w>
G`H9Gpt
W`H9Wht
[]A\A]
[]A\A]
ud[]L
G(t?I
fffff.
AWAVA
[]A\A]A^A_
[]A\A]A^A_
AUATI
[]A\A]
[]A\A]
fffff.
ATUSH
[]A\A]
[]A\A]
fffff.
AUATUSH
[]A\A]A^A_
fffff.
AVAUATI
[]A\A]A^A_
wPt	H
[]A\A]A^
AUATUSH
[]A\A]
F H3N(
U I#B
ffffff.
fffff.
[]A\A]
fffff.
[]A\A]
AVAUI
I;D$P
l$0I9
A;\$Xr>
h[]A\A]A^A_
T$@L;z
~(AUA
OHt<H
M)nHA;^Xs
([]A\A]A^A_
+HHA9
+HHA9
wPt	H
[]A\A]A^
AWAVAUATUH
[]A\A]A^A_
AVAUATUH
L;g8whI
([]A\A]A^A_
AWAVAUI
I)m0H
[]A\A]A^A_
[]A\A]A^A_
fffff.
fffff.
fffff.
fffff.
AWAVA
[]A\A]A^A_
[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
AWAVAUATI
C L#p
[]A\A]A^A_
H9D$(
AUATUSH
8[]A\A]A^A_
L;H u
<$H;x(u
8[]A\A]A^A_
AUATUSH
[]A\A]
T$0twH
AUATI
[]A\A]A^A_
AVAUATUSH
D$0I9
H)T$@H
D$@H9D$
D$XL9
D$XL9
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
D$ f.
fffff.
AUATUSL
[]A\A]I
AUATUSL
[]A\H
A]A^H
AUATI
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
|$HL3L$PD
D$DD3D$@H
L9|$ 
[]A\A]A^A_
ATUSH
H;1thH
H;2tHH
CH9CXs
S(tEM
fffff.
u*AUATUSH
[]A\A]
eHD;`0w
D$,A;E@
0H93t,H;kPt2H
fffff.
AWAVAUATUH
VHA;U@
L$HA;M<
u`D9vHu	E
ZL)ZHH
EXD;t$(r
X[]A\A]A^A_
D$8E1
D$8E1
AWAVAUATU
x@J)|
L9kXL
GH9GX
[]A\A]A^A_
GH9GX
:M9>u
[]A\A]A^A_
fffff.
fffff.
t>9u@u
AVAUATI
D$ ;h
l$@;(u
[]A\A]A^A_
[]A\A]A^A_
fffff.
[]A\A]
[]A\A]A^
 []A\
 []A\
ATUSH
$@vUH
[]A\A]A^A_
fffff.
ATUSH
\|$$A
([]A\A]
AVAUATI
[]A\A]A^A_
H9t$Ht
AWAVAUI
D$ H9D$
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
fffff.
fffff.
AVAUATUH
[]A\A]A^A_
[]A\A]A^A_
fffff.
AVAUATUH
[]A\A]A^
AUATI
I9\$0v9I
I9\$0A
[]A\A]
ffff.
P[]A\
p[]A\
8[]A\A]
8[]A\A]
AUATI
[]A\A]A^A_
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
D$H9D$X
D$H9D$X
AWAVAUI
ATUSH
[]A\A]A^A_
fffff.
AWAVAUI
ATUSH
H[]A\A]A^A_
AWAVA
AUATI
D$T9D$P
[]A\A]A^A_
fffff.
AWAVE
[]A\A]A^A_
D$@H;
AWAVAUI
[]A\A]A^A_
AWAVA
D$/tV
[]A\A]A^A_
AWAVAUATI
X[]A\A]A^A_
t.9l$ I
9l$$u
.D$0A
.D$4w
[]A\A]A^A_
[]A\A]A^A_
 []A\
AVAUATUS1
[]A\A]A^A_
AUATI
D;l$prpI
[]A\A]A^A_
fffff.
AVAUATUSH
H;t$ H
[]A\A]A^A_
AWAVAUATUSH
;4(t(H
[]A\A]A^A_
[]A\A]
AUATI
kXtKL
[]A\A]
AWAVAUATI
[]A\A]A^A_
D$(E1
AUATI
[]A\A]A^A_
D$0E1
@[]A\
AVAUI
fHtRf
 []A\A]A^
AVAUATUSH
[]A\A]A^A_
AUATUH
}^H;1I
[]A\A]
I;4$u
[]A\A]
AUATUH
[]A\A]
wCz{uy
[]A\A]
AUATA
h[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AWAVI
8[]A\A]A^A_
AVAUATUSH
 []A\A]D
[]A\A]A^
AWAVAUI
[]A\A]A^A_
AVAUATUH
 []A\A]A^
AUATUS
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
AVAUATUSH
[]A\A]A^
AUATI
\$ u'
8[]A\A]A^A_
AUATUH
([]A\A]
ATUSH
H[]A\A]
D$L9D$X
[]A\A]A^A_
AUATI
[]A\A]A^A_
AWAVI
[]A\A]A^A_
AWAVM
AUATA
l$pE9
t$xH;t$@H
[]A\A]A^A_
D$T9D$x
[]A\A]A^A_
AWAVM
AUATUSH
H[]A\A]A^A_
AWAVI
[]A\A]A^A_
AWAVAUATA
l$PE9
t$XH;t$0H
[]A\A]A^A_
AUATI
[]A\A]
fffff.
t+H9r
fffff.
AWAVI
AUATI
t0H9X
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]
AWAVAUI
ATUSH
[]A\A]A^A_
AWAVAUATUSH
H;o sFH
[]A\A]A^A_
AWAVAUATUSH
L;oHsVI
[]A\A]A^A_
[]A\A]A^A_
fffff.
fffff.
AVAUATI
[]A\A]A^A_
AWAVAUI
8[]A\A]A^A_
AVAUATI
[]A\A]A^A_
fffff.
ATUSH
AWAVAUATA
[]A\A]A^A_
[]A\A]A^A_
fffff.
AUATUSH
8[]A\A]A^A_
fffff.
zOuMH
AWAVAUATUSH
([]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
t%;W(w%H
fffff.
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
I;oHH
M;ghI
8[]A\A]A^A_
H;1u]H
AWAVAUATI
D$ H9D$
49t,J
[]A\A]A^A_
fffff.
AUATI
I;\$xE
[]A\A]A^A_
t$pE1
D$xfD
t$pE1
D$xfD
AVAUE
XT$XH
[]A\A]A^A_
fffff.
AVAUI
t$@fD
X[]A\A]A^A_
X[]A\A]A^A_
t$@fD
|$4fD
GhAVI
AUATUH
h[]A\A]A^A_
AVAUATI
[]A\A]A^A_
D$ H9
D$LE1
D;l$$
\d$(A
t$DfD
D$LE1
D;l$$
Xl$(A
h[]A\A]A^A_
|$8E1
tK~)A
[]A\A]
AVAUATL
g@USH
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
fffff.
AVAUATL
8A\A]H
AVAUATUSH
D$0I9
8[]A\A]A^A_
[]A\A]A^
[]A\A]
[]A\A]
zQuOH
ffff.
YL$0D
YL$0D
YL$0D
ffff.
fffff.
AWAVAUATA
[]A\A]A^A_
fffff.
AUATUSH
[]A\A]
fffff.
AWAVAUATA
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATA
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVI
AUATUS
8[]A\A]A^A_
fffff.
[]A\A]
AVAUATU1
[]A\A]A^A_
ATUSH
~"f9~ 
AUATA
[]A\A]
AUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVI
AUATI
([]A\A]A^A_
([]A\A]A^A_
fffff.
AWAVAUI
H[]A\A]A^A_
El$(L
AWAVAUATI
H[]A\A]A^A_
El$(L
AWAVI
ATUSH
D9l$0
D9l$0
t$(9p
D9l$(
H9D$Pt/H
x[]A\A]A^A_
ATUSH
AVAUATUSH
8[]A\A]A^A_
AUATUH
[]A\A]A^
D$ slI
0[]A\A]A^
0[]A\A]A^
AUATA
8[]A\A]A^A_
D$ suN
8[]A\A]D
8[]A\A]A^A_
AWAVAUATUSL
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
[]A\A
AUATUSH
H[]A\A]A^A_
fffff.
AWAVI
AUATUSH
l$<;l$
\$8D)
[]A\A]A^A_
D$@;D$8L
;D$LI
[]A\A]A^A_
AWAVAUI
ATUSH
[]A\A]A^A_
fffff.
AWAVAUI
ATUSH
.5)G)
h[]A\A]A^A_
)\$PH
(\$PD
AVAUATA
[]A\A]A^
ATUSH
[]A\A]A^A_
ATUSH
AWAVAUATA
[]A\A]A^A_
|$bf%
D$\s+M)
|$@f.
D$`fD
AWAVAUATUSH
8[]A\A]A^A_
AWAVI
AUATUSH
L$@E1
L$@E1
v(9p(
@"f9B 
h[]A\A]A^A_
AVAUATI
[]A\A]A^
[]A\A]A^
AVAUATUH
[]A\A]A^
P[]A\A]A^
[]A\A]A^
Y%Q@*
AVAUATUSH
H[]A\A]A^A_
fffff.
AVAUATUSH
[]A\A]A^
H9kxJ
H9kPw
AVAUATUSH
X[]A\A]A^A_
4+L;d$
L+L$ L)
AUATUSH
D$ I;
D$ I;
[]A\A]A^A_
t$0tFD
DD$ E
DD$@E
AWAVI
AUATE1
[]A\A]A^A_
AWAVAUATUSH
D$ H9D$
[]A\A]A^A_
AUATU
[]A\A]
[]A\A]
ATUSH
ATUSH
AWAVAUA
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AUATUH
[]A\A]
AUATUH
[]A\A]
AWAVI
AUATI
[]A\A]A^A_
ATUSH
*]A\H
AVAUATUSH
[]A\A]A^A_
AWAVI
AUATUH
D$ H9D$
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
D$(H+D$
D$@H9D$(H
H;D$(t
D$8H9
D$(H+D$
{ t.H
L9|$ L
D$(H+T$
H+D$ L
D$8~aH
[]A\A]A^A_
AVAUATUSH
D$(H+D$
D$HH9D$(H
H;D$(t
D$@H9
D$(H+D$
$0L9|$ 
D$(H+D$ A
[]A\A]A^A_
AVAUATUSH
D$ H+D$
D$@H9D$ H
H;D$ t
D$8H9
D$ H+D$
C tKH
D$ H+D$
[]A\A]A^A_
GpAUATUH
[]A\A]A^
fffff.
w`AUL
oxATUSH
[]A\A]A^A_
G`AVAUATL
gxUSH
8[]A\A]A^A_
t$"E1
AWAVL
w`AUL
oxATA
[]A\A]A^A_
AWAVL
w`AUL
oxATA
[]A\A]A^A_
w`AUL
oxATA
D$ H9
L9>tM1
([]A\A]A^A_
([]A\A]A^A_
w`AUL
oxATA
L9>tJ1
[]A\A]A^A_
[]A\A]A^A_
AWAVL
w`AUL
oxATA
[]A\A]A^A_
AWAVL
w`AUL
oxATA
([]A\A]A^A_
AWAVL
w`AUL
oxATA
([]A\A]A^A_
AWAVL
w`AUL
oxATA
([]A\A]A^A_
AVAUL
oxATA
L9>tL1
8[]A\A]A^A_
8[]A\A]A^A_
ffffff.
ffffff.
ffff.
AWAVA
h[]A\A]A^A_
ffffff.
AVAUE1
([]A\A]A^A_
AWAVAUI
ATUSH
x[]A\A]A^A_
fffff.
AUATUSH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
ffffff.
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
fffff.
@[]A\
fffff.
fffff.
AWAVAUI
ATUSH
D$8H)
[]A\A]A^A_
tf[]A\
x@t(H
t$[]A\
t&[]A\
AVAUATI
[]A\A]A^
 []A\
AUATA
[]A\A]
fffff.
AWAVAUI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^
fffff.
AVAUATUSH
[]A\A]A^A_
[]A\A]A^L
AWAVI
AUATUSH
[]A\A]A^A_
AWAVAUI
([]A\A]A^A_
fffff.
@[]A\
fffff.
AWAVI
[]A\A]A^A_
AUATA
[]A\A]A^A_
AWAVE
([]A\A]A^A_
fffff.
fffff.
[]A\A
[]A\A]
AVAUATUSH
[]A\A]A^A_
AUATUH
[]A\A]A^A_
AWAVI
AUATI
[]A\A]A^A_
[]A\A]
fffff.
[]A\A]A^
AUATUSH
h[]A\A]
h[]A\A]
AVAUATD
[]A\A]A^A_
[]A\A]A^A_
([]A\A]A^A_
fffff.
AUATUH
[]A\A]
AWAVAUATI
.Cpzgue
.KxzYuW
.StzKuI
.[|z=u;
.D$ z4
.L$(z'u%
.T$$z
.\$,z
[]A\A]A^A_
AUATUSH
[]A\A]A^
[]A\A]A^
fffff.
fffff.
fffff.
fffff.
[]A\A]
ATUSH
h[]A\A]A^A_
h[]A\A]A^A_
AUATUSH
h[]A\A]A^A_
AUATUH
h[]A\A]A^A_
AUATUSH
h[]A\A]A^A_
h[]A\A]A^A_
 []A\
AWAVI
[]A\A]A^A_
L$lfD
|$(E1
t$&fD
8AUATI
[]A\A]A^A_
T$HE9
T$LE9
T$lD9
L$tD8
fffff.
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
8[]A\A]A^A_
ffff.
[]A\A]A^A_
AUATI
A\A]A^
 []A\A]A^
AWAVAUATUSH
[]A\A]A^A_
L;g@s7I
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
ATUSH
[]A\A]
fffff.
fffff.
fffff.
AWAVI
AUATI
H[]A\A]A^A_
fffff.
AWAVAUATUSH
([]A\A]A^A_
AVAUATI
([]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
L$0E1
@	9D$,
DDS t$1
=DXT5
=DXT3
=DXT1
AUATUH
[]A\A]
[]A\A]
[]A\A]A^A_
AWAVM
AUATI
[]A\A]A^A_
fffff.
[]A\A]
ffffff.
AUATI
[]A\A]
fffff.
AUATUH
[]A\A]
[]A\A]
AUATUH
[]A\A]1
[]A\A]A^
ATUSH
[]A\A]A^
[]A\A]A^
AUATUSH
[]A\A]A^A_
C8t~H
AWAVAUATUH
[]A\A]A^A_
AUATUH
[]A\A]
[]A\A]
AWAVAUATUH
[]A\A]A^A_
H[]A\A]A^A_
[]A\A]A^A_
fffff.
H#S@H
AVAUI
g(~_I
[]A\A]A^A_
H#S@H
AUATUH
fffff.
AVAUATUSH
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
8[]A\A]A^A_
D$'u/
fffff.
AVAUATUSH
[]A\A]A^
AUATUH
[]A\A]
[]A\A]
AUATUSH
[]A\A]
AUATUSH
[]A\A]A^A_
AVAUI
A\A]L
[]A\A]1
AUATUSH
[]A\A]A^A_
AUATE1
[]A\A]A^A_
AUATI
[]A\A]
[]A\A]
AUATUH
[]A\A]
[]A\A]
AUATUH
[]A\A]
[]A\A]
([]A\A]A^A_
[]A\A]A^A_
C([]A\
wPAUATM
H+l$`H;k@L
C8r`H;kH
([]A\A]A^A_
AUATM
H;k@L
C8s/H
 []A\A]A^
H;kHv
AWAVAUI
[]A\A]A^A_
[]A\A]A^A_
C t`1
C0t+H
[]A\A]A^
[]A\A]
AVAUATUSH
\$(dH3
8[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
l$@u>
fffff.
AVAUATU1
[]A\A]A^A_
G<uoA
AUATUH
[]A\A]
[]A\A]
AVAUATI
([]A\A]A^A_
fA;D$
AUATUH
[]A\A]
[]A\A]
E`H9C`u
H#EhH#ShH9
AUATUH
(HcG`H
$HcGdH
[]A\A]
AUATL
[]A\A]
[]A\A]
[]A\A]
[]A\A]
AWAVAUI
[]A\A]A^A_
[]A\A]A^A_
fffff.
[]A\A]
[]A\A]
E0H9C0tA1
E0H9C0tA1
AUATI
[]A\A]
[]A\A]
AWAVAUATI
[]A\A]A^A_
T$>f;U>u
U;A8T$;
U8A;T$8
f%Ayf
([]A\
fffff.
fffff.
[]A\A]A^
fA;D$
fA;D$
fA;D$
fA;D$
fA;D$
fffff.
AWAVAUATUH
h[]A\A]A^A_
H#J8I#G8H9
G<f9B<
D$ f%
A0I9A0
t$(t(H
`H9z`
H#rhI#OhH9
AWAVAUATUSH
W tGH
dv$H9T$
h[]A\A]A^A_
H#r8H#A8H9
A<f9B<
A0I9B0
AWAVI
AUATI
\$(u*A
[]A\A]A^A_
I#W8I#D$8H9
D$<fA9G<
H#Q8I#@8H9
@<f9A<u
t$0H9
AVAUATUSH
H9T$0
h[]A\A]A^A_
D$(tUH
4$tyK
AVAUATUH
[]A\A]A^A_
x[]A\A]A^A_
L9|$0
D$@t>H
t	[]D
F0H9G0u
AWAVAUATUSH
x[]A\A]A^A_
x[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
AWAVAUATUSH
h[]A\A]A^A_
h[]A\A]A^A_
fffff.
fffff.
fffff.
AVAUI
[]A\A]A^A_
(L;jPt
[]A\A]
fffff.
fffff.
AVAUATA
8[]A\A]A^A_
AUATUH
8[]A\A]A^A_
fffff.
 []A\
AUATI
$A\A]A^
z(u&H
AVAUATUSH
[]A\A]A^A_
[]A\A]A^
AUATUSH
[]A\A]
tKH;D$
x	HcI
AUATUH
[]A\A]
[]A\A]
AVAUATI
[]A\A]A^
ATUSH
AVAUATI
U@t8H
[]A\A]A^
AUATUH
[]A\A]A^
[]A\A]A^
[]A\A]A^
AUATUH
@[]A\A]A^
[]A\A]A^
fffff.
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
cPL+`8L
AVAUATI
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
T$@H+A8H
L$vfE
fffff.
AWAVAUATUSH
[]A\A]A^A_
H;D$(s;
AVAUATUH
H[]A\A]A^A_
L$ Ik
AWAVAUA
x[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
H;{(t3
D;{@t.
H9D$ 
.T$ z
.T$ {x
AVAUI
ATUSH
[]A\I
} A]A^
AWAVAUATUH
;D$<A
[]A\A]A^A_
B$fE9
R$fA9
fffff.
AVAUATUH
[]A\A]A^
[]A\A]A^
[]A\A]A^
]A\A]A^
9kpt%H
P []D
;Cpr&
fffff.
L$BfD
D$HfD
`[]A\
AUATUSH
tsH;D$8sl
[]A\A]
H;CXr
AVAUATI
[]A\A]A^A_
fffff.
H;SXH
H;CXsA
xBHcP
x	Hcq
AWAVI
AUATUSH
tJH;D$(sC1
H;D$(s*
[]A\A]A^A_
AUATUSH
[]A\A]A^A_
tLH;\$8sE1
H;\$8s+
AWAVI
AUATUSH
[]A\A]A^A_
AVAUATL
gpUSH
[]A\A]A^
AUATUH
[]A\A]
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
AWAVI
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
AUATUSH
[]A\A]A^
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
p t*H
K tAL9
fffff.
AVAUATI
T$ H9
L$ H9
@[]A\A]A^
@[]A\A]A^
AUATUH
H[]A\A]
fffff.
fffff.
P(;T$
AWAVAUATUH
[]A\A]A^A_
AWAVAUI
x[]A\A]A^A_
L9|$0
AWAVAUATUH
[]A\A]A^A_
D9O(t
[]A\A]A^A_
[]A\A])
A\A]A^A_
AWAVI
AUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVI
AUATUSH
[]A\A]A^A_
k@[]A\
ATUSH
[]A\A]
8;t%D
8&t&H;G
8&t&H9
[]A\A]A^
>&tsE
AVAUATUS
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
tH[]A\
K(D;c(u
8&u6H
S H;S
8&t$H9
AVAUATUS
[]A\A]A^
[]A\A]A^
AVAUATUS
[]A\A]A^
[]A\A]
[]A\A]A^
:&t5H9
:&tOH9
>t#E1
{(<t.
:&t8H
AWAVI
ATUSH
[]A\A]A^A_
AWAVAUATE
HcD$P
Hc@ H9
D+t$ E
D#xfB
T#zfB
L#|fB
t#~fB
|+<fF
L+BE1
T#xfF
\#zfF
l#|fF
t#~fB
[]A\A]A^A_
L$ L9
D$xL;`
HcD$PH
tOH;G
fffff.
AWAVA
AUATA
w;L;c
[]A\A]A^A_
AVAUA
[]A\A]A^A_
[]A\A]A^A_
fffff.
fffff.
ATUSL
[]A\A]
fffff.
ATUSH
tZH;D$
[]A\A]
fffff.
AWAVI
AUATUSH
H9D$`
FD$uv
;\$Ht
D$PH9D$
d$DE1
H;D$`
|$`H9D$`
[]A\A]A^A_
AUATI
[]A\A]
[]A\A]A^A_
fffff.
fffff.
fffff.
fffff.
fffff.
t[H;]
[]A\A]A^
t]I;\$
AUATI
[]A\A]
fffff.
AVAUI
ATUSL
[]A\A]A^
 []A\
O(H;Q
H9G@r
H9C@s
p H;V
fffff.
fffff.
\$0[]A\
AUATUStBL
]A\A]A^
]A\A]A^
T$ H9
[]A\A]
AUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
ATUSH
L$<fD
P[]A\
AUATUSH
k8[]A\A]A^
AUATUH
 []A\A]A^
x3H;A
AUATUSH
[]A\A]
AUATUSH
[]A\A]A^
fffff.
AVAUI
ATUSH
x3H;A
 []A\A]A^
ATUSH
fffff.
n ATI
[]A\A]
[]A\A]
[]A\A]
S@~(H
[]A\A]
[]A\A]
H9D$PsTH
AVAUATI
L$pH9H
H9D$p
[]A\A]A^A_
H9C vMH
H+H8I
[]A\A]A^A_
[]A\A]A^A_
AWAVAUI
([]A\A]A^A_
ATUSH
P[]A\
fffff.
AUATI
x	HcH
T$8tIH
[]A\A]
fffff.
AWAVAUATI
|$rfD
D$tfD
L$vfD
T$xfD
[]A\A]A^A_
H+H8H
AUATUH
X[]A\A]
X[]A\A]
]8[]A\
AVAUATUSH
D$8H9
[]A\A]A^A_
AWAVAUATUSH
x	Hc@
X[]A\A]A^A_
X[]A\A]A^A_
fffff.
AVAUATI
[]A\A]A^
AVAUATI
[]A\A]A^
AUATI
([]A\A]
AVAUATUSL
 []A\A]A^
AWAVAUATM
[]A\A]A^A_
AWAVAUATI
8[]A\A]A^A_
H)h81
x%IcP
D$(H;A
AVAUI
ATUSH
x[]A\A]A^A_
<$H9x
x[]A\A]A^A_
x[]A\A]A^A_
AVAUATUL
[]A\A]A^A_
fffff.
AVAUATI
([]A\A]A^A_
([]A\A]A^A_
AWAVAUI
ATUSH
|$XL9
h[]A\A]A^A_
fffff.
AVAUA
H9D$@H
D$8M)
X[]A\A]A^A_
H9\$@
fffff.
AVAUI
ATUSH
|$(fA
h[]A\A]A^A_
H9D$P
AVAUATI
[]A\A]A^
fffff.
AUATUH
[]A\A]A^A_
fffff.
AWAVE1
AUATUH
L;k(w_J
H[]A\A]A^A_
AWAVAUATUH
8[]A\A]A^A_
[]A\A]A^
AWAVAUATUH
x	HcA
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUI
D$8I;G
$H+D$
D$8I;G
X[]A\A]A^A_
L;h8t
D$8H;A
AWAVAUATI
D$PH9D$X
] H;\$@~
H;D$@
[]A\A]A^A_
H+D$HH
D9l$pw
AVAUATUSL
[]A\H
A]A^H
[]A\A]A^
AWAVI
AUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
[]A\A]
[]A\A]A^A_
[]A\A]
[]A\A]
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
([]A\A]A^A_
AVAUATUSH
8[]A\A]A^A_
AUATUSH
D$(xMH
L$(t>H9
0H92u5H
X[]A\A]
L$8H9
AUATUH
8[]A\A]
AVAUI
ATUSH
wnL;o
([]A\A]A^A_
AUATI
[]A\A]
AUATI
[]A\A]
AVAUATUSJ
[]A\A]A^A_
ATUSH
fffff.
fffff.
AVAUATUSH
[]A\A]A^A_
fffff.
C,[]D
C,[]D
C([]A\A]A^
C tgH
[]A\A]A^
ffffff.
[]A\A]A^
fffff.
ATUSH
Cp[]A\
X[]A\A]A^A_
</to<\u
fffff.
AVAUATUSH
x[]A\A]A^A_
x[]A\A]A^A_
H;4$|
M;l$ 
AVAUI
ATUSH
[]A\A]A^A_
[]A\A]A^A_
AVAUATL
[]A\A]A^
AVAUI
ATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^A_
H9]Pw
[]A\A]
AUATA
[]A\A]
AWAVAUATU
X[]A\A]A^A_
X[]A\A]A^A_
L9<$L
{8sCH
fffff.
AWAVAUATUH
\$ M#u
8[]A\A]A^A_
AVAUATL
8[]A\A]A^A_
AWAVA
x[]A\A]A^A_
D$@E1
D$`E1
AVAUATUSH
D$(L9
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATL
[]A\A]A^A_
AWAVAUI
8[]A\A]A^H
AVAUATL
0[]A\A]A^
0[]A\A]A^
AVAUATUSH
X[]A\A]A^A_
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
AUATUSH
U A+U
T$ A+T$
U A+U
I;]8r
I;l$8r
L$8H;H8
L$0H;H8
L$(H;H8
L$ H;H8
x[]A\A]A^A_
AVAUI
ATUSH
([]A\A]A^A_
AUATUSH
[]A\A]A^
AUATUSH
[]A\A]A^
AWAVI
AUATUSH
[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AVAUATI
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AVAUATI
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
G []A\
G []A\
G []A\
AVAUATUSH
[]A\A]A^A_
t=USH
fffff.
ATUSH
[]A\A]
[]A\A]
fffff.
AVAUATI
[]A\A]A^A_
AUATUSH
H[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
AVAUA
G@[]A\A]A^A_
([]A\A]A^A_
([]A\A]A^H
ATUSH
 []A\
 []A\
([]A\A]
([]A\A]
AVAUATUSH
[]A\A]A^A_
fffff.
AUATUH
L$ 	\$ M
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
 []A\
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
fffff.
AUATI
[]A\A]
AWAVI
AUATUSH
[]A\A]A^A_
AWAVAUL
,7ATI
[]A\A]A^A_
	v1M)
AWAVI
([]A\A]A^A_
AWAVAUE
>ut]H
[]A\A]A^A_
[]A\A]A^A_
ffffff.
ffffff.
ffffff.
ffffff.
ffffff.
ffff.
-InfinitH
Infinity
AWAVAUI
([]A\A]A^A_
([]A\A]A^A_
AUATI
[]A\A]A^
[]A\A]A^
AVAUATI
[]A\A]A^A_
AWAVAUATI
L;mHwOJ
8[]A\A]A^A_
AWAVA
AUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
D$@+D$H
fffff.
H92t*H
AWAVI
AUATI
([]A\A]A^A_
([]A\A]A^A_
[]A\A]A^A_
AUATUH
[]A\A]H
[]A\A]
[]A\A]H
[]A\A]
[]A\A]
[]A\A]A^
AWAVI
AUATI
[]A\A]A^A_
AWAVAUATA
E9`,|
H[]A\A]A^A_
H[]A\A]A^A_
[]A\A]A^A_
	;i,H
$[]A\
AWAVI
AUATA
D;c,u
[]A\A]A^A_
AWAVI
8[]A\A]A^A_
AUATI
D9s0v
[]A\A]A^A_
AVAUI
|B9Q,}=H
;J,~%
x[]A\A]A^A_
D$8H9
x[]A\A]A^A_
AVAUATI
D$ H9D$
8[]A\A]A^A_
[]A\A]A^A_
L$ sBH
AWAVAUI
([]A\A]A^A_
[]A\A]A^A_
AUATA
*D;c,u
Cj@u'H
[]A\A]A^
[]A\A]A^
[]A\A]A^
AVAUI
)D;u,t
[]A\A]A^
D$HA\A]A^H
AWAVAUI
8[]A\A]A^A_
C([]A\
AWAVAUATA
[]A\A]A^A_
[]A\A]A^A_
D;`,H
AWAVI
[]A\A]A^A_
[]A\A]A^A_
AWAVI
AUATI
[]A\A]L
fffff.
AWAVAUATI
.A;U,
[]A\A]A^A_
]A\A]A^A_
AWAVI
;],t+H
[]A\A]A^A_
[]A\A]A^A_
A;P(t
A;X,t
[]A\A]
ATUSH
[]A\A]A^A_
fffff.
AVAUATI
\$$sJ
[]A\A]A^A_
ATUSH
[]A\A]A^A_
ATUSL
AWAVI
AUATI
([]A\A]A^A_
AVAUATI
[]A\A]A^A_
[]A\A]A^
[]A\A]
fffff.
fffff.
t ~(H
AUATUH
[]A\A]
AVAUATUSH
[]A\A]A^
t'H9P u
@8p0u
fffff.
fffff.
[]A\A]
AWAVAUATUSH
D$ L9
h[]A\A]A^A_
ATUSH
H;~8tSL
[]A\A]
[]A\A]
ATUSH
[]A\A]
AVAUATI
H[]A\A]A^A_
H[]A\A]A^A_
AVAUATUSH
t$h9r,~
h[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
|$@E1
AWAVAUI
ATUSH
.D$@r 
[]A\A]A^A_
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
>[]A\H
A]A^H
L$Ht7
fffff.
AUATUH
[]A\A]
[]A\A]
fffff.
fffff.
@[]A\
@[]A\
AUATI
[]A\A]
ATUSH
 []A\
 []A\
 []A\
 []A\
 []A\
 []A\
([]A\A]
([]A\A]
AWAVAUATI
[]A\A]A^A_
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
AUATI
([]A\A]
AUATUSH
[]A\A]
([]A\A]
AUATUH
[]A\A]
[]A\A]
fffff.
k []A\
fffff.
fffff.
\$l[]A\
D$XH;X
tE@:o)t?1
fffff.
AWAVAUATI
D$<u-
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUH
D$XH;h
[]A\A]A^A_
AUATUH
[]A\A]
AUATUSH
[]A\A]
[]A\A]
AWAVAUATI
[]A\A]A^A_
ATUSH
0[]A\
0[]A\
AWAVAUATUH
8[]A\A]A^A_
`[]A\
`[]A\
AWAVAUATUH
[]A\A]A^A_
AWAVI
[]A\A]A^A_
[]A\A]A^A_
fffff.
l$4fD
ATUSH
[]A\A]
[]A\A]
ZL$@f
ATUSH
[]A\A]
[]A\A]
fffff.
AUATUSH
D$ L9
H[]A\A]A^A_
L+,$H
[]A\A]A^A_
9l$ u
AWAVAUATUSH
M;~@wfH
8[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
D$ L9
L+,$H
fffff.
AVAUATUSH
0[]A\A]A^
ATUSH
8[]A\A]
fffff.
fffff.
AWAVAUATUH
[]A\A]A^A_
]A\A]E
AWAVAUATUSH
M;~@wrH
8[]A\A]A^A_
AUATI
h[]A\A]A^A_
h[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
D$0H9
$I;GX
D$(L9
AWAVI
AUATUSH
[]A\A]A^A_
AVAUATI
([]A\A]A^A_
([]A\A]A^A_
 []A\
W(H9P
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
[]A\A]
[]A\A]
[]A\A]
AWAVA
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AUATI
[]A\A]A^A_
 []A\
 []A\
fffff.
v##L$PA
[]A\A]A^A_
AWAVI
AUATUSH
D$ L9
[]A\A]A^A_
t$`E1
AWAVAUI
ATUSH
D$0H9
[]A\A]A^A_
t$pE1
AWAVAUATUH
[]A\A]A^A_
AWAVI
AUATUS1
[]A\A]A^A_
AWAVAUA
E;|$Hw
A;l$L
D;|$,
H;D$@
x[]A\A]A^A_
M;D$hsrN
D$pI9
]A\E1
AVAUATUSH
D$$9D$ 
[]A\A]A^A_
fffff.
AWAVAUATUSH
D$@f.
t$$tN
d$$A9
D;d$\
[]A\A]A^A_
AUATI
CL[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
L$8E1
D$HH1L$H
D$d9D$`
D$HH1D$
AVAUI
0[]A\A]A^
AWAVAUATUH
t$`tsH
[]A\A]A^A_
([]A\A]A^A_
ATUSH
AUATUSH
[]A\A]
AVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AUATUH
[]A\A]
[]A\A]
[]A\A]
ffff.
fffff.
AVAUATUH
[]A\A]A^
AWAVAUATI
H[]A\A]A^A_
[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
fffff.
AWAVAUATL
([]A\A]A^A_
M;u8tDH
tAI;M
H9wHH
fffff.
[]A\A]
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
fffff.
AVAUATUSH
m0t*I
D$LA)
D$LA)
E0t H
[]A\A]A^A_
D$LA)
AWAVI
D$(t'H
h[]A\A]A^A_
l$0t$I
h[]A\A]A^A_
AVAUATU1
[]A\A]A^A_
fffff.
w AUI
c8[]A\A]A^
AWAVI
AUATUSH
[]A\A]A^A_
D( ]A\A]A^A_
AWAVAUI
ATUSH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]
[]A\A]
AVAUI
ATUSH
[]A\A]A^
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]
H;wHs
9w`v#
ATUSD
H;Ghs'H
H;:t	
E 9C 
AVAUATUSH
[]A\A]A^A_
AUATI
[]A\A]
ATUSH
[]A\A]
9whvC
fffff.
AUATUSD
]A\A]
}bfA9
};fA9
H;G(r
AVAUATUSH
8[]A\A]A^A_
ATUSH
T$$L9
H[]A\A]
[]A\A]
AWAVAUATUH
([]A\A]A^A_
[]A\A]
D$(dH3
8[]A\A]
HEFTUVWX
$zxvwH
AWAVI
AUATI
[]A\A]A^A_
ATUSH
[]A\A]A^A_
AWAVAUATUH
PPL;c@H
([]A\A]A^A_
AVAUATUH
VL+VPH
[]A\A]A^A_
AVAUA
[]A\A]A^
fffff.
AUATI
$A\A]A^
AWAVAUI
ATUSH
D$8uXI
X[]A\A]A^A_
AWAVI
AUATI
[]A\A]A^A_
AUATUSH
[]A\A]
AWAVAUI
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVAUATI
$H9D$
[]A\A]A^A_
[]A\A]A^A_
AWAVI
AUATUSH
CP)D$
D+<(Mc
T$H+CP
[]A\A]A^A_
l$oE1
t$ E1
<0D+|$8
D+,(Mc
|$HD+<(Mc
AWAVAUATUSH
[]A\A]A^A_
YD$8H
|$ t>
AWAVAUATUSH
[]A\A]A^A_
YD$8H
|$ t>
AWAVAUATUSH
f;T$>H
D$ utH
[]A\A]A^A_
vXAUATUSH
[]A\A]A^A_
t$0fD
L;d$Pv
t$0fD
t$0fD
[]A\A]A^A_
L;l$Pv
t$0fD
t$0fD
[]A\A]A^A_
L;l$Pv
AWAVL
vPAUATUSH
[]A\A]A^A_
FP)D$8H
D$PE1
L$$E1
VLA+VP
VLA+VPH
ATUSH
[]A\A]
AVAUATI
[]A\A]A^A_
AUATI
[]A\A]
[]A\A]
L9c8s4H
c0tL1
H9k8s3H
k0t11
AUATUSH
[]A\A]A^
AWAVAUI
ATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
[]A\A]
[]A\A]
[]A\A]
AWAVA
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
fffff.
H;:t	
J H9N u
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATI
D$YdH
[]A\A]A^A_
AVAUATE1
[]A\A]A^A_
AVAUATI
D$idH
[]A\A]A^A_
PX9D$
AVAUATUH
[]A\A]A^
 []A\A]A^
fffff.
AVAUI
ATUSH
[]A\A]A^A_
H[]A\A]A^A_
AWAVAUA
D9d$4
[]A\A]A^A_
ATUSH
([]A\A]A^A_
AVAUATUH
D$ydH
[]A\A]A^A_
PX9D$
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AUATUSH
[]A\A]A^A_
8[]A\A]A^A_
AVAUE
[]A\A]A^
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
H;V H
fffff.
[]A\A]
 []A\
AVAUE
[]A\A]A^A_
AUATUSH
[]A\A]
fffff.
fffff.
u&[]A\
AUATA
\$PH9
[]A\A]
L$0t,
[]A\A]
[]A\A]A^
\$ E1
@[]A\A]A^
AUATUL
[]A\A]A^A_
l$0E1
L;t$ 
AWAVAUL
nPATUSH
	L$PA
D$@L9
D$,9D$
D$@L9
D$HE1
(L;d$
(L;d$
d$\D+d$TD
d$PA+mPA9
t$ E1
} tBf.
} t>f
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AVAUI
ATUSH
8[]A\A]A^A_
(H;l$
fffff.
fffff.
fffff.
AWAVAUATUSH
[]A\A]A^A_
 L;d$
D$0H9
D$0H9
D$0H9
fffff.
AUATU1
[]A\A]
AUATUH
X[]A\A]
AVAUATI
[]A\A]A^
fffff.
fffff.
AUATUH
[]A\A]
[]A\A]
fffff.
AUATA
[]A\A]
[]A\A]
[]A\A]
ATUSH
[]A\H
fffff.
B@H9B8H
B@H9B8H
fffff.
fffff.
fffff.
AVAUATUSH
[]A\A]A^A_
fffff.
AWAVAUATUSH
[]A\A]A^A_
T$X+T$PM
D$\+D$T
|$0E1
([]A\A]
([]A\A]
AVAUI
8[]A\A]A^A_
fffff.
AUATUH
[]A\A]
[]A\A]
tEUSH
fffff.
tUUSH
AVAUATUH
[]A\A]A^
[]A\A]A^
AWAVAUATUH
[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
fffff.
fffff.
AUATUH
P[]A\A]A^
P[]A\A]A^
AWAVAUI
L$HdH3
X[]A\A]A^A_
fffff.
 []A\
 []A\
fffff.
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
|$6fD
D$8fD
H[]A\A]A^A_
AWAVAUATUSH
|$2E1
t$0fD
D$4fD
L$6fD
T$8fD
[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
[]A\A]
AUATUH
H[]A\A]
[]A\A]
[]A\A]
[]A\A]
AWAVAUATUSH
X[]A\A]A^A_
AUATUH
t2D	m
[]A\A]A^
[]A\A]A^
fffff.
AVAUI
([]A\A]A^A_
fffff.
ATUSH
[]A\A]
fffff.
AWAVAUATUSH
t$ M#x
8[]A\A]A^A_
8[]A\A]A^A_
AVAUATUSH
D$(H9D$
[]A\A]A^A_
AWAVAUA
[]A\A]A^A_
D$0Hc
@L;d$ 
[]A\H
ATUSH
[]A\A]A^
fffff.
AWAVAUATI
H[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
YD$ L
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^
t]xcH
AUATUH
[]A\A]
ATUSH
AVAUI
ATUSH
8[]A\A]A^A_
AVAUATUH
D$(xLH
L$(t=H9
0H91u8H
P[]A\A]A^
T$8H9
([]A\A]
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
fffff.
fffff.
fffff.
ffff.
AWAVAUATUSH
[]A\A]A^A_
fffff.
ATUSH
AWAVL
AUATUSH
\$(D)
L$,A)
[]A\A]A^A_
[]A\A]
[]A\H
ATUSH
[]A\A]
AVAUI
ATUSH
[]A\A]A^A_
[]A\A]
AUATUH
t-H;D$8s&
t{H9D$8vt
t0H;D$8s)
[]A\A]A^A_
fffff.
AWAVAUATUH
[]A\A]A^A_
AVAUATI
L$8vPD
.D$<r@
[]A\A]A^
[]A\A]A^
.T$,rW
[]A\A]
;wprL
[]A\A]
H;C@t6
fffff.
AUATUSH
([]A\A]
[]A\1
AVAUATUSH
 []A\A]A^
ATUSH
ATUSH
AWAVAUATU
8[]A\A]A^A_
L9{@u	I9
AWAVAUA
X[]A\A]A^A_
D$0E1
fffff.
AVAUATUSH
H[]A\A]A^A_
K@H9L$
T$0E1
T$0E1
T$0E1
T$0E1
fffff.
x	Hcq
AVAUATUS
[]A\A]A^
]A\A]A^
fffff.
[]A\A]
AVAUATUH
[]A\A]A^A_
fffff.
AWAVAUI
{0t?H
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
t^xdH
AWAVAUATUH
X[]A\A]A^A_
t$HH;p
t$HH9
AWAVI
[]A\A]A^A_
AVAUATUH
D$(xMH
L$(t>H9
0H92ucH
P[]A\A]A^
T$8H9
fffff.
fffff.
AVAUI
ATUSH
[]A\A]A^
AUATI
[]A\A]
AUATUH
[]A\A]
AWAVA
[]A\A]A^A_
h[]A\A]A^A_
[]A\A]A^A_
h[]A\A]A^A_
P[]A\
t@I;sH
AUATA
[]A\A]
[]A\A]1
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
([]A\A]A^A_
([]A\A]A^A_
fffff.
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
wcATM
P[]A\
AVAUATI
t@H;_H
L+d$ I
8[]A\A]A^A_
[]A\A]A^A_
AWAVA
AUATI
[]A\A]A^A_
fffff.
fffff.
[]A\A]A^
[]A\A]A^
ATUSH
[]A\A]A^A_
H;o v
fffff.
fffff.
AUATUSH
h[]A\A]A^A_
E H9C H
[]A\A]A^A_
[]A\A]A^A_
pHfA+0H9
fffff.
AUATI
t$([]A\A]A^
fffff.
0[]A\
 []A\
fffff.
fffff.
AUATA
[]A\A]A^A_
[]A\A]A^A_
AUATI
[]A\A]
AUATUSD
T$0t}
[]A\A]A^
[]A\A]A^A_
AWAVI
8[]A\A]A^A_
T$xE1
fffff.
AVAUATI
D$pE1
[]A\A]A^A_
t$(H)
AVAUE
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
D$(tEH
D$@v.
fffff.
fffff.
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
x[]A\A]A^A_
AVAUI
[]A\A]A^
[]A\A]A^
fffff.
[]A\A]
AWAVI
L9`8H
[]A\A]A^A_
AUATUSH
D$D9D$@
.t$8w
.|$<v(f
[]A\A]A^A_
AWAVAUI
ATUSH
[]A\A]A^A_
AWAVAUL
D$49D$0
[]A\A]A^A_
fffff.
AVAUATI
[]A\A]A^A_
L$Ht7
fffff.
AUATUSH
A9G,w
8[]A\A]A^A_
[]A\A]A^A_
AVAUATUSH
\$ A9
D$,E1
H[]A\A]A^A_
H[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
L$Ht7
fffff.
X[]A\A]A^A_
AWAVAUM
|$XI;
H9D$H
L$0A9
L;|$(t+A
A;E,r
D$4E1
;\$ u
D$<9D$0
x[]A\A]A^A_
D$HI;
AWAVAUI
ATUSH
X[]A\A]A^A_
9l$0szHcD$8D
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
AVAUATA
t$dE9
CHD9t$
[]A\A]A^A_
GHD9l$
T$(D)
D9t$(
T$(D)
D$d9D$`
AUATUH
D$8tMH
L;T$8t/L
P(H9P0
[]A\A]A^A_
L;F8u
l$8M!
l$@M!
l$0L9n@u
X[]A\A]A^A_
W(H9P
AUATUH
[]A\A]
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
ATUSH
t$$Ic
T$@Hc
t$HHc
D;|$$
L+\$X
D;l$ 
x[]A\A]A^A_
AUATI
h[]A\A]A^A_
AUATUSH
[]A\A]A^
AWAVAUATUSH
T$&L1
X[]A\A]A^A_
X[]A\A]A^A_
AUATI
[]A\A]A^A_
 []A\
 []A\
ATUSH
H;kpH
8[]A\A]A^A_
AWAVAU
fD;"tnH
H;kpsuH
([]A\A]A^A_
H;kpr
AVAUATUSf
[]A\A]A^A_
AWAVA
ATUSH
tafA9
[]A\A]A^A_
H;1u]H
AVAUATA
)L$<D
D$8)L$8
fD+L$
D;l$@
;D$8|
D9l$,
YD;l$D}R
|$<fD
[]A\A]A^A_
H;1uwH
H;D$P
H;D$P
L$PH9
[]A\A]
VUUUD
VUUUH
[]A\A]
AWAVAUATUSH
[]A\A]A^H
_H;1uzH
oHATUH
[]A\A]
([]A\A]A^A_
fffff.
AWAVAUA
([]A\A]A^A_
[]A\A]A^A_
fffff.
[]A\A]A^
AUATUH
U0uzH
u4f)UDH
[]A\A]A^
o`ATA
[]A\A]A^A_
[]A\A]A^A_
GD;D$
fffff.
MHfA)T$
SF[]A\A]A^
[]A\A]1
[]A\A]A^
{BfA9
fffff.
[]A\A]A^A_
AVAUATI
{Df9}D
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUH
([]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
|$BfA9
([]A\A]A^A_
t$BfA9
([]A\A]A^A_
([]A\A]A^A_
wBfA9
uBfA9
[]A\A]
fffff.
AVAUL
oHATI
[]A\A]A^
AUATL
gHUSH
B(t6H
pH;D$
[]A\A]A^A_
fffff.
gHUSH
[]A\A]L
tLH97H
H9+t"H
oHATUH
[]A\A]A^
AVAUI
[]A\A]A^
fffff.
fffff.
AWAVA
h[]A\A]A^A_
L$"I1
L$$I1
L$(I1
L$ I1
L$"I1
L$&I1
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
fffff.
AWAVAUATUSH
[]A\A]A^A_
L;g0s;
[]A\A]A^A_
AWAVAUATUSH
H;kXs3H
[]A\A]A^A_
cH;1uvH
AWAVAUATUSH
H[]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
AVAUA
ATUSH
\|$4H
D$`I9
x[]A\A]A^A_
AWAVAUATA
[]A\A]A^A_
z\uZA
AVAUATU1
([]A\A]A^A_
AVAUATU1
([]A\A]A^A_
AVAUATI
[]A\A]A^A_
AVAUATU
h[]A\A]A^A_
l$0H9
h[]A\A]A^
AWAVAUATUSH
t$XE1
h[]A\A]A^A_
t$(H9
AWAVAUATUSH
H9kPJ
[]A\A]A^A_
H9k(w
AWAVAUATUSH
H;oXs>H
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATA
([]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
D$(H+D$
D$HH9D$(H
H;D$(t
D$@H9
D$(H+D$
L9|$ 
D$(H+D$ I
[]A\A]A^A_
AVAUATUSH
D$(H+D$
D$HH9D$(H
H;D$(t
D$@H9
D$(H+D$
T$8t%I
L9|$ L
H+D$ H
D$@~:H
[]A\A]A^A_
AVAUATUSH
D$(H+D$
D$HH9D$(H
H;D$(t
D$@H9
D$(H+D$
L9|$ 
D$(H+D$ I
[]A\A]A^A_
fffff.
AVAUATA
[]A\A]A^
8A\A]H
s0I#p
tbH;r
D9k4w
D9@4w
[]A\A]
[]A\A]
AVAUATUSH
t=L;C
[]A\A]1
[]A\A]
[]A\A]
fffff.
AVAUATUH
[]A\A]A^A_
[]A\A]A^A_
L)k(L)k 
[]A\A]A^A_
[]A\A]A^A_
I)qxL
fffff.
AWAVI
8[]A\A]A^A_
4vH)T
AVAUI
H;*ta1
[]A\A]A^A_
H9D$0
;WXvML
AWAVAUATUSH
[]A\A]A^A_
fffff.
[]A\A]A^
AVAUI
g(USH
e0[]A\A]A^
AWAVA
[]A\A]A^A_
[]A\A]A^A_
fffff.
A\A]A^M
[]A\A]A^A_
fffff.
fffff.
fffff.
E@H9EPt
D$(I9D$0t
ATUSH
p[]A\
D$Dff
(\$0t
|$H[]A\H
fffff.
H;kHt
ffffff.
H;BHO
AWAVAUATI
L)`HH
A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AWAVAUATI
M;|$P
|$HL9
l$ H9
X[]A\A]A^A_
[]A\A]
AWAVI
AUATUSH
([]A\A]A^A_
fffff.
fffff.
AWAVI
AUATUSH
[]A\A]A^A_
S8[]A\
AWAVI
[]A\A]A^A_
0[]A\
@[]A\
kX[]A\
fffff.
fffff.
ATUSH
E8t\L9
AUATI
W8t4L
$A\A]A^
AUATI
W8t4L
[]A\H
A]A^H
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AVAUATUSH
[]A\A]A^
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
([]A\A]A^A_
fffff.
fffff.
AVAUATU
8[]A\A]A^A_
8[]A\A]A^A_
|$$E9
T$(D)
[]A\A]A^A_
H[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
AUATUSH
[]A\A]A^A_
fffff.
AWAVAUATUSH
([]A\A]A^A_
AWAVI
AUATUH
D$ H9D$
[]A\A]A^A_
fffff.
AWAVAUATI
h[]A\A]A^A_
[]A\A]
fffff.
G8AVAUATU1
L;{@r
8[]A\A]A^A_
AWAVAUATUSH
8[]A\A]A^A_
L;{`sDI
AVAUATUSH
D$(H+D$
D$HH9D$(H
H;D$(t
D$@H9
D$(H+D$
L9|$ 
D$(H+D$ M
[]A\A]A^A_
ffff.
ffffff.
AVAUATE
D$LIc
D$@9D$,
x[]A\A]A^A_
|$ Hc
|$XHc
AUATA
([]A\A]A^A_
ATUSH
D$ D)
D$HIc
D$DIc
D$(9D$
h[]A\A]A^A_
L$ Hc
H;k v(H
fffff.
AWAVAUATU
|$ A9
l$0E1
l$ D9
l$OE1
[]A\A]A^A_
T$0E1
|$0E1
T$0E1
|$ D9
|$0E1
AWAVAUATUSL
L$(dL
|$xE1
|$ E1
D$xdH3
[]A\A]A^A_
AVAUATUSH
D9l$ 
 ;T$H
9D$ v
[]A\A]A^A_
AWAVAUATUSL
L$(dL
|$xE1
|$ E1
D$xdH3
[]A\A]A^A_
AWAVAUATUSL
t$8E1
<$D;d$
<$D9d$
<$D9d$
D$8dH3
H[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
fffff.
ffff.
ffff.
ffff.
AVAUATU1
H9k0w
[]A\A]A^
AVAUATE1
[]A\A]A^A_
AUATI
w*H;k8wtH
[]A\A]
H9]0w
H9]0w
AWAVI
AUATUSH
@L;l$
[]A\A]A^A_
T$(H;
fffff.
t5[]A\
AVAUM
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AUATUSH
D;d$Hf
[]A\A]A^A_
AVAUA
([]A\A]A^A_
AWAVAUA
H;k8siH
([]A\A]A^A_
AWAVAUA
H;k8siH
[]A\A]A^A_
AWAVAUA
H;k8siH
[]A\A]A^A_
AWAVAUA
L;{8ssI
([]A\A]A^A_
AUATUH
H;k8sbH
[]A\A]A^
AWAVAUATE
L;{`L
[]A\A]A^A_
H[]A\A]A^A_
D$(H;
H[]A\A]A^A_
T$(H;
fffff.
AVAUE
L;}8s~I
h[]A\A]A^A_
AUATUH
x[]A\A]A^A_
I|t=H
M;~8s}I
8[]A\A]A^A_
AVAUATA
L$Lt	
h[]A\A]A^A_
h[]A\A]A^A_
[]A\A]A^A_
AWAVI
M9~(L
[]A\A]A^A_
D$pL9
D$@L9
fffff.
[]A\A]A^A_
fffff.
AUATUSH
}0trL
@L;l$
[]A\A]A^A_
T$(H;
fffff.
AUATUSD
L$0;H
L$0;H
[]A\A]A^A_
fffff.
AWAVAUATA
D$t9D$p
[]A\A]A^A_
\$0E1
[]A\A]A^A_
T$ H	
\$ H	
 H	D$ 
~T$(H
~L$(H
~L$(H
~T$(L
~T$(H
FXAVAUE
[]A\A]A^A_
AUATUSH
D$*fD
T$.fD
[]A\A]
AWAVI
AUATUH
[]A\A]A^A_
D$PL9
AVAUI
ATUSH
0f91u
gPs5I
_pvSH
M9e0L
I9mXL
([]A\A]A^A_
L;$$u
AWAVI
D$PE1
L9cpL
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
T$(H;
ATUSH
*]A\H
AVAUATUSH
t$(L9t$
C(tdI
D$ H9
fD92I
fA9/u
D$ ~ H
[]A\A]A^A_
AUATI
$A\A]A^
AVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
fffff.
AVAUI
ATUSH
[]A\A]A^
w/L;cpwyH
[]A\A]A^
fffff.
fffff.
H9]hw
fffff.
H9]hw
fffff.
AVAUATUSH
|$0H9} 
|$0H9} u
D$0H9D$
D$pH9
D$`H9
[]A\A]A^A_
M;wPscI9
D$`H9
AUATUSH
g8tjA
M9o8t
[]A\A]A^A_
[]A\A]A^A_
A\A]A^L
AWAVAUI
[]A\A]A^A_
AWAVAUI
A\A]A^A_
AUATUH
[]A\A]
ATUSH
[]A\A]
[]A\A]
H;rHt
ffff.
ATUSH
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
AWAVAUATI
X[]A\A]A^A_
D$ L9
l$hSH
AWAVAUATI
|$xE1
([]A\A]A^A_
l$hI9
|'ATA
[]A\A]A^A_
I;|$@
I;|$@
[]A\A]
AUATD
[]A\A]A^
fffff.
ATUSH
8[]A\A]
 []A\
 []A\
P[]A\A]A^
AVAUI
mATUL
D$pE1
X[]A\A]A^A_
[]A\A]A^A_
fffff.
AVAUATI
[]A\A]A^
AWAVAUATI
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
D$4E1
AWAVI
AUATUSH
[]A\A]A^A_
AVAUATUH
[]A\A]A^
[]A\A]A^
AWAVAUATA
]\$PA
H9t$(H
[]A\A]A^A_
N H9J H
H9t$(H
AWAVI
AUATUSH
tDL9|$
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AWAVAUATA
[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
.D$Tr9
.D$Pr
|$@E1
fffff.
rPAUI
[]A\A]A^A_
fffff.
AWAVAUATUSH
D$0E1
D$XH9D$P
[]A\A]A^A_
ATUSH
ATUSH
s []H
fffff.
gpUSH
[]A\A]
L$0H)
[]A\A]A^
AWAVAUA
[]A\A]A^A_
AVAUI
mATUSH
[]A\A]A^
[]A\A]A^
AUATUH
[]A\A]A^
AUATI
[]A\A]
[]A\A]
d$ w(H
0[]A\
fffff.
[]A\A]
[]A\A]
AWAVAUATUSH
h[]A\A]A^A_
AVAUATI
I;l$ 
l$ ta1
PXI9l$ H
[]A\A]A^A_
I;l$(
AWAVAUATUSH
8[]A\A]A^A_
AVAUATI
PPI9l$ w
([]A\A]A^A_
[]A\A]
AUATU
9w(tOL
[]A\A]
[]A\A]
[]A\A]
H9]8w
([]A\A]
AWAVI
AUATUH
PPI9^
h[]A\A]A^A_
AWAVAUA
I9\$ w
X[]A\A]A^A_
AVAUATI
PPI9l$
H[]A\A]A^A_
AWAVA
AUATUH
8[]A\A]A^A_
PPL9m@v"A
8[]A\A]A^A_
AVAUA
[]A\A]A^
[]A\A]A^
AWAVAUATA
[]A\A]A^A_
mHL;kH
ChH9Eh
Cp9Ep
Ct9EtA
H9]Hw
8[]A\A]
8[]A\A]
AVAUATUSH
X[]A\A]A^A_
fffff.
ATUSH
H[]A\A]
H9]8w
 []A\
H;]8r
AWAVAUATUSH
M;w8r
I9l$ w
H9X w
[]A\A]A^A_
AWAVAUATI
8[]A\A]A^A_
AWAVAUATI
D$@L9
I;\$P
\$Hv2I
D$@L)
8[]A\A]A^A_
8[]A\A]A^A_
AWAVAUATI
kHv;H
H9kHw
[]A\A]A^A_
L;<$u
AWAVI
ATUSH
([]A\A]A^A_
AVAUATUSH
D$0L9
D$(E1
H[]A\A]A^A_
fffff.
AWAVAUI
ATUSH
H9k w
[]A\A]A^A_
AVAUATUSH
X[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
D$8L9
H[]A\A]A^A_
AWAVAUI
8[]A\A]A^A_
PXH;l$
8[]A\A]A^A_
AVAUATUH
8[]A\A]A^A_
8[]A\A]A^A_
AWAVAUATI
H;]@I
I;^ I
[]A\A]A^A_
AVAUI
ATUSH
H[]A\A]A^A_
AWAVAUATI
H9h@w
H[]A\A]A^A_
D$ r`M;L$H
fffff.
AWAVAUATUH
D$@E1
791tE1
D$@E1
[]A\A]A^A_
H9]8w
AVAUATI
l$Xt<1
I9l$ w
[]A\A]A^A_
AWAVA
[]A\A]A^A_
fffff.
AWAVI
AUATUSH
[]A\A]A^A_
AVAUATUSH
x[]A\A]A^A_
AWAVAUATUSH
t$ H)D$ I
D$ H9
|$@E1
L9t$x
[]A\A]A^A_
fffff.
ATUSH
[]A\A]
ATUSH
[]A\A]
AVAUI
ATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
ATUSH
[]A\A]
ATUSL
ATUSH
[]A\A]
ATUSL
[]A\H
A]A^H
ATUSH
[]A\A]
AUATI
$A\A]A^
ATUSH
ATUSH
[]A\H
A]A^H
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
AWAVAUATUSH
I;o8r
M;f8s
L;h8s
T$8H;P8s
T$0H;P8s
T$(H;P8s
T$ H;P8s
H;P8s
H9P8v
x[]A\A]A^A_
AWAVAUATUSH
L$`E1
I;o8r
M;f8s
L;h8s
L$8H;H8s
L$0H;H8s
L$(H;H8s
L$ H;H8s
H;H8s
H9H8v
x[]A\A]A^A_
AWAVAUATUSH
I;o8r
M;f8s
L;h8s
T$8H;P8s
T$0H;P8s
T$(H;P8s
T$ H;P8s
H;P8s
H9P8v
x[]A\A]A^A_
AVAUATI
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
[]A\A]
AWAVAUATI
D$ H9D$
49tEJ
[]A\A]A^A_
AUATI
wpH;W
[]A\A]A^A_
AUATI
wpH;W
[]A\A]A^A_
AUATI
wpH;W
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
AWAVAUATUH
8[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
B0[]A\
B0[]A\
J0[]A\
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
B0[]A\
B0[]A\
J0[]A\
AWAVAUATUSH
M;n8r
I;l$8r
t$8H;p8
t$0H9p8
x[]A\A]A^A_
F I+F
D$ I+D$
F H+F
B0H+F
F H+F
t$ H)
F H+F
t$(H)
B0[]A\
B0[]A\
J0[]A\
[]A\A]A^
AWAVAUATUSH
w(H9s0v
H[]A\A]A^A_
H;K0s
L;k8H
H[]A\A]A^A_
AVAUATUSH
H;D$P
h[]A\A]A^A_
A;4$~
t$<A;7}
A;4$~
fffff.
AVAUA
H;kXs~H
H;k8H
([]A\A]A^A_
AWAVAUATA
H;k8s;H
([]A\A]A^A_
AWAVAUE
([]A\A]A^A_
([]A\A]A^A_
AWAVAUATA
8[]A\A]A^A_
8[]A\A]A^A_
AUATUSH
d$ E1
\$8dH3
H[]A\A]A^A_
[]A\A]A^
[]A\A]1
[]A\A]
AWAVAUA
L$HdH3
X[]A\A]A^A_
\$(dH3
0[]A\
ATUSH
[]A\A]
AVAUE1
ATUSH
8[]A\A]A^A_
AVAUATUH
8[]A\A]A^A_
AWAVAUI
ATUSH
T$ E1
D$ I;EP
+T$(H
x[]A\A]A^A_
F@AVAUATI
([]A\A]A^
([]A\A]A^
AWAVAUATUH
([]A\A]A^
([]A\A]A^
([]A\A]A^
([]A\A]A^
AVAUATI
([]A\A]A^
([]A\A]A^
AVAUATI
([]A\A]A^
([]A\A]A^
AVAUATUSH
D$(H+D$
D$HH9D$(H
H;D$(t
D$@H9
D$(H+D$
$0L9|$ 
D$(H+D$ A
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AWAVA
8[]A\A]A^A_
8[]A\A]A^
8[]A\A]A^
8[]A\A]A^
8[]A\A]A^
F AVAUA
([]A\A]A^A_
([]A\A]A^
([]A\A]A^
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AUATUH
[]A\A]
[]A\A]
[]A\A]
AWAVAUI
UUUUUUUUH
|$(H9|$
H[]A\A]A^A_
PH9T$
AWAVI
[]A\A]A^A_
[]A\M
[]A\A]A^
AUATI
A#1D	
([]A\A]A^A_
([]A\A]A^A_
A#0D	
([]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^1
[]A\A]A^
AVAUI
M;l$@wPJ
[]A\A]A^A_
AVAUA
M;l$@wSJ
[]A\A]A^A_
AUATUH
[]A\A]
[]A\H
AVAUATI
[]A\A]A^
[]A\A]A^
AUATUH
[]A\A]
[]A\A]
[]A\A]
AUATUSH
[]A\A]
AWAVAUI
M;t$@
D$(L9
[]A\A]A^A_
H9]8w
fffff.
H9]8w
fffff.
AWAVAUATUH
D$@E1
L9c8vVH
L9m8w
[]A\A]A^A_
wTL;{@
[]A\A]A^A_
[]A\A]
AVAUI
D$8H9
I;l$@
H;l$ I
l$8v5H
H[]A\A]A^A_
D$0E1
 []A\
AWAVA
I9l$8w
([]A\A]A^A_
AUATUH
L9k8w
X[]A\A]A^A_
I9]8w
[]A\A]A^A_
H9G8t
AUATUSH
[]A\A]A^
fffff.
fffff.
AWAVAUI
ATUSH
([]A\A]A^A_
[]A\A]A^A_
fffff.
8[]A\A]
AVAUI
ATUSH
D$ H;
[]A\A]A^A_
D$ H;
[]A\A]A^
8[]A\A]
AUATUSH
t$0E1
D$ H;
[]A\A]A^A_
D$ H;
AWAVI
AUATL
[]A\A]A^A_
[]A\A]A^
[]A\A]A^
 []A\
[]A\A]A^
HEFTUVWX
$zxvwf
D$(dH3
8[]A\A]
fffff.
fffff.
[]A\A]
AVAUATI
[]A\A]A^
fffff.
AVAUM
0[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
~L+~P)
[]A\A]
AWAVAUL
nPATUH
gLD+gP
[]A\A]A^A_
BL+BP)
AVAUATI
[]A\A]A^A_
AWAVI
AUATUH
H[]A\A]A^A_
\$ t~I
\$ t.I
AUATI
8[]A\A]A^A_
AUATUH
JL+JP)
[]A\A]A^
JL+JP)
[]A\A]
AWAVAUA
ATUSH
wiL;m 
([]A\A]A^A_
AUATUS
[]A\A]L
Ph[]A\A]L
AUATUS
[]A\A]L
Ph[]A\A]L
AUATUSH
[]A\A]
[]A\A]
AUATUSH
[]A\A]
[]A\A]
AVAUATA
[]A\A]A^
[]A\A]A^
fffff.
fffff.
fffff.
fffff.
fffff.
ChH9Eh
fffff.
fffff.
fffff.
G(H;G
fffff.
fffff.
[]A\A]
[]A\A]
fffff.
fffff.
QXHcE
fffff.
[]A\A]
AWAVAUATI
([]A\A]A^A_
AUATA
([]A\A]
ffffff.
 []A\
fffff.
L$HdH3
fffff.
AVAUI
ATUSH
[]A\A]A^
[]A\A]A^
fffff.
G0u4H
AUATUSH
[]A\A]
H;o0v
ATUSH
[]A\A]
n ATI
([]A\A]A^A_
fffff.
0[]A\A]A^
0[]A\A]A^
[]A\A]A^
[]A\A]A^
0[]A\A]A^
0[]A\A]A^
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
D$(@L
[]A\A]
AWAVAUATUSH
D$(f.
teH;\$
H[]A\A]A^A_
H[]A\A]A^A_
[]A\A]
AVAUATUSH
 []A\A]D
fffff.
fffff.
([]A\A]A^A_
fffff.
fffff.
fffff.
GpATI
nxH;oxsRH
kxt(H
[]A\A]
GpUSH
fffff.
GpAVAULc
cxtOA
([]A\A]A^A_
AUATUSH
[]A\A]A^A_
fffff.
AVAUATUSH
[]A\A]A^A_
t1H9A
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUH
8[]A\A]A^A_
8[]A\A]A^A_
ffffff.
AVAUATI
D;i,tU
[]A\A]A^
[]A\A]A^
D;i,u
fffff.
fffff.
[]A\H
 tcH;
@tXH;
fffff.
fffff.
AUATUH
[]A\A]
ffffff.
([]A\A]A^A_
fffff.
GhvID
AVAUI
]A\A]A^
fffff.
[]A\A]
[]A\A]
T$ E1
AVAUATI
[]A\A]A^
[]A\A]A^
L$xdH3
fffff.
AWAVAUATI
$$M#w
[]A\A]A^A_
AWAVAUATI
$$M#w
[]A\A]A^A_
 []A\
rPH9pPu
r8H9p8u
p ;r u
r(9p(u
fffff.
w(AVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
w(AVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
fffff.
AWAVAUATI
[]A\A]A^A_
[]A\A]A^
[]A\A]A^
fffff.
AUATUH
t3v=A)
[]A\A]
[]A\A]
L$HdH3
fffff.
AWAVA
[]A\A]A^A_
[]A\A]A^A_
 []A\
fffff.
[]A\A]H
fffff.
@h]A\H
[]A\A]
fffff.
o ATI
[]A\A]A^A_
 []A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]
[]A\A]
fffff.
H+w`1
AUATI
[]A\A]
fffff.
0ATUSH
[]A\A]
AUATUH
[]A\A]A^
AWAVAUATI
[]A\A]A^A_
wGL;s8
fffff.
AWAVI
AUATUSH
X[]A\A]A^A_
[]A\A]A^A_
ATUSH
[]A\A]
AUATUH
[]A\A]A^
AWAVAUATUSH
8\$-L
X[]A\A]A^A_
ATUSH
@([]A\
fffff.
[]A\A]A^
fffff.
AUATUH
([]A\A]
([]A\A]
([]A\A]
AWAVI
AUATI
[]A\A]A^A_
ATUSH
BxH;GxH
GxtV1
([]A\A]A^A_
AVAUATUH
[]A\A]A^A_
AWAVA
x[]A\A]A^A_
x[]A\A]A^A_
AUATI
[]A\A]
[]A\A]
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
<$H9G
]A\A]A^
]A\A]A^
tb[]A\
tb[]A\
ffff.
fffff.
fffff.
fffff.
fffff.
AVAUATUH
[]A\A]A^
[]A\A]A^
fffff.
fffff.
 []A\
 []A\
x:ATUSH
;wx}"H
ATUSH
[]A\A]A^
[]A\A]A^
ATUSH
M;nxM
FpsVI
nxv#H
 []A\A]A^
fffff.
fffff.
AUATUSH
([]A\A]A^A_
fffff.
ATUSH
 []A\
ATUSH
`[]A\
ATUSH
0[]A\
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AVAUATI
 []A\A]A^
AVAUATUSH
@[]A\A]A^
ATUSH
0[]A\
0[]A\
AWAVAUI
ATUSH
x[]A\A]A^A_
L$(L9
wHM;~
AVAUATUSH
 []A\A]A^
fA!D$p
 []A\A]A^
fA	D$p
AWAVAUATUSH
H[]A\A]A^A_
ATUSH
 []A\
 []A\
 []A\
fffff.
AUATI
8[]A\A]
AVAUI
[]A\A]A^A_
o ATL
[]A\A]A^A_
([]A\A]
([]A\A]
AWAVAUL
o8ATUH
h[]A\A]A^A_
[]A\A]A^A_
AVAUL
8[]A\A]A^A_
([]A\A]
AWAVAUATI
[]A\A]A^A_
ffffff.
fffff.
AUATUSH
[]A\A]A^
AWAVAUI
ATUSH
[]A\A]A^A_
[]A\A]A^A_
ATUSH
[]A\A]
fffff.
fffff.
AUATUSH
[]A\A]L
AUATUH
([]A\A]
([]A\A]
fffff.
AVAUATI
[]A\A]A^
[]A\A]A^
[]A\A]A^
fffff.
AWAVAUATUSH
[]A\A]A^A_
AVAUI
[]A\L
@0A]A^
[]A\A]1
[]A\A]A^
ffff.
AUATI
[]A\A]
[]A\A]
ATUSH
0[]A\
;Cx}!H
[]A\A]
AUATUH
([]A\A]A^A_
tuH;G
([]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AVAUI
x\;Ex|'H
[]A\A]A^
[]A\A]A^
A\A]A^
ffff.
ATUSH
[]A\A]A^A_
tNH9A
AWAVAUI
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
D$(H9D$
AWAVAUATUH
[]A\A]A^A_
ffffff.
AVAUI
ATUSH
 []A\A]A^
AWAVAUATUH
[]A\A]A^A_
AWAVAUA
[]A\A]A^A_
fffff.
AWAVAUATUH
X[]A\A]A^A_
AWAVAUATI
X[]A\A]A^A_
 []A\
w=USH
ATUSH
 []A\
 []A\
 []A\
AVAUATI
P[]A\A]A^
[]A\A]A^
AWAVAUATUSH
 H;l$
 H;l$
[]A\A]A^A_
L;c8wBH
AWAVAUATUSH
 H;l$
 H;l$
[]A\A]A^A_
L;c8wBH
AWAVI
AUATUSH
[]A\A]A^A_
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AVAUI
[]A\A]A^A_
fffff.
[]A\A]
9HptCH
fffff.
fffff.
AVAUATI
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
H9zPu
L9R8u
D9J(u
k`v7L
H;k`r
[]A\A]A^A_
 L;d$
 L;d$
AVAUATU
k`v1L
H;k`r
[]A\A]A^A_
[]A\H
 []A\
 []A\
 []A\
ATUSH
Ch[]A\
AVAUATI
H+U L
[]A\A]A^
AWAVAUATUH
H[]A\A]A^A_
@[]A\
@[]A\
ATUSL
[]A\I
fffff.
AVAUATUH
 []A\A]A^
[]A\A]A^
[]A\A]
ffff.
 []A\
 []A\
 []A\
([]A\A]
[]A\A]
fffff.
AVAUATUSH
@L94$
[]A\A]A^A_
AWAVA
[]A\A]A^A_
ffff.
AVAUI
[]A\A]A^
]A\A]A^
AUATI
]0toH
8[]A\A]
8[]A\A]
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
([]A\A]A^A_
t?H;A
AVAUATI
H[]A\A]A^A_
H[]A\A]A^A_
H[]A\A]A^A_
H[]A\A]A^A_
fffff.
AVAUI
[]A\A]A^A_
T$ L)
I;\$(
AVAUI
0[]A\A]A^
AWAVAUATI
X[]A\A]A^A_
AUATUH
8[]A\A]
[]A\A]
[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
[]A\A]A^
[]A\A]
AUATU
H[]A\A]A^A_
[]A\A]
[]A\A]
AVAUI
0[]A\A]A^
AVAUATI
P[]A\A]A^
fffff.
AUATUSH
[]A\A]A^A_
AWAVAUATI
H9G`H
 H;,$
l$@H;{
[]A\A]A^A_
L;k8wBH
AUATI
[]A\A]
[]A\A]
[]A\A]
tmI9@
AWAVAUATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
fffff.
ATUSH
[]A\A]
ffffff.
AUATUSH
[]A\A]
[]A\A]
fffff.
[]A\A]A^A
[]A\A]A^
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVI
AUATUSH
8H9l$
[]A\A]A^A_
fffff.
AWAVI
[]A\A]A^A_
fffff.
AVAUATUSH
8[]A\A]A^A_
fffff.
AUATUSH
[]A\A]L
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
tRI9@
AUATUH
[]A\A]A^
AWAVAUATUH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUI
H[]A\A]A^A_
fffff.
AWAVA
[]A\A]A^A_
ffffff.
AVAUATI
@[]A\A]A^
@[]A\A]A^
AVAUATUSH
([]A\A]A^A_
ATUSH
fffff.
AWAVAUATI
8[]A\A]A^A_
8[]A\A]A^A_
8[]A\A]A^A_
ATUSH
 []A\
AWAVAUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AVAUATM
[]A\A]A^A_
AWAVAUATI
w<M;u8
H[]A\A]A^A_
H[]A\A]A^A_
I;l$8
l$0v4L
D$(L)
I;\$0r
D$(H)
fffff.
AWAVAUI
8[]A\A]A^A_
fffff.
AWAVAUATI
[]A\A]A^A_
L$Xt:
L$Xt:
L$Xt:
AVAUE1
X[]A\A]A^A_
X[]A\A]A^A_
L$Xt:
L$Xt:
L$Xt:
AWAVAUM
ATUSH
[]A\A]A^A_
t$(E1
AWAVAUI
[]A\A]A^A_
ATUSH
AWAVI
[]A\A]A^A_
 I;D$
AWAVAUATI
[]A\A]A^A_
AUATUH
[]A\A]
[]A\A]
ATUSH
tRvL<	H
0[]A\
fffff.
AVAUA
[]A\A]A^
AWAVI
AUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATI
8[]A\A]A^A_
I9]xw
AUATUH
([]A\A]
AWAVAUI
ATUSH
[]A\A]A^A_
D$PE1
}`v:H
L;m`r
t$pE1
 L;t$
AWAVAUATUS1
D$|9D$x
L;|$0tOH
L;|$0u
[]A\A]A^A_
ATUSH
([]A\A]
fffff.
AUATUSH
X[]A\A]
 []A\
AVAUATI
]A\A]A^
[]A\A]A^H
AWAVA
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
([]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AUATUH
[]A\A]A^A_
[]A\A]A^A_
AVAUATI
([]A\A]A^A_
([]A\A]A^A_
AVAUATI
([]A\A]A^A_
([]A\A]A^A_
AWAVI
AUATUH
h[]A\A]A^A_
AWAVI
AUATUH
h[]A\A]A^A_
AVAUATUSH
]A\A]A^
AUATUSH
[]A\A]
AVAUM
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AUATI
C tZH
8[]A\A]
8[]A\A]
fffff.
C tSH
8[]A\A]
8[]A\A]
AWAVI
AUATI
[]A\A]A^A_
AWAVI
[]A\A]A^A_
AWAVAUI
uxATUH
[]A\A]A^A_
fffff.
[]A\A]
0[]A\
0[]A\
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
fffff.
[]A\A]A^
[]A\A]A^
[]A\A]
AVAUATUH
[]A\A]A^A_
AUATI
8[]A\A]
8[]A\A]
fffff.
[]A\A]
AUATI
8[]A\A]
8[]A\A]
[]A\A]
ffff.
0[]A\
fffff.
AVAUATI
0[]A\A]A^
0[]A\A]
[]A\A]A^
fffff.
AUATUH
h[]A\A]A^A_
fffff.
AVAUATUH
[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
fffff.
H[]A\A]
l$ SH
[]A\A]
AVAUATI
h[]A\A]A^A_
fffff.
AVAUI
0[]A\A]A^
AVAUI
0[]A\A]A^
AVAUI
0[]A\A]A^
fffff.
AUATI
8[]A\A]
8[]A\A]
[]A\A]
fffff.
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AUATI
8[]A\A]
8[]A\A]
AUATU
C wcH
X[]A\A]
E$0FbBH
E(0FbB
E$0FbB
E(0FbB
fffff.
fffff.
fffff.
fffff.
fffff.
AUATI
8[]A\A]
8[]A\A]
fffff.
AUATI
8[]A\A]
8[]A\A]
fffff.
8[]A\A]A^A_
AVAUATUH
D$$9D$ 
[]A\A]A^A_
AUATUH
D$49D$ 
[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
AUATUS1
[]A\A]A^A_
 L;d$Ht
AVAUATI
D$#t2H
GP9C(
[]A\A]A^A_
H;D$Pt$H
AUATI
8[]A\A]
8[]A\A]
fffff.
AVAUATI
0[]A\A]A^
fffff.
AVAUATI
0[]A\A]A^
fffff.
fffff.
AUATI
8[]A\A]
8[]A\A]
fffff.
fffff.
AVAUATI
0[]A\A]A^
ATUSH
AUATI
8[]A\A]
8[]A\A]
AVAUATUH
P[]A\A]A^
P[]A\A]A^
[]A\A]A^
AVAUI
[]A\A]A^
AVAUATI
@[]A\A]A^
AVAUATI
[]A\A]A^
[]A\A]A^
AWAVI
ATUSH
[]A\A]A^A_
fffff.
AUATI
8[]A\A]
fffff.
AVAUATI
[]A\A]A^
[]A\A]A^
P[]A\A]A^
fffff.
[]A\A]
fffff.
AUATI
8[]A\A]
8[]A\A]
[]A\A]
fffff.
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUI
0[]A\A]A^
AVAUI
0[]A\A]A^
AVAUI
0[]A\A]A^
AVAUI
0[]A\A]A^
0[]A\
AUATUSH
[]A\A]
[]A\A]
fffff.
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AWAVI
AUATI
8[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AUATI
8[]A\A]
8[]A\A]
AWAVAUATUH
X[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AUATI
0[]A\A]A^
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AVAUI
0[]A\A]A^
AVAUATUH
[]A\A]A^A_
AWAVI
AUATI
X[]A\A]A^A_
X[]A\A]A^A_
AWAVI
H[]A\A]A^A_
H[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AUATI
@[]A\A]A^
@[]A\A]A^
AVAUATUH
[]A\A]A^A_
AWAVAUATUSH
8[]A\A]A^A_
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
p[]A\A]A^
p[]A\A]A^
AVAUATUH
[]A\A]A^A_
[]A\A]A^
[]A\A]A^
AVAUATUH
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
[]A\A]A^
[]A\A]A^
AVAUATUH
[]A\A]A^A_
0[]A\
0[]A\
ATUSH
T$ E1
`[]A\A]A^
fffff.
AWAVAUATUSH
l$0E1
X[]A\A]A^A_
X[]A\A]A^A_
fffff.
[]A\H
AWAVAUATI
x H;{
J0H+B
[]A\A]A^A_
L;k8wBH
AVAUATI
[]A\A]A^
fffff.
AWAVAUATUSH
8[]A\A]A^A_
ATUSH
0[]A\
0[]A\
ATUSH
0[]A\
0[]A\
ATUSH
0[]A\
0[]A\
ATUSH
0[]A\
0[]A\
ATUSH
 []A\
 []A\
ATUSH
AVAUI
D$pE1
I;l$xs.
I;l$xr
H[]A\A]A^A_
H[]A\A]A^A_
ffffff.
AWAVAUATUH
9]8~"
X[]A\A]A^A_
X[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
fffff.
AUATUSH
([]A\A]
|$ E1
([]A\A]
fffff.
AUATUSH
([]A\A]
([]A\A]
fffff.
AWAVAUATI
[]A\A]A^A_
ATUSH
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
ATUSH
 []A\
AWAVAUI
[]A\A]A^A_
fffff.
AWAVAUI
x[]A\A]A^A_
x[]A\A]A^A_
ffff.
AVAUI
@[]A\A]A^
AUATI
X[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
T$0E1
l$0M#~
AWAVAUATUSH
X[]A\A]A^A_
fffff.
AVAUATUSH
[]A\A]A^
[]A\A]A^
AVAUATUSH
P[]A\A]A^
P[]A\A]A^
ATUSH
AUATUSH
8[]A\A]
8[]A\A]
8[]A\A]
fffff.
ATUSH
 []A\
 []A\
 []A\
ATUSH
([]A\A]
AUATUSH
d$@E1
[]A\A]A^
AUATUSH
[]A\A]
[]A\A]
[]A\A]
[]A\A]
fffff.
AUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUI
ATUSH
HcC(H
[]A\A]A^A_
HcS(H
C$t}D9
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
AUATUSH
[]A\A]
[]A\A]A^
]A\A]
8[]A\A]
8[]A\A]
fffff.
AWAVAUI
ATUSH
[]A\A]A^A_
cP[]A\
fffff.
AWAVAUATUSH
[]A\A]A^A_
t$0fD
D$4E1
L$6fD
T$8fD
AWAVAUATI
[]A\A]A^A_
ATUSH
ATUSH
 []A\
 []A\
AWAVAUATUSH
[]A\A]A^A_
ATUSH
AVAUATUSH
T$0Hi
@[]A\A]A^
f USH
[]A\A]A^A_
AVAUATUSH
@[]A\A]A^
ATUSH
0[]A\
0[]A\
ATUSH
ATUSH
0[]A\
0[]A\
AWAVAUATUSH
[]A\A]A^A_
P[]A\A]A^
P[]A\A]A^
P[]A\A]A^
P[]A\A]A^
w AUI
[]A\A]A^A_
x[]A\A]
@[]A\
fffff.
fffff.
fffff.
tb[]A\
AUATUSH
([]A\A]
([]A\A]
80t|H
ATUSH
s0tWH
AWAVAUATI
[]A\A]A^A_
x I;}
x I;|$
J0H+B
ATUSH
0[]A\
0[]A\
ATUSH
 []A\
 []A\
 []A\
ATUSH
 []A\
 []A\
 []A\
ATUSH
@[]A\
@[]A\
ATUSH
@[]A\
@[]A\
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^D
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
[]A\H
AUATUH
[]A\A]
[]A\A]
AWAVAUATUH
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVAUATUSH
T$$E1
x[]A\A]A^A_
AWAVAUATUH
|$@E1
|$PE1
H;t$ 
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
fffff.
ATUSH
ATUSH
AUATUSH
[]A\A]
ATUSH
AUATUSH
[]A\A]
AUATUSH
[]A\A]
AUATUSH
[]A\A]
]A\A]
]A\A]
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUATUSH
l$htP
[]A\A]A^A_
AWAVAUATUSH
l$htP
[]A\A]A^A_
fffff.
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
]A\A]A^H
ATUSH
AVAUATUSH
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
fffff.
AWAVI
8[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
D$0E1
AWAVAUATUSH
@8;D$
l$(I9
l$0I9
[]A\A]A^A_
@[]A\
@[]A\
AVAUATUH
x H;{
[]A\A]A^A_
S@vnH
L;c8wBH
fffff.
 []A\
[]A\A]
8[]A\A]A^A_
8[]A\A]A^A_
AWAVA
8[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AVAUI
[]A\A]A^A_
8[]A\A]
8[]A\A]
AVAUI
[]A\A]A^A_
fffff.
AVAUATUSH
D$PE1
[]A\A]A^A_
AVAUATI
[]A\A]A^
t$@E1
AUATUH
l$ E1
[]A\A]A^A_
AUATUH
[]A\A]A^A_
l$ E1
fffff.
AVAUI
[]A\A]A^
t$ E1
H;D$ H
AWAVAUI
[]A\A]A^A_
d$@E1
l$0E1
D$@H9D$0
d$ E1
\$@t[H
[]A\A]A^A_
AUATI
[]A\A]A^A_
L;c8wBH
AWAVA
AUATI
[]A\A]A^A_
AUATUH
x H;{
h[]A\A]
AVAUATUSH
P H;S
@[]A\A]A^
wOL;k8
AWAVAUI
[]A\A]A^A_
fffff.
AWAVAUATUH
[]A\A]A^A_
fffff.
AVAUATUH
0[]A\A]A^
AWAVI
ATUSH
[]A\A]A^A_
fffff.
AWAVAUI
ATUSH
[]A\A]A^A_
fffff.
AWAVAUI
ATUSH
x H;{
H[]A\A]A^A_
L;s8wBH
AVAUATI
P[]A\A]A^
s0H+C
S@vwH
H;k8wBH
AWAVAUI
K0H+C
8[]A\A]A^A_
wGL;{8
AWAVAUATL
K0H+C
8[]A\A]A^A_
wGL;s8
AWAVAUA
K0H+C
8[]A\A]A^A_
wGL;{8
AWAVAUI
x H;~
K0H+C
8[]A\A]A^A_
wOL;{8
x H;{
8[]A\A]
8[]A\A]
AWAVAUI
x H;~
K0H+C
8[]A\A]A^A_
wOL;{8
x H;{
K0H+C
0[]A\A]A^
0[]A\A]A^
AWAVI
AUATUH
I#4$H
x H;{
K0H+C
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUA
K0H+C
8[]A\A]A^A_
wGL;{8
AWAVI
AUATI
[]A\A]A^A_
H[]A\A]
fffff.
l$ E1
AWAVA
[]A\A]A^A_
x H;{
x H;{
K0H+C
S@v}H
L;c8wBH
[]A\H
AVAUATUSH
[]A\A]A^A_
L;c8wBH
D$PE1
x H;{
AWAVI
AUATUSH
[]A\A]A^A_
|$ E1
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
fffff.
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUA
[]A\A]A^A_
Yd$8M
AWAVAUATUH
[]A\A]A^A_
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
fffff.
AVAUATUH
[]A\A]A^
A;D$xf
fffff.
AUATUSH
X[]A\A]
X[]A\A]
X[]A\A]
fffff.
ATUSH
h[]A\A]
fffff.
AVAUATUH
[]A\A]A^
AVAUATU
[]A\A]A^A_
E;w8A
D$ |O
fffff.
AWAVAUATI
[]A\A]A^A_
L;c8wBH
fffff.
AWAVM
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
A;Ex}8I
AWAVAUATUH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
[]A\A]A^
AVAUATUSH
[]A\A]A^
AWAVAUATUH
[]A\A]A^A_
Hc4$I
D$PE1
AWAVA
AUATU
[]A\A]A^A_
AWAVA
AUATA
[]A\A]A^A_
AUATUH
[]A\A]A^
[]A\A]A^
&v5E1
AVAUATI
[]A\A]A^A_
ATUSH
D$ t]<
[]A\A]A^
AWAVAUATI
x H;{
[]A\A]A^A_
L;{8v
L;c8v
AVAUATUH
@[]A\A]A^
t$ E1
@[]A\A]A^
AUATI
[]A\A]A^
H;k0v
AUATI
[]A\A]A^
H;k0v
D$<9D$8
D$<9D$8}o
[]A\A]A^A_
AUATUSH
[]A\A]A^A_
D$ E1
"L$aH
D$ E1
T$`E1
AWAVAUI
D$8+D$0L
D$<+D$4L
[]A\A]A^A_
AWAVI
[]A\A]A^A_
AVAUATUH
P[]A\A]A^
P[]A\A]A^
x H;{
K0H+C
P[]A\A]A^
AUATI
8[]A\A]
AWAVI
AUATI
[]A\A]A^A_
AWAVAUE
[]A\A]A^A_
AWAVAUI
t$(dH
x H;}
[]A\A]A^A_
8[]A\A]
AWAVAUATI
[]A\A]A^A_
[]A\A]
[]A\A]
[]A\A]
AUATI
[]A\A]
[]A\A]
AWAVAUATUH
[]A\A]A^A_
tIUSH
AWAVAUATUSH
[]A\A]A^A_
fffff.
AWAVAUATUSH
[]A\A]A^A_
\$_I9
\$puaH
AUATUSH
x[]A\A]
AUATUH
<	t$<
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AVAUI
L$ht=
[]A\A]A^
[]A\A]A^
AWAVAUATI
[]A\A]A^A_
([]A\A]A^A_
fffff.
AWAVAUATUH
[]A\A]A^A_
H8L+HHD
AWAVAUATUSH
[]A\A]A^A_
 H;l$
x H;{
 H;l$
ATUSH
0[]A\
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
AVAUA
ATUSH
x H;}
[]A\A]A^
\$pE1
[]A\A]A^
AVAUATUSH
[]A\A]A^
l$0E1
D$8E1
AWAVAUATUSH
[]A\A]A^A_
.D$ z
.D$0z
.D$4z	
.D$p@
.L$ r>
.D$$r,A
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
D$pt	<
L;d$8
|$(E1
D$`f.
fffff.
AVAUATUH
[]A\A]A^
[]A\A]A^
AVAUATE1
@[]A\A]A^
ATUSH
ATUSH
0[]A\
0[]A\
AWAVAUATUH
M;l$8uwA
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
fffff.
[]A\A]A^A_
AUATUSH
[]A\A]
[]A\A]
AVAUATI
0[]A\A]A^
[]A\A]A^
AVAUATI
[]A\A]A^A_
fffff.
AWAVAUA
[]A\A]A^A_
A;FxL
[]A\H
[]A\H
AWAVAUATUH
[]A\A]A^A_
x H;{
K0H+C
$H;C8wFH
AWAVAUI
[]A\A]A^A_
AWAVM
A\A]A^A_
[]A\A]A^A_
]A\A]
([]A\A]
[]A\A]
[]A\A]
AVAUI
ATUSH
[]A\A]A^A_
[]A\A]A^A_L
ffffff.
[]A\A]
[]A\A]
[]A\A]
[]A\A]L
[]A\A]
AWAVM
([]A\A]A^A_
AUATI
8[]A\A]
ffffff.
H[]A\A]
AWAVAUATUSH
[]A\A]A^A_
ATUSH
T$PH9B
T$PH9B
[]A\A]A^A_
fffff.
[]A\A]A^A_
D$pE1
D$pE1
D$$~vI
D$pE1
AVAUA
[]A\A]A^A_
H;F rT
H;F s
L;c8wBH
T$@E1
x H;{
y H;{
D$(w@
D$(w!
AVAUATL
T$(t H
[]A\A]A^A_
p[]A\
0[]A\
0[]A\
AUATUSH
H[]A\A]
H[]A\A]
fffff.
fffff.
AVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
;^x}sH
D$0E1
\$0E1
AWAVAUATUSH
[]A\A]A^A_
AWAVI
AUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
X[]A\A]A^A_
ATUSH
@[]A\
@[]A\
ATUSH
AVAUATUSH
[]A\A]A^
[]A\A]A^
ATUSH
 []A\
 []A\
AUATUSH
8[]A\A]
8[]A\A]
AVAUATUSH
@[]A\A]A^
@[]A\A]A^
AVAUATUSH
[]A\A]A^
[]A\A]A^
ATUSH
[]A\1
[]A\H
ATUSH
AUATUSH
[]A\A]
AUATI
[]A\A]
T$0E1
[]A\A]
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
ATUSH
[]A\1
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
QLcMp
QLcMp
fffff.
AVAUATUSH
[]A\A]A^
[]A\A]A^
AVAUATUSH
[]A\A]A^
[]A\A]A^
AUATUSH
([]A\A]
([]A\A]
fffff.
fffff.
ATUSH
ATUSH
@[]A\
T$ E1
@[]A\
AUATUSH
8[]A\A]
8[]A\A]
AVAUI
ATUSH
[]A\A]A^
ATUSH
0[]A\
0[]A\
0[]A\
fffff.
AVAUATUSH
@[]A\A]A^
fffff.
ATUSH
`[]A\
`[]A\
ATUSH
`[]A\
`[]A\
ATUSH
@[]A\
@[]A\
ATUSH
P[]A\
P[]A\
ATUSH
0[]A\
0[]A\
ATUSH
0[]A\
0[]A\
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
ATUSH
0[]A\
0[]A\
<$t8H
0[]A\
XL$ L
AUATUSH
X[]A\A]
X[]A\A]
fffff.
AUATUSH
H[]A\A]
H[]A\A]
H[]A\A]
AVAUATUSH
`[]A\A]A^
`[]A\A]A^
<$t8H
0[]A\
AUATUSH
x[]A\A]
t$ E1
x[]A\A]
AUATUSH
x[]A\A]
x[]A\A]
$s]E1
x[]A\A]
.d$Pr
.D$XA
ATUSH
.T$ r
.D$(@
fffff.
AUATUSH
[]A\A]
.D$ rU
.\$(A
ATUSH
P[]A\
P[]A\
.D$0z:u8
.D$@z*u(
.D$8z
AVAUATUSH
p[]A\A]A^
p[]A\A]A^
fffff.
AUATUSH
8[]A\A]
8[]A\A]
8[]A\A]
AUATUSH
[]A\A]
[]A\A]
\D$ f
\D$(f
AVAUATUH
[]A\A]A^
d$`E1
[]A\A]A^
\D$`f
\D$hf
AWAVAUATUH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AUATUH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_H
[]A\A]A^A_
X[]A\A]A^A_
AUATUSH
([]A\A]
([]A\A]
ATUSH
[]A\H
AUATUH
H[]A\A]
H[]A\A]
AWAVAUI
ATUSH
H[]A\A]A^A_
H[]A\A]A^A_
H[]A\A]A^A_
d$8E1
$ucD;t$
AWAVAUATUSH
h[]A\A]A^A_
l$XE1
h[]A\A]A^A_
h[]A\A]A^A_
uYD;t$
AUATUSH
[]A\A]
[]A\A]
[]A\A]
AVAUATUSH
0[]A\A]A^
0[]A\A]A^
fffff.
AUATUSH
[]A\A]
[]A\A]
AUATUSH
([]A\A]
t$hD9
([]A\A]
AUATUSH
([]A\A]
([]A\A]
([]A\A]
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
x[]A\A]A^A_
x[]A\A]A^A_
fffff.
AUATUSH
[]A\A]
[]A\A]
[]A\A]
AUATUSH
8[]A\A]
8[]A\A]
8[]A\A]
AVAUATUSH
@[]A\A]A^
T$ E1
@[]A\A]A^
:.t#1
@[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
|$RE1
t$PfD
D$TfD
L$VfD
T$XfD
fffff.
AVAUATUSH
 []A\A]A^
 []A\A]A^
fffff.
AUATUSH
[]A\A]H
[]A\A]
AUATUSH
([]A\A]
([]A\A]
AVAUATUSH
[]A\A]A^
[]A\A]A^
ATUSH
AVAUATUSH
[]A\A]A^1
]A\A]A^
[]A\A]A^
AVAUATUH
D$xdH3
[]A\A]A^
[]A\A]
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
AWAVI
x[]A\A]A^A_
x[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
C@tiH
9SPt[M
AWAVI
AUATUSH
[]A\A]A^A_
|$`H)
fffff.
AWAVI
ATUSH
P 9J s
T$,E1
[]A\A]A^A_
T$,E1
ATUSH
@[]A\
@[]A\
@[]A\
AWAVI
[]A\A]A^A_
D$pE1
l$@E1
D$pE1
l$@E1
l$@E1
l$0E1
D$pE1
l$@E1
D$pE1
ffff.
ffff.
AUATI
AUATI
ffff.
ffff.
ffff.
fffff.
ffff.
fffff.
ffff.
ffff.
ffff.
ffff.
fffff.
ffff.
fffff.
ffff.
ffff.
ffff.
ffff.
ffff.
fffff.
ffff.
ffff.
ffff.
fffff.
ffff.
ffff.
AVAUI
ATUSH
[]A\A]A^
AVAUI
ATUSH
[]A\A]A^
ffff.
ATUSH
[]A\A]
[]A\A]
ATUSH
[]A\A]
[]A\A]
AVAUI
0[]A\A]A^
AVAUI
 []A\A]A^
AVAUI
 []A\A]A^
L$Ht7
AUATI
([]A\A]
AVAUATI
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
ATUSH
[]A\A]
 ATUSH
[]A\A]
ATUSH
[]A\A]
[]A\A]
ATUSH
[]A\A]
ATUSH
>[]A\H
A]A^H
L$Ht7
L$Ht7
L$Ht7
L$Ht7
AUATUSH
[]A\A]
[]A\A]
ATUSH
L$Ht7
ATUSH
L$Ht7
L$Ht7
L$Ht7
w AUI
}h]A\A]A^
AWAVL
w8AUATUH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]
[]A\A]
t	<	t-
AWAVAUI
ATUSH
[]A\A]A^A_
AVAUATUH
[]A\A]A^
wFL;k0
AVAUATUH
[]A\A]A^
wFL;k0
AVAUATUH
[]A\A]A^
wNL;k0
AVAUATUH
[]A\A]A^
wNL;k0
ATUSH
t4H;G
[]A\A]
AUATI
[]A\A]
w AUI
}h]A\A]A^
AWAVL
w8AUATUH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]
AWAVAUATUH
([]A\A]A^A_
[]A\A]
AWAVAUI
H[]A\A]A^A_
AUATI
[]A\A]
[]A\A]
ATUSH
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
L9<$v
AVAUATUH
x H;{
[]A\A]A^
wNL;k0
AVAUATUH
x H;{
[]A\A]A^
wFL;k0
AUATI
8[]A\A]
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
AWAVAUI
ATUSH
[]A\A]A^A_
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
AWAVAUATI
([]A\A]A^A_
AWAVAUI
[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
AWAVAUATI
[]A\A]A^A_
AWAVAUI
L;uhwyM9
u`v1L
H;]`r
([]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
L;c0w:H
AWAVI
AUATUSH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
ATUSH
[]A\A]
0[]A\
ffff.
ATUSH
[]A\A]
ATUSH
[]A\A]
AWAVAUATUSH
H[]A\A]A^A_
L;c0w:J
AUATI
[]A\A]
[]A\A]
t5[]A\
<	ttH
AWAVL
w8AUATUH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
td[]A\
[]A\A]A^
AWAVAUI
ATUSH
[]A\A]A^A_
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]
[]A\A]A^
w AUI
}h]A\A]A^
AWAVAUATUH
[]A\A]A^A_
[]A\A]A^A_
AWAVI
AUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
L;c0v
[]A\A]
AVAUI
wpH;W
[]A\A]A^A_
AUATUSH
[]A\A]
S8v^H
H;k0v
[]A\A]
[]A\A]
AWAVI
AUATI
[]A\A]A^A_
L;c8wBH
L$ t;H
AWAVAUATUSH
([]A\A]A^A_
L;s0v
AWAVAUATUSH
([]A\A]A^A_
L;s0v
AVAUATUSH
([]A\A]A^A_
L;k8wBH
AWAVAUATUSH
@H9,$
[]A\A]A^A_
AUATUSH
[]A\A]A^
[]A\A]
[]A\A]
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ATUSH
E []A\A]A^
AVAUI
ATUSH
G trL
[]A\A]A^A_
AUATUSH
G toL
F []A\A]A^
AVAUI
pATUSH
E thL
[]A\A]A^A_
ATUSH
[]A\H
A]A^H
fffff.
AVAUI
ATUSH
[]A\A]A^A_
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
ffff.
AVAUI
pATUSH
E thL
[]A\A]A^A_
AVAUI
pATUSH
[]A\A]A^A_
AVAUI
pATUSH
[]A\A]A^A_
fffff.
ffffff.
AUATI
[]A\H
A]A^H
AUATUSH
[]A\A]A^
A\A]A^H
AWAVI
AUATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
AUATUSH
[]A\A]A^
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUATUSH
@H9,$
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AUATUSH
[]A\A]A^
AVAUI
ATUSH
[]A\A]A^
AWAVAUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AUATI
[]A\A]A^
[]A\A]A^
$[]A\A]A^
AUATUSH
[]A\A]A^
[]A\A]
[]A\A]
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AUATI
[]A\A]
[]A\A]
[]A\A]
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AUATI
[]A\A]
[]A\A]
[]A\A]
AWAVAUATUSH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AVAUI
ATUSH
C0v2L
H;k0r
H[]A\A]A^A_
 L;l$
C0v5L
H;k0r
D$ H9D$
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUATUSH
@H9l$
([]A\A]A^A_
AWAVAUI
ATUSH
C0v1L
H;k0r
H[]A\A]A^A_
 L;t$
C0v2L
L;c0r
AVAUATUSH
[]A\A]A^A_
 []A\A]A^
 []A\A]A^
AWAVAUI
$H9D$
[]A\A]A^A_
AWAVAUI
$H9D$
[]A\A]A^A_
AWAVAUM
H[]A\A]A^A_
fffff.
fffff.
AUATUH
[]A\A]
[]A\A]
fffff.
AUATUH
[]A\A]
[]A\A]
fffff.
AWAVAUI
ATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^A_
fffff.
AVAUATUH
[]A\A]A^
fffff.
AWAVAUATUSH
([]A\A]A^A_
AUATUSH
[]A\A]A^A_
.D$pz
0[]A\
AVAUATI
 []A\A]A^
 []A\A]A^
AWAVI
AUATUSH
D$(@u
h[]A\A]A^A_
h[]A\A]A^A_
AVAUATI
h[]A\A]A^A_
AWAVAUATUH
\$0tKH
x[]A\A]A^A_
AWAVAUATUH
\$0tKH
x[]A\A]A^A_
ATUSH
 []A\
 []A\
fffff.
tgUSH
AVAUATUSH
D$8@u
x[]A\A]A^A_
x[]A\A]A^A_
AVAUI
0[]A\A]A^
AWAVAUATUH
\$0tKH
[]A\A]A^A_
AWAVAUATUH
\$0tKH
[]A\A]A^A_
AWAVAUATUH
\$0tKH
[]A\A]A^A_
AWAVAUATUH
\$0tKH
[]A\A]A^A_
AWAVAUATUH
\$0tKH
[]A\A]A^A_
AWAVAUATUH
\$0tKH
[]A\A]A^A_
AWAVAUATUH
\$0tKH
[]A\A]A^A_
AUATUSH
X[]A\A]
AUATUSH
X[]A\A]
AUATUSH
X[]A\A]
AUATUSH
X[]A\A]
AUATUSH
X[]A\A]
AUATUSH
X[]A\A]
AUATUSH
X[]A\A]
AVAUATI
[]A\A]A^A_
AWAVI
AUATI
A\A]M
A\A]A^A_
ffff.
ffff.
8[]A\A]A^A_
[]A\A]A^A_
C`@uM
[]A\A]A^
AVAUI
wuH;W
[]A\A]A^
AUATUH
[]A\A]
w^L;k0v
ATUSH
ATUSH
ATUSH
ATUSH
ATUSH
ATUSH
ATUSH
AUATI
[]A\A]
[]A\A]
[]A\A]
fffff.
fffff.
E(u$H
t![]A\
[]A\1
[]A\1
fffff.
fffff.
fffff.
fffff.
AUATUSH
[]A\A]A^
[]A\A]A^
[]A\A]A^1
AWAVAUATI
x[]A\A]A^A_
x[]A\A]A^A_
x[]A\A]A^A_
|$PE1
ATUSH
H[]A\A]
H[]A\A]
[]A\A]
fffff.
AWAVAUI
[]A\A]A^A_
fffff.
AVAUATUSH
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
fffff.
AWAVAUI
[]A\A]A^A_
AUATI
8[]A\A]
8[]A\A]
[]A\A]A^
[]A\A]A^
fffff.
AVAUATUH
0[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AUATUH
|$@E1
[]A\A]A^A_
\$PE1
fffff.
AVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVM
[]A\A]A^A_
D$ E1
AWAVAUI
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
[]A\A]
AVAUATUSH
[]A\A]A^A_
AWAVAUA
K0H+C
H[]A\A]A^A_
S@vnH
L;c8v
H[]A\A]A^A_
H[]A\A]A^A_
AUATUH
K0H+C
([]A\A]
H;k8v
([]A\A]
([]A\A]
AVAUATUH
x H;~
K0H+C
 []A\A]A^
S@vfH
H;k8v
 []A\A]A^
 []A\A]A^
AVAUI
0[]A\A]A^
0[]A\A]A^
AVAUATUSH
y H;}
H[]A\A]A^A_
H[]A\A]A^A_
S@vfH
L;k8v
AVAUATUSH
y H;}
H[]A\A]A^A_
H[]A\A]A^A_
S@vfH
L;k8v
AWAVI
AUATUSH
([]A\A]A^A_
AVAUI
[]A\A]A^
AVAUATI
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
AWAVAUATI
HcK(L
[]A\A]A^A_
AWAVI
AUATUH
[]A\A]A^A_
AUATUSH
P[]A\A]A^
P[]A\A]A^
P[]A\A]A^
AWAVI
AUATI
A\A]M
A\A]A^A_
AWAVI
AUATI
A\A]M
A\A]A^A_
ATUSH
GxtlL
[]A\L
ATUSH
GxtlL
8A\A]H
AVAUI
ATUSH
[]A\A]A^
ATUSH
[]A\A]
t<H;G
[]A\A]
[]A\A]A^
[]A\A]A^
AVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
AUATI
|$ H9
[]A\A]
fffff.
fffff.
AWAVAUATUSH
[]A\A]A^A_
fffff.
AUATUH
[]A\A]A^
AWAVAUATUSH
h[]A\A]A^A_
h[]A\A]A^A_
 L;d$
AWAVAUATUSH
8[]A\A]A^A_
[]A\A]A^A_
AWAVAUATA
([]A\A]A^A_
([]A\A]A^A_
[]A\A]
[]A\A]
t6[]A\
AUATI
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
H0+P,+H(
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
ffffff.
`tjw@
AUATUSH
([]A\A]
[]A\A]
[]A\A]
l$ H;
[]A\A]
AWAVAUATUSH
\$pu#H
[]A\A]A^A_
L$hE1
T$ E1
\$ E1
D9|$8
D9d$\
L$(E1
D$ E1
fffff.
AVAUATUSH
H[]A\A]A^A_
[]A\A]
[]A\A]
AUATUH
h[]A\A]
h[]A\A]
h[]A\A]
AVAUATSH
[A\A]A^A_]
H[]A\A]
AWAVAUATUSH
G4+G,H
W0+W(H
D9d$P
D$X9D$x
[]A\A]A^A_
D$X9D$|
D$X9D$x
AVAUATI
[]A\A]A^
]A\A]A^
[]A\A]A^
AWAVAUATI
[]A\A]A^A_
F4A+F,H
V0A+V(H
AWAVA
AUATI
D$0L9
[]A\A]A^A_
L$PHi
L$@Hi
AUATUSH
D;i u
[]A\A]A^A_
|$ Mc
HcD$(
t$(Hc
D;X u
AUATUSH
X[]A\A]
AUATUH
[]A\A]
AVAUATI
[]A\A]A^
AUATL
X[]A\A]A^A_
ATUSH
D$ H9D$8
[]A\A]A^A_
AWAVI
AUATU
\$(u.H
|$ E1
D$(E1
L$8Ic
D;l$(
D;d$H
[]A\A]A^A_
D;d$HI
AWAVI
AUATUS1
([]A\A]A^A_
AWAVAUATUH
([]A\A]A^A_
AWAVAUI
[]A\A]A^A_
L$PE1
L$OE1
L$ E1
L$pE1
AVAUI
x[]A\A]A^A_
\$0fA
AWAVI
L$ E1
x[]A\A]A^A_
AVAUI
x[]A\A]A^A_
AVAUI
x[]A\A]A^A_
D9|$$w
AWAVI
[]A\A]A^A_
[]A\A]A^A_
AWAVI
AUATUSH
D$(L9
H[]A\A]A^A_
L$0Hi
L$0Hi
[]A\A]
ATUSH
[]A\A]
ATUSH
[]A\A]
A8[]A\
A8[]A\
I8[]A\
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
A8[]A\
A8[]A\
I8[]A\
AUATA
D$LE1
[]A\A]A^A_
AVAUE
ATUSH
[]A\A]A^A_
D$<+D$8H
D$0E)
AVAUI
|$XE1
[]A\A]A^A_
D$ E1
AUATUH
x[]A\A]
AWAVI
[]A\A]A^A_
[]A\A]A^A_
AVAUI
[]A\A]A^
fffff.
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
I;Ghr
I;Ghr
fffff.
AUATUH
[]A\A]A^
AVAUA
[]A\A]A^
fffff.
H;C v
ATUSH
H9k`t
H9kXu
([]A\A]A^A_
AWAVAUATUSH
L9kXt5L9k`t/H
[]A\A]A^
L9kXtHL9k`A
[]A\A]A^A_
AWAVI
AUATUSH
M;~0H
8[]A\A]A^A_
M+} A
MPH)U@H
H[]A\A]A^A_
H[]A\A]A^A_
D$(t.I
[]A\A]A^A_
L;Z r
AWAVAUA
[]A\A]A^A_
fffff.
ATUSH
T$ H9S@t
$H9C ty1
AVAUATUSH
[]A\A]A^
AVAUATI
EDxCH
[]A\A]A^
AVAUATA
dH34%(
[]A\A]A^
[]A\A]A^
AWAVAUI
X[]A\A]A^A_
fffff.
AVAUATL
[]A\A]A^A_
u8ATU1
AUATUH
[]A\A]A^
[]A\A]1
out gl_PI
erVertex
	vec4H
 gl_PosiH
tion;
fffff.
AWAVAUATUSH
[]A\A]A^A_
Hct$$H
D$@B9D*
L$(dH3
AUATI
[]A\A]
[]A\A]
fffff.
o@ATI
[]A\A]
AVAUATI
dH34%(
[]A\A]A^A_
AWAVAUI
X[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
H9D$H
H9D$H
AWAVAUATA
D$3dH
[]A\A]A^A_
D$Pf.
H9D$8
 H9T$
H9D$8
fffff.
AWAVI
AUATI
X[]A\A]A^A_
X[]A\A]A^A_
L9|$(
AVAUATUSH
[]A\A]A^A_
H9D$(
L9d$8
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
fffff.
I;T$ps/I
I;T$pr
ATUSH
kX[]A\
fffff.
<@AVA
AUATI
h[]A\A]A^A_
h[]A\A]A^A_
h[]A\A]A^A_
|$`A;7ufD
[]A\A]A^A_
AVAUATUH
 []A\A]A^
AWAVAUI
x[]A\A]A^A_
\$ M9
AVAUATI
8[]A\A]A^A_
AVAUL
}H]A\A]A^H
[]A\A]A^
[]A\A]A^
AWAVAUATU
[]A\A]A^A_
[]A\A]A^A_
AVAUATUH
([]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
AVAUATI
l$(fE
D$ E1
[]A\A]A^A_
AWAVAUATUH
[]A\A]A^A_
C=vMH
[]A\A]A^A_H
AVAUATM
8[]A\A]A^A_
fffff.
[]A\A]A^A_
ATUSH
([]A\A]A^A_
fffff.
fffff.
[]A\A]
AWAVAUI
ATUSH
([]A\A]A^A_
fffff.
E<t!H
 []A\
 []A\
fffff.
AWAVAUATUSH
D$0A;
C=9D$
X[]A\A]A^A_
X[]A\A]A^A_
X[]A\A]A^A_
X[]A\A]A^A_
|$,E1
AVAUATUH
D$<tW
H[]A\A]A^A_
fffff.
AVAUATUH
D;ktu
D;cxtQ
[]A\A]A^A_
ATUSH
ATUSH
ATUSH
AUATUSH
[]A\A]
H9W8uz
ATUSH
AVAUATUSH
[]A\A]A^
AUATUSH
`D;k8|
{0IcD$
{4IcD$
D$ Hc
{0IcD$
D$,Hc
{4IcD$
`D;k8
[]A\A]
AWAVAUATUSH
HcE8H
`D9u8
[]A\A]A^A_
ATUSH
AWAVAUATUSH
t$(dH34%(
8[]A\A]A^A_
AWAVAUATUSH
([]A\A]A^A_
AVAUATUSH
[]A\A]A^
AVAUATUSI
[]A\A]A^
AWAVAUATUSH
t$(H)
HcD$ I
HcD$ I
dH34%(
[]A\A]A^A_
AWAVAUATUSH
~&D;e
8[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
AWAVAUATUSH
x[]A\A]A^A_
AWAVAUATUSH
<$Hc<
T$8D)
X[]A\A]A^A_
AWAVAUATUSH
H[]A\A]A^A_
AWAVAUATUSH
l$XD)
l$ Hc
D$$fA
|$8Hc
D$$fA
[]A\A]A^A_
AWAVAUATUSH
T$xD)
T$xD)
[]A\A]A^A_
AWAVAUATUSH
T$hD)
T$hD)
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
HcS8H
D9C8~]H
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D;cdw
[]A\A]A^A_
AWAVAUATUSH
HcSxH
SdHcsxH
IcAxIc
`D;E8|
SdHcsxH
`D;U8
[]A\A]A^A_
AWAVAUATUSH
HcS8H
GhHcS8H
`D;c8|
[]A\A]A^A_
AWAVAUATUSH
k,;k0
D9O<~
([]A\A]A^A_
AWAVAUATUSH
D$<A;
HcT$8L
HcC(M
t$89p8
H[]A\A]A^A_
HcG8H
`D;K8|
AWAVAUATUSH
Q@HcS
9\$,v*A
H+D$@H
D$8+D$ H
D$<+D$$+D$x
9\$,r5
Hc@(H
[]A\A]A^A_
AWAVAUATUSH
D$0A;F0
D$89D$<
|$89|$<v
T$(Hc
A;D$L|
IcD$(M
A9D$<
D$89D$<
D$0A9F0
X[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
|$PA+9A
([]A\A]
AWAVAUATUSH
C 9C(r
[]A\A]A^A_
AVAUATUSH
D+c$A9
[]A\A]A^
AUATUSH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
u=Hc0H
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
T$(H9
0[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AVAUATUSH
[]A\A]A^
ATUSL
AWAVAUATUSH
t$@Hc
t$ Hc
|$`Hc
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D$HI9
P[]A\A]A^A_
AWAVAUATUSH
 []A\A]A^A_
AWAVAUATUSL
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D$<L)
[]A\A]A^A_
AWAVAUATUSH
T$ H9
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
ATUSL
AWAVAUATUSH
A9D$8
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
AVAUATUSA
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
-;C<u
AWAVAUATUSI
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
D$pH9D$0
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
E;t$<u&
D;r<u
[]A\A]A^
AWAVAUATUSH
8[]A\A]A^A_
AWAVAUATUSI
M []A\A]A^A_
AWAVAUATUSH
|$(dH
[]A\A]A^A_
AWAVAUATUSH
D$ H9D$
H[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
d$ E9
D$8(9D$$
X[]A\A]A^A_
AUATUSH
[]A\A]
AUATUSH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSI
[]A\A]A^A_
AUATUSH
d$@A)
[]A\A]
AUATUSH
[]A\A]
<%u	A
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
t&H;k
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSI
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSI
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSI
[]A\A]A^
AWAVAUATUSH
k 9l$
([]A\A]A^A_
AUATUSH
[]A\A]
tyIcH
AWAVAUATUSH
Ic^4H
<HcD$
8[]A\A]A^A_
AWAVAUATUSH
8[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
D$$fA
D$ fA
DD$ fA
8[]A\A]A^A_
AWAVAUATUSH
Ic\$4I
D$(Hc@
9D$(A
L$(Hc
|$8Hc
X[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
HcS8H
AWAVAUATUSH
D$ 9D$,
H[]A\A]A^A_
AVAUATUSI
[]A\A]A^
ATUSH
AWAVAUATUSH
[]A\A]A^A_
ATUSH
AUATUSH
[]A\A]
taATUSH
AWAVAUATUSH
|$X@u
[]A\A]A^A_
<urD	
AWAVAUATUSH
Dkd$$MA
D$HdH3
X[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D$4+D$8
L$H+L$LH
L$H+L$LH
t$ D)
X[]A\A]A^A_
AWAVAUATUSH
+D$pA9
9D$x~
\$ H9\$
\$(H9\$
8[]A\A]A^A_
ATUSH
ATUSH
AWAVAUATUSH
([]A\A]A^A_
AVAUATUSH
 []A\A]A^
AWAVAUATUSH
X[]A\A]A^A_
AWAVAUATUSH
h[]A\A]A^A_
ATUSH
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
D$HdH3
P[]A\A]A^
AWAVAUATUSH
D$8dH3
H[]A\A]A^A_
AUATUSH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
8H;l$(
8[]A\A]A^A_
AVAUATUSI
[]A\A]A^
AWAVAUATUSH
 L;d$
([]A\A]A^A_
AWAVAUATUSH
 L;d$
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
tJUSH
AUATUSH
x[]A\A]
AWAVAUATUSH
h[]A\A]A^A_
AUATUSH
F	@tcI
[]A\A]
tdATUSH
F	@tCI
F	@t(
AUATUSH
TADIu
RDHIu
ETLPu
TADIuJ
DGKbu
MRHcu
AMAgu
TSIhu
sFFou
LACpu
LACsu
sYHpu
TIBsu
BGRsu
PCCiu
TLPsu
tXEtu
EMItu
SNRtu
tXTzu
tXTiu
[]A\A]
AUATUSH
TADIt
([]A\A]
AUATUSH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
RDHIu
DNEIu
TADIu"E
TADIu)E
ETLPu
DGKbu
MRHcu
AMAgu
TSIhu
sFFou
LACpu
LACsu
sYHpu
TIBsu
BGRsu
PCCiu
TLPsu
tXEtu
EMItu
SNRtu
tXTzu
tXTiu
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
[]A\A]
ATUSH
AUATUSH
([]A\A]
AUATUSH
[]A\A]
AUATUSH
[]A\A]
ATUSH
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
AVAUATUSH
[]A\A]A^
ATUSH
AUATUSH
[]A\A]
ATUSH
AWAVAUATUSH
\$(Ic
E83u	B
D;d$ ~
`D;d$ 
d$,D)
8[]A\A]A^A_
ATUSH
ATUSH
AUATUSH
[]A\A]
AWAVAUATUSH
([]A\A]A^A_
AVAUATUSD
[]A\A]A^
AWAVAUATUSD
u6fD9
[]A\A]A^A_
AWAVAUATUSL
[]A\A]A^A_
AVAUATUSL
[]A\A]A^
AVAUATUSD
@8(u	H
u)D8X
[]A\A]A^
AUATUS
[]A\A]
dH34%(
9vMHc
ATUSH
 []A\
D$XdH3
ATUSH
fixed poH
int overH
flow in H
AWAVAUATUSH
([]A\A]A^A_
AUATUSH
[]A\A]
ATUSH
ATUSH
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
D$8dH3
@[]A\A]A^
AWAVAUATUSH
t<fD9
fE;}"s
[]A\A]A^A_
ATUSH
ATUSH
AWAVAUATUSH
D$$-Hq
D$(-x
[]A\A]A^A_
AUATUSH
[]A\A]
AUATUSH
[]A\A]
AUATUSH
([]A\A]
ATUSH
ATUSH
 []A\
AVAUATUSH
[]A\A]A^
ATUSH
 []A\
ATUSH
 []A\
AWAVAUATUSH
8[]A\A]A^A_
AUATUSH
[]A\A]
ATUSH
 []A\
AVAUATUSH
[]A\A]A^
AUATUSH
[]A\A]
AWAVAUATUSH
([]A\A]A^A_
AUATUSH
TADIt
[]A\A]
ATUSH
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D$(dH3
8[]A\A]A^A_
TADIt
AUATUSH
D$XdH3
h[]A\A]
AWAVAUATUSH
[]A\A]A^A_
ATUSH
AUATUSH
[]A\A]
ATUSH
AUATUSH
[]A\A]
ATUSH
AWAVAUATUSH
t$pdH
RDHIH
D$(dH3
8[]A\A]A^A_
AUATUSH
[]A\A]
TADIH
AMAgH
BGRsH
AWAVAUATUSH
MRHcH
D$HdH3
X[]A\A]A^A_
AUATUSH
[]A\A]
AWAVAUATUSH
<~v1<
; u.H
; u!H
[]A\A]A^A_
AVAUATUSH
PCCiH
PCCiH
0[]A\A]A^
AVAUATUSH
TLPsL
D$(dH3
0[]A\A]A^
AUATUSH
tXEtH
tXEtH
[]A\A]
AVAUATUSH
tXTzH
0[]A\A]A^
AWAVAUATUSH
tXTiH
X[]A\A]A^A_
AVAUATUSH
sFFoL
 []A\A]A^
AWAVAUATUSH
LACpL
D$HdH3
X[]A\A]A^A_
AWAVAUATUSH
LACsL
D$HdH3
X[]A\A]A^A_
AVAUATUSH
sYHpL
 []A\A]A^
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
?E*T>
H9L$ 
HcD$0H
H[]A\A]A^A_
AVAUATUS
?@89u
}C9\$
[]A\D9
AVAUE1
ATUSH
H[]A\A]A^A_
H[]A\A]A^A_
H[]A\A]A^A_
AWAVAUA
ATUSH
}(D)u D)p(u
[]A\A]A^A_
}(D)u D)p(u
u(D)m D)h(u
AWAVAUATUSH
[]A\A]A^A_
m(D)e D)`(u
[]A\A]
[]A\A]
u(D)m D)h(u
AVAUATU
[]A\A]1
t$(E)l$ D)h(
t$(E)l$ D)h(u
u(D)e D)`(u
fffff.
AUATUH
[]A\A]
fffff.
AWAVAUATUH
[]A\A]A^A_
}(E)u D)p(u
@ E)} M
E(D)x(u
[]A\A]A^A_
}(D)u D)p(u
x 9{8
[]A\A]A^A_
u(D)m D)h(u
}(D)u D)p(u
G(E)o D)h(u
}(D)u D)p(
m(D)e D)`(
}(D)u D)p(u
u(D)m D)h(u
ATUHc
AWAVAUATA
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AUATUH
D$ I+D$
[]A\A]
AUATI
[]A\A]
puhATH
AVAUATUSH
t$hdH34%(
x[]A\A]A^A_
E+c L
\$XE)
\$XD)t$
E)sTA
KT;H0s
KT;H@s
\$(E1
\$XtqH
AVAUA
ATUSH
[]A\A]A^A_
E+G H
AUATUSH
[]A\A]
AUATUH
[]A\A]
T$hH)
ffffff.
AVAUATUSH
[]A\A]A^A_
,FD9l$
[]A\A]A^A_
[]A\A]A^A_
AVAUATU
[]A\A]A^A_
]A\A]
AWAVAUATUSH
fA94$re
fA94$D
[]A\A]A^A_
AVAUI
[]A\A]A^
[]A\A]A^
[]A\A]A^H
[]A\A]A^H
fffff.
fffff.
AVAUATUSH
0[]A\A]A^A_
AVAUI
t%</H
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
[A\A]A^]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
ffffff.
[A\A]A^]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]A^]
[A\A]A^]
[A\A]]
[A\A]A^A_]
[A\A]A^]
AWAVAUATA
H[A\A]A^A_]
ffffff.
ffffff.
ffffff.
fffff.
ffff.
ffff.
ffffff.
 [A\]
fffff.
fffff.
fffff.
 [A\]
 [A\]
fffff.
8[A\A]]
[A\A]]
C,[A\]
C,[A\]
AUATL
[A\A]]
fffff.
 [A\A]A^]
 [A\]
 [A\]
ffffff.
([A\A]]
fffff.
fffff.
 [A\A]]
fffff.
fffff.
ffff.
ffff.
AWAVAUATSH
h[A\A]A^A_]
h[A\A]A^A_]
ffffff.
0[A\]
C,[A\]
C,[A\A]]
ffff.
0[A\]
[A\A]A^]
ffffff.
[A\A]]
fffff.
@[A\]
0[A\]
ffff.
AVAUL
0[A\A]A^]
AVAUL
0[A\A]A^]
0[A\A]A^A_]
ffffff.
 [A\A]A^]
fffff.
8[A\A]A^A_]
0[A\A]A^A_]
0[A\A]A^A_]
0[A\A]A^A_]
fffff.
8[A\A]]
8[A\A]]
8[A\A]]
8[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
&YA1[]
fffff.
H[A\A]A^A_]
ffff.
[A\A]A^]
AWAVAUATI
[A\A]A^A_]
[A\A]]
AVAUATSHc
dH3<%(
[A\A]A^]
8[A\A]A^A_]
ffffff.
fffff.
fffff.
t$@A\]
AWAVL
[A\A]A^A_]
fffff.
AWAVL
[A\A]A^A_]
AWAVL
H[A\A]A^A_]
fffff.
`[A\]
p[A\]
[A\A]A^A_]
`[A\]
p[A\]
AWAVAUATI
x[A\A]A^A_]
fffff.
AWAVL
[A\A]A^A_]
ffff.
ffffff.
fffff.
AWAVL
[A\A]A^A_]
AVAUATSH
 [A\A]A^]
ffff.
ffff.
ffffff.
AWAVL
H[A\A]A^A_]
AWAVAUA
A\A]A^A_]A
AWAVAUA
A\A]A^A_]A
AWAVAUA
A\A]A^A_]A
AUATL
h[A\A]]
8[A\A]]
ffff.
ffff.
ffff.
ffffff.
ffff.
0[A\]
ffff.
fffff.
ffff.
fffff.
ffffff.
ffff.
[A\A]]
0[A\]
ffff.
 [A\]
 [A\]
ffff.
AWAVL
([A\A]A^A_]
H[A\A]]
X[A\A]A^]
H[A\A]]
AWAVL
[A\A]A^A_]
fffff.
AWAVI
VUUUA
[A\A]A^A_]
ffff.
VUUUD
ffffff.
AWAVL
AUATSH
[A\A]A^A_]
fffff.
ffffff.
ffff.
fffff.
ffffff.
fffff.
ffff.
ffff.
ffffff.
ffffff.
ffff.
fffff.
ffffff.
ffff.
ffff.
ffff.
[A\A]A^A_]
[A\A^]
AWAVA
([A\A]A^A_]
AWAVAUATS
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
ffffff.
AWAVAUATA
5UUUU
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
ffffff.
AVAUATSH
[A\A]A^A_]
RAUHc
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AVAUATSH
h[A\A]A^A_]
[A\A]A^]
[A\A]A^A_]
~7HcE
[A\A]A^]
[A\A]A^]
fffff.
fffff.
AUATD
([A\A]]
fffff.
AWAVAUATA
[A\A]A^A_]
ffffff.
[A\A]]
A\A]]
[A\A]A^A_]
fffff.
AWAVE
h[A\A]A^A_]
AWAVAUATI
8[A\A]A^A_]
AWAVAUATL
D$@f.
[A\A]A^A_]
AVAUA
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATA
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
ffff.
.us]f
AWAVAUATSH
[A\A]A^A_]
AWAVE1
[A\A]A^A_]
AWAVE
AUATS
[A\A]A^A_]
A\A]A^A_]
A\A]A^A_]
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATI
[A\A]A^A_]
|$ E9
AWAVAUATS
[A\A]A^A_]
AWAVAUATS
9G ~%
[A\A]A^A_]
fffff.
AWAVAUATS
9G ~%
[A\A]A^A_]
AWAVI
AUATSH
[A\A]A^A_]
[A\A]A^A_]
AUATSH
[A\A]A^A_]
[A\A]A^A_]
AUATS
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
[A\A]A^A_]
AWAVL
[A\A]A^A_]
AVATL
[A\A^]
fffff.
AVATL
[A\A^]
[A\A]A^A_]
[A\A]A^A_]
AVAUI
[A\A]A^]
[A\A]A^]
AVAUATI
[A\A]A^A_]
fffff.
AUATL
[A\A]A^A_]
AVAUATSH
Pt-E1
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
AUATS
AUATS
[A\A]A^A_]
AUATSH
X[A\A]A^A_]
A\A]A^A_]
AVAUATSH
h[A\A]A^A_]
AUATI
 [A\A]A^]
 [A\A]A^]
fffff.
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
fffff.
AVAUATSH
[A\A]A^A_]
/ATSE
[A\A]A^A_]
AVAUATI
([A\A]A^A_]
[A\A]A^A_]
AUATI
[A\A]A^]
[A\A]A^]
A\A]A^]
A\A]A^]
A\A]A^]
A]A^]
A]A^]
A\A]A^]
A\A]A^]
A\A]A^]
AWAVA
AUATI
h[A\A]A^A_]
h[A\A]A^A_]
fffff.
AWAVAUI
h[A\A]A^A_]
h[A\A]A^A_]
fffff.
AUATS
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
fffff.
AWAVH
[A\A]A^A_]
[A\A]A^]
AWAVI
AUATSH
8[A\A]A^A_]
AWAVAUI
0[A\A]A^A_]
AWAVAUI
A;}$|
A;M(|
@[A\A]A^A_]
AWAVAUI
A;}$|
A;M(|
P[A\A]A^A_]
AUATA
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
[A\A]]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
AWAVAUATSH
A+V$Hc
[A\A]A^A_]
A+V$Hc
E+n$Mc
fffff.
SPB8t
0[A\]
SPB8t
H[A\A]A^A_]
AWAVH
AUATSH
H[A\A]A^A_]
D+k$Mc
D+{$Mc
+S$Hc
AVAUATI
SPB8t)H
[A\A]A^A_]
VUUUH
+S$Hc
+S$Hc
+S$Hc
+S$Hc
+K$Hc
+K$Hc
+K$Hc
+K$Hc
[A\A]A^]
MIB8t
[A\A]]
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
< u0L
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
[A\A]A^A_]
A+V$Hc
E+N$Mc
([A\A]A^A_]
+S$Hc
+S$Hc
+S$Hc
D+C$Mc
D+C$Mc
D+C$Mc
([A\A]A^A_]
A+W$Hc
A+W$Hc
A+W$Hc
A+W$Hc
E+G$Mc
E+G$Mc
E+G$Mc
E+G$Mc
([A\A]A^A_]
AWAVAUI
8[A\A]A^A_]
A+D$$H
E+L$$Mc
A+T$$Hc
E+L$$Mc
A+D$$H
E+L$$Mc
AVAUATSH
X[A\A]A^A_]
A+V$Hc
E+N$Mc
E+g$Mc
A+W$Hc
 [A\A]A^]
A+D$$H
[A\A]A^]
A+D$$H
[A\A]A^]
A+D$$H
[A\A]A^]
ffffff.
A+D$$H
[A\A]A^]
ffffff.
AUATSf
A+D$$H
[A\A]A^]
[A\A]A^]
$A+D$$H
[A\A]A^]
A+E$H
[A\A]A^]
A+E$H
[A\A]A^]
A+D$$H
[A\A]A^]
A+D$$H
[A\A]A^]
A+D$$H
[A\A]A^]
A+L$$Hc
[A\A]A^]
A+L$$Hc
[A\A]A^]
ffff.
AWAVL
[A\A]A^A_]
([A\A]A^A_]
x[A\A]A^A_]
AWAVA
[A\A]A^A_]
x[A\A]A^A_]
x[A\A]A^A_]
[A\A]A^]
[A\A]A^]
[A\A]A^]
[A\A]A^]
+S$Hc
AWAVAUA
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
fffff.
[A\A]]
H[A\A]A^A_]
H[A\A]A^A_]
AWAVAUATSH
0[A\A]A^A_]
fffff.
ffffff.
AWAVAUATE1
+S$Hc
+S$Hc
+S$Hc
[A\A]A^A_]
[A\A]A^A_]
A\A]A^]
+S$Hc
+S$Hc
+S$Hc
+S$Hc
+S$Hc
+S$Hc
AWAVH
[A\A]A^A_]
[A\A]A^A_]
AVAUH
[A\A]A^]
[A\A]A^]
AWAVH
[A\A]A^A_]
[A\A]A^A_]
AWAVH
[A\A]A^A_]
[A\A]A^A_]
ffffff.
AVAUATI
[A\A]A^]
[A\A]A^]
fffff.
D+g$E
D+g$A9
;+S$H
AWAVA
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
fffff.
AWAVAUATE1
[A\A]A^A_]
D+k$E
AUATSH
[A\A]]
HcC$9
[A\A]]
[]A\A]
fffff.
AVAUI
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
fffff.
fffff.
AWAVAUATI
[]A\A]A^A_
AVAUATUH
[]A\A]A^
[]A\A]A^
AWAVI
[]A\A]A^A_
AVAUI
[]A\A]A^A_
AUATUSH
 L9t$
([]A\A]A^A_
fffff.
[]A\A]D
fffff.
fffff.
t|vb=
AVAULc
[]A\A]A^
D$ E1
H[]A\A]A^A_
AVAUATI
[]A\A]A^A_
AUATI
[]A\A]A^A_
[]A\A]
AVAUATI
[]A\A]A^A_
AVAUI
ATUSH
[]A\A]A^
[]A\A]A^
fffff.
ATUSH
[]A\A]
[]A\A]
 []A]
 []A]
 []A\A]A^
 []A\A]A^
AWAVAUATI
t$ t;M
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUI
ATUSH
} t'M
([]A\A]A^A_
I#U H
([]A\A]A^A_
 [A\A]
 [A\A]
AWAVAUI
[]A\A]A^A_
[]A\A]A^A_
Ph[]D
A\A]A^
AVAUI
ATUSH
[]A\A]A^A_
fffff.
AVAUATUSH
h[]A\A]A^A_
h[]A\A]A^A_
h[]A\A]A^A_
AVAUATI
[]A\A]A^A_
AWAVAUATUSH
X[]A\A]A^A_
X[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
L9t$ 
L9t$ 
AVAUI
ATUSH
H[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
tk[]A\
ts[]A\
ts[]A\
tk[]A\
ts[]A\
0[]A\A]A^
0[]A\A]A^
Jj H9
fffff.
fffff.
AUATI
[]A\A]
fffff.
c []A\
c []A\
AVAUATUH
8[]A\A]A^A_
ATUSH
[]A\A]
fffff.
\$0I;mht
[]A\A]
fffff.
H9]ptkH
fffff.
AVAUATUSH
t`I;_`tqH
[]A\A]A^A_
[]A\A]A^A_
I;_`H
ATUSH
AVAUATI
[]A\A]A^
AUATUSH
([]A\A]
AWAVAUATUH
L;mhwfJ
8[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
AWAVAUATUSH
kxs7I
H;khwY
k`s-H
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
fffff.
fffff.
AWAVI
[]A\A]A^A_
AWAVI
[]A\A]A^A_
ATUSH
[]A\A]
[]A\A]
AUATI
[]A\A]
Cp[]A\
AWAVI
AUATI
X[]A\A]A^A_
X[]A\A]A^A_
X[]A\A]A^A_
X[]A\A]A^A_
X[]A\A]A^H
D$(w&H
X[]A\A]A^A_
X[]A\A]A^A_
AWAVI
AUATUSH
8[]A\A]A^A_
8[]A\A]A^A_
H;ZHu
L;B@u
tBH;G
H;A0@
tHH;G
H;A0@
AUATUH
?[]A\H
A]A^H
H;XHu
L;@@u
[]A\A]A^
H;PHu
L;@@u
H;ZHu
L;B@u
[]A\A]A^
H;PHu
L;@@u
[]A\A]A^
tBH;S
H;V0@
tHH;S
L;HHu
L;H@u
tAH;s
tGH;s
H;zHu
H;B@u
tBH;s
H;q0@
tHH;s
tBH;S
H;Q0@
tHH;S
L;@Hu
L;P@u
L;BHu
L;J@u
H;V0@
H;q0@
H;Q0@
ATUSH
tAL;O
tGL;O
[]A\A]
ATUSH
tCH;w
H;q0A
tIH;w
H;q0A
fffff.
[]A\A]
A9Q r
fffff.
[]A\A]A^A_
fffff.
[]A\A]A^1
[]A\A]A^A_
H)G0H
G0H9G s8Hc
C H9C0w
fffff.
[]A\A]A^A_
[]A\A]A^A_
fffff.
AVAUATUSH
[]A\A]A^
[]A\A]A^
[]A\A]A^
AWAVAUATUSH
([]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AUATS
[A\A]A^A_]
AVAULc
ATSHc
[A\A]A^A_]
AVAUATLc
A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
t LcW
fffff.
u	[A\]
 t[Hc
P[A\A]A^]
fffff.
[A\A]]
[A\A]]
AVAUATSH
[A\A]A^A_]
AVAUL
[A\A]A^]
AVAUATSH
[A\A]A^A_]
AVAUATSH
[A\A]A^A_]
AWAVI
AUATSH
IcE$H
B IcU0
[A\A]A^A_]
AUATSH
E(9E 
HcE Hc
HcE0H
H[A\A]A^A_]
X[A\A]A^A_]
fffff.
AWAVI
([A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
[A\A]A^A_]
)D$ ~UL
[A\A]A^A_]
AVAUATI
[A\A]A^A_]
AWAVAUATSH
tVHcA
[A\A]A^A_]
AWAVAUATSH
[A\A]A^A_]
AWAVAUATI
l$ Mc|$(J
[A\A]A^A_]
[A\A]A^A_]
AWAVAUI
[A\A]A^A_]
e@McuHI
[A\A]A^A_]
[A\A]A^A_]
AWAVAUATSH
8[A\A]A^A_]
([A\A]A^A_]
[A\A]A^]
[A\A]]
[A\A]A^]
[A\A]]
AVAUATSH
s Lc{(L
[A\A]A^A_]
s Lc{(L
s Lc{(L
AWAVA
AUATSH
l$@L9
l$@Mct$HM
[A\A]A^A_]
t$@Mc|$HL
D$8I9
l$@Mct$HM
ffffff.
AWAVI
AUATI
[A\A]A^A_]
AVAUATI
<Rt<<Pt`<S
H[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AVAUATI
[]A\A]A^A_
fffff.
AUATUSH
[]A\A]A^A_
[]A\A]
AUATI
[]A\A]
[]A\A]
AWAVAUI
[]A\A]A^A_
fffff.
ffffff.
AWAVI
AVAUI
ffffff.
AWAVAUATSH
[A\A]A^A_]
AWAVI
([]A\A]A^A_
[]A\A]A^A_
 []A\
 []A\
ATUSH
[]A\A]A^
AUATI
T$8H)
[]A\A]A^A_
[]A\A]A^A_
ffffff.
AVAUI
[]A\A]A^
AVAUATUSH
ttIcG
8[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVE1
H[]A\A]A^A_
AWAVAUATI
X[]A\A]A^A_
D$@L9
D$8L9
X[]A\A]A^A_
D$@I9
D$8I9
AWAVAUATUSH
X[]A\A]A^A_
[]A\A]A^A_
D$ H9
^ t+H
fffff.
t$H9h
H9*tgH
ffff.
AVAUATI
0[]A\A]A^
scaleformui
N9Scaleform8ListNodeINS_6Render7TextureEEE
N9Scaleform15NewOverrideBaseILi72EEE
23CSplitScreenAddedConVar
N9Scaleform12RefCountImplE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi72EEE
N9Scaleform12RefCountBaseINS_6Render7TextureELi72EEE
N9Scaleform6Render7TextureE
N9Scaleform6Render12RenderBuffer16RenderTargetDataE
?RemoveElement
cl_teammate_color_1
cl_teammate_color_2
cl_teammate_color_3
cl_teammate_color_4
cl_teammate_color_5
_array_
_name_
RequestElement
dev_scaleform_debug
_dlc%d.%s
Failed to load %s
UpdateSafeZone
SetToControllerUI
UpdateTint
KeyDownEvent
KeyUpEvent
CharTyped
LockInputToSlot
UnlockInput
ValveKeyTable
KEY_NONE
KEY_0
KEY_1
KEY_2
KEY_3
KEY_4
KEY_5
KEY_6
KEY_7
KEY_8
KEY_9
KEY_A
KEY_B
KEY_C
KEY_D
KEY_E
KEY_F
KEY_G
KEY_H
KEY_I
KEY_J
KEY_K
KEY_L
KEY_M
KEY_N
KEY_O
KEY_P
KEY_Q
KEY_R
KEY_S
KEY_T
KEY_U
KEY_V
KEY_W
KEY_X
KEY_Y
KEY_Z
KEY_PAD_0
KEY_PAD_1
KEY_PAD_2
KEY_PAD_3
KEY_PAD_4
KEY_PAD_5
KEY_PAD_6
KEY_PAD_7
KEY_PAD_8
KEY_PAD_9
KEY_PAD_DIVIDE
KEY_PAD_MULTIPLY
KEY_PAD_MINUS
KEY_PAD_PLUS
KEY_PAD_ENTER
KEY_PAD_DECIMAL
KEY_LBRACKET
KEY_RBRACKET
KEY_SEMICOLON
KEY_APOSTROPHE
KEY_BACKQUOTE
KEY_COMMA
KEY_PERIOD
KEY_SLASH
KEY_BACKSLASH
KEY_MINUS
KEY_EQUAL
KEY_ENTER
KEY_SPACE
KEY_BACKSPACE
KEY_TAB
KEY_CAPSLOCK
KEY_NUMLOCK
KEY_ESCAPE
KEY_SCROLLLOCK
KEY_INSERT
KEY_DELETE
KEY_HOME
KEY_END
KEY_PAGEUP
KEY_PAGEDOWN
KEY_BREAK
KEY_LSHIFT
KEY_RSHIFT
KEY_LALT
KEY_RALT
KEY_LCONTROL
KEY_RCONTROL
KEY_LWIN
KEY_RWIN
KEY_APP
KEY_UP
KEY_LEFT
KEY_DOWN
KEY_RIGHT
KEY_F1
KEY_F2
KEY_F3
KEY_F4
KEY_F5
KEY_F6
KEY_F7
KEY_F8
KEY_F9
KEY_F10
KEY_F11
KEY_F12
KEY_CAPSLOCKTOGGLE
KEY_NUMLOCKTOGGLE
KEY_SCROLLLOCKTOGGLE
MOUSE_LEFT
MOUSE_RIGHT
MOUSE_MIDDLE
MOUSE_4
MOUSE_5
MOUSE_WHEEL_UP
MOUSE_WHEEL_DOWN
KEY_XBUTTON_UP
KEY_XBUTTON_RIGHT
KEY_XBUTTON_DOWN
KEY_XBUTTON_LEFT
KEY_XBUTTON_A
KEY_XBUTTON_B
KEY_XBUTTON_X
KEY_XBUTTON_Y
KEY_XBUTTON_LEFT_SHOULDER
KEY_XBUTTON_RIGHT_SHOULDER
KEY_XBUTTON_BACK
KEY_XBUTTON_START
KEY_XBUTTON_STICK1
KEY_XBUTTON_STICK2
KEY_XBUTTON_INACTIVE_START
KEY_XSTICK1_RIGHT
KEY_XSTICK1_LEFT
KEY_XSTICK1_DOWN
KEY_XSTICK1_UP
KEY_XBUTTON_LTRIGGER
KEY_XBUTTON_RTRIGGER
KEY_XSTICK2_RIGHT
KEY_XSTICK2_LEFT
KEY_XSTICK2_DOWN
KEY_XSTICK2_UP
KEY_XBUTTON_RELOAD
KEY_XBUTTON_TRIGGER
KEY_XBUTTON_PUMP_ACTION
KEY_XBUTTON_ROLL_RIGHT
KEY_XBUTTON_ROLL_LEFT
joystick
SetCursorShape
BaseSlot::Init(%s,%d)
_global
PlatformCode
wantControllerShown
UISlot
GameInterface
InitSlot
ForceResize
Error loading %s!
BaseSlot::Unload slot=%d
ShutdownSlot
AddInputConsumer
RemoveInputConsumer
ShowCursor
HideCursor
LoadKVFile
SaveKVFile
SetConvar
GetConvarNumber
GetConvarNumberMin
GetConvarNumberMax
GetConvarString
GetConvarBoolean
GetPAXAvatarFromName
GetPlayerColorObject
ReplaceGlyphs
PlaySound
ConsoleCommand
ConsoleCommandExecute
DisableAnalogStickNavigation
DenyInputToGame
SendUIEvent
MakeStringSafe
GetClipboardText
SetClipboardText
Actionscript passed an undefined param to BaseSlot::GetPlayerColorObject!
scaleform: script called GetPAXAvatarFromName with %d args
scaleform: script called GetPAXAvatarFromName with bad first argument
demo_avatars/CSGO_AVATAR_%d.dds
scaleform: script called setconver with %d args
scaleform: script called setconver with bad first argument
scaleform: illegal attempt to set %s to type number# 0x%x
Attempted to remove SF Global Object which is not installed!
Invalid file name passed to DLCHelper::AppendDLCKeyValues (%s)
scaleform: script called GetConvar* with %d args
scaleform: script called GetConvar* with bad first argument
KEY_XBUTTON_FIREMODE_SELECTOR_1
KEY_XBUTTON_FIREMODE_SELECTOR_2
KEY_XBUTTON_FIREMODE_SELECTOR_3
SF Global Object %s has NULL table!
SF Global Object %s is already installed!
Actionscript passed an undefined param to BaseSlot::Translate!
N9Scaleform3GFx5Value15ObjectInterface10ObjVisitorE
N9Scaleform3GFx5Value15ObjectInterface10ArrVisitorE
8BaseSlot
9MovieSlot
17FlashArrayVisitor
18FlashObjectVisitor
`@cl_mouseenable
FALSE
cursortimeout
ScaleformUIImpl::ShowCursor  want=%d  cl_mouseenable=false InnerShowCursor
ScaleformUIImpl::ShowCursor  want=%d  cl_mouseenable=false
ScaleformUIImpl::HideCursor  want=%d  cl_mouseenable=true  InnerHideCursor
ScaleformUIImpl::HideCursor  want=%d  cl_mouseenable=%s
Seconds before mouse cursor hides itself due to inactivity
10CursorSlot
sfuievent
action
-customswf
%.*s%s%s
-customswf: %s
CUtlFixedMemory overflow!
CUtlRBTree overflow!
sf4_meshcache_stats
Scaleform IME
sfuievent action=%s data=%d slot=%d
materials/vgui/avatar_default_64.vtf
Invalid or corrupt default avatar image (%s)
Failed to read the default avatar image file (%s)
materials/vgui/inventory_default.vtf
Invalid or corrupt default inventory image (%s)
Failed to read the default inventory image file (%s)
Avatar image for user %llX reloaded
Error getting avatar image: playerID(%llu), iIndex(%d)
We failed to update the inventory image for item %llX
Error getting inventory image: iItemID(%llu), iIndex(%d)
We failed to update the chrome HTML image for item %llX
Error getting chrome HTML image: imageID(%llu), iIndex(%d)
CUtlLinkedList overflow! (exhausted index range)
CUtlLinkedList overflow! (exhausted memory allocator)
We failed to load the avatar image for user %llX
Avatar image for user %llX cached [refcount=%d]
Avatar image for user %llX released [refcount=%d]
Inventory image for item %llX cached [refcount=%d]
We failed to load the inventory image for item %llX
Inventory image for item %llX released [refcount=%d]
Chrome HTML image for id %llX cached [refcount=%d]
Chrome HTML image for id %llX released [refcount=%d]
Outputs Scaleform 4 mesh cache stats
8safezonex
-ignoreswf
-sfstats
SteamClient017
SteamUser019
SteamFriends015
SteamUtils008
SteamMatchMaking009
SteamMatchMakingServers002
SteamNetworking005
SteamController003
STEAMUGC_INTERFACE_VERSION008
STEAMINVENTORY_INTERFACE_V001
STEAMVIDEO_INTERFACE_V001
ScaleformUI002
SDLMgrInterface001
ShaderDeviceMgr001
VEngineClient014
GAMEEVENTSMANAGER002
ShaderApi029
english
resource/flash/fontlib.swf
fontlib
Arial
Normal
bolditalic
italicbold
safezoney
Scales hud elements
hud_scaling
sf_ui_tint
dev_scaleform_verbose_toggle
dev_scaleform_verbose_on
dev_scaleform_verbose_off
STEAMUSERSTATS_INTERFACE_VERSION011
STEAMAPPS_INTERFACE_VERSION008
STEAMREMOTESTORAGE_INTERFACE_VERSION013
STEAMSCREENSHOTS_INTERFACE_VERSION002
STEAMHTTP_INTERFACE_VERSION002
STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001
STEAMAPPLIST_INTERFACE_VERSION001
STEAMMUSIC_INTERFACE_VERSION001
STEAMMUSICREMOTE_INTERFACE_VERSION001
STEAMHTMLSURFACE_INTERFACE_VERSION_003
VENGINE_GAMEUIFUNCS_VERSION005
ScaleformUI missing expected interface
resource/flash/fontmapping.cfg
resource/flash/fontlib_extra.swf
The percentage of the screen width that is considered safe from overscan
The percentage of the screen height that is considered safe from overscan
The current tint applied to the Scaleform UI
Enable/disable Scaleform verbose mode.
Enable Scaleform verbose mode.
Disable Scaleform verbose mode.
10IAppSystem
N9Scaleform12SysAllocBaseE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi2EEE
N9Scaleform12RefCountBaseINS_3LogELi2EEE
N9Scaleform12RefCountBaseINS_3GFx5StateELi2EEE
N9Scaleform3GFx5StateE
N9Scaleform3GFx13ActionControlE
N9Scaleform3GFx14FileOpenerBaseE
N9Scaleform3GFx15ZlibSupportBaseE
N9Scaleform3GFx9ASSupportE
13CCallbackBase
16IUIMarshalHelper
12IScaleformUI
14CBaseAppSystemI12IScaleformUIE
15CTier0AppSystemI12IScaleformUIE
15CTier1AppSystemI12IScaleformUILi0EE
15CTier2AppSystemI12IScaleformUILi0EE
15CTier3AppSystemI12IScaleformUILi0EE
13CCallbackImplILi12EE
9CCallbackI15ScaleformUIImpl20PersonaStateChange_tLb0EE
15CCallbackManualI15ScaleformUIImpl20PersonaStateChange_tLb0EE
13CCallbackImplILi20EE
9CCallbackI15ScaleformUIImpl19AvatarImageLoaded_tLb0EE
15CCallbackManualI15ScaleformUIImpl19AvatarImageLoaded_tLb0EE
15ScaleformUIImpl
Y?33s?
?MovieView_CreateObject(%s) called with numArgs different than SFVALUEARRAY size
r_drawscaleform
ScaleformUIImpl::InitSlot( %d, %s) refcount=%d
ScaleformUIImpl::RequestElement( %d, %s)
ScaleformUIImpl::InstallGlobalObject( %d, %s)
ScaleformUIImpl::DenyInputToGameFromFlash(%d,%d) m_SlotDeniesInputRefCount[%d]=%d 
ScaleformUIImpl::DenyInputToGame(%d)
undefined
array
displayobject
closure
convertboolean
convertint
convertuint
convertnumber
convertstring
convertstringw
Param %d: %s (%s) 
N9Scaleform6Render18ThreadCommandQueueE
28IShaderDeviceDependentObject
28CScaleFormThreadCommandQueue
15DeviceCallbacks
INPUTSWAPAB
menu_cancel
menu_select
confirm
options
scripts/controller_options.txt
Index out of range for SFVALUEARRAY
Value_Invoke(%s) called with numArgs=%i but SFVALUEARRAY size=%i
ScaleformUIImpl::Value_GetDisplayInfo: Passed a null typed Value*!
ScaleformUIImpl::Value_SetDisplayInfo: Passed a null typed Value*!
N9Scaleform12RefCountBaseINS_3GFx10ASUserDataELi2EEE
N9Scaleform3GFx10ASUserDataE
N9Scaleform12RefCountBaseINS_3GFx15FunctionHandlerELi2EEE
N9Scaleform3GFx15FunctionHandlerE
;SF: 
SF (Debug): 
SF (Render): 
SF (Script): 
SF (Parse): 
SF (Action): 
img://stringtables:
InfoPanel
img://loadfile:
img://loadjpeg:
img://avatar_
img://inventory_
img://itemdata_
img://chrome_
imgps://chrome_
Scaleform
ScaleformScript
ScaleformParse
ScaleformAS
Error: GFxLoader cannot open '%s' for writing. writing is not supported
Error: GFxLoader failed to open '%s'
N9Scaleform13FileConstantsE
N9Scaleform12RefCountBaseINS_4FileELi2EEE
N9Scaleform4FileE
18CScaleformSysAlloc
18ScaleformUILogging
18ScaleformClipboard
26ScaleformTranslatorAdapter
22ScaleformMovieUserData
31ScaleformFunctionHandlerAdapter
19ScaleformFileOpener
22CScaleformImageCreator
23ScaleformCallbackHolder
14SFUIMemoryFile
FmtStrVSNPrintf truncated to %d without QUIET_TRUNCATION specified!
CUtlBlockMemory overflow!
SFText_TextBoxList
13ISFTextObject
19TextBoxArrayVisitor
16SFTextObjectImpl
8CFmtStrNILi256ELb0EE
ImageFormat %d not supported by ScaleformUIImage, using RGBA8888!
N9Scaleform20RefCountBaseStatImplINS_13RefCountVImplELi3EEE
N9Scaleform13RefCountBaseVINS_6Render5ImageELi3EEE
N9Scaleform6Render9ImageBaseE
N9Scaleform6Render13ImageDelegateE
16ScaleformUIImage
sv_reliableavatardata
22ScaleformUIAvatarImage
26ScaleformUIChromeHTMLImage
25ScaleformUIInventoryImage
{}()':
%i %i %i %i
FCVAR_NEVER_AS_STRING
"%s" = "%s"
 ( def. "%s" )
 min. %f
 max. %f
"%s" 
%-80s - %.80s
%-80s
client
archive
notify
singleplayer
notconnected
cheat
replicated
server_can_execute
clientcmd_can_execute
ss_added
Warning:  %s = '%s' is infinite, clamping value.
ConVarRef %s doesn't point to an existing ConVar
 [%.3f server clamped to %.3f]
CCommand::Tokenize: Encountered command which overflows the tokenizer buffer.. Skipping!
CCommand::Tokenize: Encountered command which overflows the argument buffer.. Clamped!
InstallChangeCallback called with NULL callback, ignoring!!!
InstallChangeCallback ignoring duplicate change callback!!!
ConVar(%s) defined with infinite float value (%s)
7IConVar
23IConCommandBaseAccessor
14ConCommandBase
10ConCommand
6ConVar
20ConVar_ServerBounded
16CDefaultAccessor
12CEmptyConVar
_client.so
No such file
image not found
_valveinternal
_xlsp
-xlsp
-valveinternal
DLOPEN Error:%s
BuiltDebug
%s/%s
%s/bin/%s
-allowdebug
Module %s is a debug build
CreateInterface
 failed to dlopen %s error=%s
16CDllDemandLoader
(*%s*), 
 ReadToken overflow
<< NULL >>
developer
0x%016llX
%f %f %f %f
%d %d %d %d
#int#
#empty#
update
delete
borrow
int( %d = 0x%X )
float( %f )
ptr( 0x%p )
%ls [wstring, len = %d]
u64( %lld = 0x%llX )
#include
#include is NULL 
#base
#base is NULL 
LoadFromBuffer: missing {
unknown
KeyValues Error: %s in file %s line %d
CKeyValuesTokenReader::SeekBackOneToken: It is only possible to seek back one token at a time
CkeyValuesTokenReader::SeekBackOneToken: No tokens read yet
KeyValues::RecursiveSaveToFile: TODO, missing code for TYPE_COLOR.
KeyValues::SaveToFile: couldn't open file "%s" in path "%s".
KV Conditional Evaluation Error
RecursiveLoadFromBuffer:  recursion overflow
RecursiveLoadFromBuffer:  got EOF instead of keyname
RecursiveLoadFromBuffer:  got empty keyname
RecursiveLoadFromBuffer:  got NULL key
RecursiveLoadFromBuffer:  got } in key
RecursiveLoadFromBuffer:  got conditional between key and value
KeyValues::ParseIncludedKeys: Couldn't load included keyvalue file %s
21IKeyValuesDumpContext
27IKeyValuesDumpContextAsText
29CKeyValuesDumpContextAsDevMsg
0123456789ABCDEF
 bytes
%%.%if%s
,%03d
UCS-2LE
UCS-4LE
UTF-32LE
UTF-8
[url=
steam://openurl/
steam://openurl_external/
%s %s %s %s
</script>
script
&quot;
&apos;
&amp;
&nbsp;
&trade;
&copy;
&reg;
&ndash;
&mdash;
&euro;
&iexcl;
&cent;
&pound;
&curren;
&yen;
&brvbar;
&sect;
&uml;
&ordf;
&laquo;
&not;
&shy;
&macr;
&deg;
&plusmn;
&sup2;
&sup3;
&acute;
&micro;
&para;
&middot;
&cedil;
&sup1;
&ordm;
&raquo;
&frac14;
&frac12;
&frac34;
&iquest;
&times;
&divide;
&Agrave;
&Aacute;
&Acirc;
&Atilde;
&Auml;
&Aring;
&AElig;
&Ccedil;
&Egrave;
&Eacute;
&Ecirc;
&Euml;
&Igrave;
&Iacute;
&Icirc;
&Iuml;
&ETH;
&Ntilde;
&Ograve;
&Oacute;
&Ocirc;
&Otilde;
&Ouml;
&Oslash;
&Ugrave;
&Uacute;
&Ucirc;
&Uuml;
&Yacute;
&THORN;
&szlig;
&agrave;
&aacute;
&acirc;
&atilde;
&auml;
&aring;
&aelig;
&ccedil;
&egrave;
&eacute;
&ecirc;
&euml;
&igrave;
&iacute;
&icirc;
&iuml;
&eth;
&ntilde;
&ograve;
&oacute;
&ocirc;
&otilde;
&ouml;
&oslash;
&ugrave;
&uacute;
&ucirc;
&uuml;
&yacute;
&thorn;
&yuml;
&#92;
&#36;
&#35;
[code]
<pre>
[/code]
</pre>
[/h1]
</h1>
[list]
[/list]
</ul>
[/url]
[img]
<img src="
[/img]
"></img>
V_AppendSlash: ran out of space on %s.
V_MakeAbsolutePath: _getcwd failed.
0123456789abcdef
0123456789ABCDEF
,/$`,
?0,/1a,
-&B'-
CUtlBuffer::VaPrintf: String overflowed buffer [%d]
18CUtlCharConversion
21CUtlCStringConversion
19CUtlNoEscConversion
Unaccounted
CUtlSymbol::Find
String %d: ref:%d %s
%d total counted strings.
CUtlSymbol::AddString
EMPTY - ok for slot zero only!
WIN32
WINDOWS
LINUX
POSIX
GAMECONSOLE
LOWVIOLENCE
Conditional Error: %s
Bad expression token: %c
Bad expression operator: '%c%c', expected C style operator
Logic Error in CExpressionEvaluator
APPSYSTEM: In ConnectInterfaces(), s_nRegistrationCount is %d!
Physics2 Interface ActorMgr v0.1
Physics2 Interface ResourceMgr v0.1
MaterialSystemHardwareConfig013
VEngineCvar007
EventSystem001
VProcessUtils002
Physics2 Interface v0.3
VFileSystem017
VNewAsyncFileSystem001
ResourceSystem004
VMaterialSystem080
VMaterialSystem2_001
InputSystemVersion001
InputStackSystemVersion001
NetworkSystemVersion001
RenderDeviceMgr001
SoundSystem001
DebugTextureInfo001
VBAllocTracker001
COLORCORRECTION_VERSION_1
VP4002
VMDLLIB001
QueuedLoaderVersion001
VResourceAccessControl001
VPrecacheSystem001
VStudioRender026
VGUI_ivgui008
VGUI_Input005
VGUI_Panel009
VGUI_Surface031
VGUI_Scheme010
VGUI_System010
Localize_001
MatSystemSurface006
VDataCache003
MDLCache004
VAvi001
VBik001
VDmeMakeFileUtils001
VPhysicsCollision007
VSoundEmitter003
MeshSystem001
RenderDevice001
RenderHardwareConfig001
SceneSystem_001
WorldRendererMgr001
RenderSystemSurface001
MATCHFRAMEWORK_001
GameUISystemMgr001
PanoramaUIEngine001
PanoramaUIClient001
PanoramaTextServices001
IMEManager001
Blending mip%d %dx%d to
   %c=%d ~%d%%
VTFFileBaseHeader_t
VTFFileHeaderV7_1_t
VTFFileHeaderV7_2_t
VTFFileHeaderV7_3_t
VTFFileHeader_t
VTFFileHeaderX360_t
VTFFileHeaderPS3_t
flags
depth
numFrames
preloadDataSize
mipSkipCount
numResources
reflectivity
bumpScale
imageFormat
lowResImageSample
compressedSize
startFrame
numMipLevels
lowResImageFormat
lowResImageWidth
lowResImageHeight
fileTypeString
headerSize
Warning! Encountered old format VTF file; please rebuild it!
** Encountered stale cubemap! Please rebuild the following vtf:
*** Error unserializing VTF file... is the file empty?
*** Tried to load a non-VTF file as a VTF file!
*** Encountered VTF file with an invalid version!
*** Encountered VTF file with an invalid minor version!
*** Encountered VTF file with an invalid full header!
*** Unable to serialize... have no image data!
BlendCubeMapFaceEdges: unsupported image format (%d)
Height and width must be equal for cubemaps!
Depth must be 1 for cubemaps!
Image dimensions must be multiple of 4!
*** Encountered VTF non-square cubemap!
*** Encountered VTF volume texture cubemap!
*** Encountered VTF invalid texture size!
11IVTFTexture
11CVTFTexture
N9Scaleform5MutexE
N9Scaleform6ThreadE
N9Scaleform34Mutex_AreadyLockedAcquireInterfaceE
Loader failed to open '%s'
N9Scaleform3GFx10FileOpenerE
gfxfontlib.swf
N9Scaleform3GFx7FontLibE
N9Scaleform3GFx23DefaultFontLibNameStateE
N9Scaleform12RefCountBaseINS_3GFx18MovieDefBindStatesELi2EEE
N9Scaleform3GFx18MovieDefBindStatesE
N9Scaleform3GFx7FontMapE
N9Scaleform3GFx12ImageCreatorE
N9Scaleform3GFx24ImageFileHandlerRegistryE
Loader failed to open '%s', FileOpener not installe
Failed to load image '
N9Scaleform15NewOverrideBaseILi2EEE
N9Scaleform15RefCountNTSImplE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi2EEE
N9Scaleform15RefCountBaseNTSINS_3GFx16ResourceFileInfoELi2EEE
N9Scaleform3GFx16ResourceFileInfoE
N9Scaleform3GFx8ResourceE
N9Scaleform6Render18WrapperImageSourceE
N9Scaleform6Render8SubImageE
N9Scaleform3GFx12ResourceData13DataInterfaceE
N9Scaleform3GFx13ImageFileInfoE
N9Scaleform3GFx13ImageResource13ImageDelegateE
N9Scaleform3GFx13ImageResourceE
N9Scaleform3GFx16SubImageResourceE
N9Scaleform12RefCountBaseINS_3GFx10LoadStatesELi2EEE
N9Scaleform3GFx10LoadStatesE
N9Scaleform3GFx7LogBaseINS0_11LoadProcessEEE
N9Scaleform3GFx11LoadProcessE
N9Scaleform3GFx24ImageFileResourceCreatorE
N9Scaleform3GFx20ImageResourceCreatorE
N9Scaleform3GFx23SubImageResourceCreatorE
N9Scaleform3GFx19FontResourceCreatorE
Loader failed to open '%s', FileOpener not installed
N9Scaleform3GFx17FileTypeConstantsE
N9Scaleform3GFx10URLBuilderE
N9Scaleform3GFx12ParseControlE
N9Scaleform3GFx8StateBagE
N9Scaleform3GFx6LoaderE
img://
imgps://
Failed to bind SWF file "
Loader failed to open "
" - GFX file format expected
Failed loading SWF file "
Unknown file format at URL "
Failed to load SWF file "
*Bytes@%p*
SWF file is compressed.
Default image loader failed to load '%s'
Image file handler registry is not installed - can't load image data
Can't load image %s - appropriate reader is not installed.
  ExportInfo: tagType = %d, tool ver = %d.%d, imgfmt = %d, prefix = '%s', swfname = '%s', flags = 0x%X
Recursive import detected. Import stack:
Loader read failed - file does not start with a SWF header
SWF File version = %d, File length = %d
Loader - unable to read compressed SWF data; GFxZlibState is not set.
Loader read failed - no mExporterInfo tag in GFX file header
N9Scaleform10MemoryFileE
N9Scaleform3GFx10TranslatorE
N9Scaleform12RefCountBaseINS_3GFx4TaskELi2EEE
N9Scaleform3GFx4TaskE
N9Scaleform12RefCountBaseINS_3GFx12StateBagImplELi2EEE
N9Scaleform3GFx7LogBaseINS0_12StateBagImplEEE
N9Scaleform3GFx12StateBagImplE
N9Scaleform3GFx10LoaderTaskE
N9Scaleform12RefCountBaseINS_3GFx10LoaderImplELi2EEE
N9Scaleform3GFx7LogBaseINS0_10LoaderImplEEE
N9Scaleform3GFx10LoaderImplE
N9Scaleform3GFx18MovieImageLoadTaskE
A| {0:4.4} {1:4.4} {2:4.4} |
| {3:4.4} {4:4.4} {5:4.4} |
    *         +
| {0:4.4} {1:4.4}|
| {2:4.4} {3:4.4}|
| {4:4.4} {5:4.4}|
| {6:4.4} {7:4.4}|
RGBA: {0} {1} {2} {3}
N9Scaleform3GFx7LogBaseINS0_8LogStateEEE
N9Scaleform3GFx8LogStateE
L=-forcepack
.forcepack
MovieView "
_glyphs
$IMECandidateListFont
  ShowFrame
Can't create or decode image.
MovieDef  "
MovieData "
Invalid SWF file: failed to load frame #%d since total frames counter is %d
Invalid SWF file: failed to load init action frame #%d since total frames counter is %d
Import failed - resource '%s' is not exported from movie '%s'
ActionScript version mismatched between main and import '%s' files
Self recursive import detected in '%s'
Note: SWF Frame Rate = %f, Frames = %d
*** no tag loader for type %d
Loader - Stream-end tag hit, but not at the end of the file yet; stopping for safety
gfxfontlib.swf
*ZN9Scaleform3GFx16MovieBindProcess13FinishBindingEvE16ImagePackVisitor
N9Scaleform3GFx11ResourceKey12KeyInterfaceE
N9Scaleform3GFx14ResourceReportE
N9Scaleform3GFx11TimelineDefE
N9Scaleform3GFx8MovieDef15ResourceVisitorE
N9Scaleform3GFx8MovieDefE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi264EEE
N9Scaleform12RefCountBaseINS_3GFx14LoadUpdateSyncELi264EEE
N9Scaleform3GFx14LoadUpdateSyncE
N9Scaleform12RefCountBaseINS_3GFx12MovieDataDef16LoadTaskDataBaseELi264EEE
N9Scaleform3GFx12MovieDataDef16LoadTaskDataBaseE
N9Scaleform3GFx12MovieDataDef12LoadTaskDataE
N9Scaleform3GFx12MovieDataDefE
N9Scaleform12RefCountBaseINS_3GFx12MovieDefImpl12BindTaskDataELi2EEE
N9Scaleform3GFx12MovieDefImpl12BindTaskDataE
N9Scaleform3GFx12MovieDefImplE
N9Scaleform3GFx16MovieBindProcessE
N9Scaleform3GFx10ExecuteTagE
N9Scaleform3GFx18GFxPlaceObjectBaseE
N9Scaleform3GFx20GFxInitImportActionsE
N9Scaleform12RefCountBaseINS_3GFx26GFxMovieDataDefFileKeyDataELi2EEE
N9Scaleform3GFx26GFxMovieDataDefFileKeyDataE
N9Scaleform3GFx31GFxMovieDataDefFileKeyInterfaceE
N9Scaleform12RefCountBaseINS_3GFx18GFxMovieDefImplKeyELi2EEE
N9Scaleform3GFx18GFxMovieDefImplKeyE
N9Scaleform3GFx27GFxMovieDefImplKeyInterfaceE
timer
false
<bad type>
instance{0}
MovieImpl::GotoLabeledFrame('%s') unknown label
N9Scaleform6String10InitStructE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi71EEE
N9Scaleform12RefCountBaseINS_6Render18ShapeDataInterfaceELi71EEE
N9Scaleform6Render18ShapeDataInterfaceE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_13TreeContainer8NodeDataENS0_8TreeNode8NodeDataEEE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_8TreeRoot8NodeDataENS0_13TreeContainer8NodeDataEEE
N9Scaleform6Render8TreeRoot8NodeDataE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi327EEE
N9Scaleform12RefCountBaseINS_3GFx5MovieELi327EEE
N9Scaleform3GFx5MovieE
N9Scaleform6Render19ShapeDataFloatTemplINS_5ArrayIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform6Render14ShapeDataFloatE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_9TreeShape8NodeDataENS0_8TreeNode8NodeDataEEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi327EEE
N9Scaleform15RefCountBaseNTSINS_3GFx17FontManagerStatesELi327EEE
N9Scaleform3GFx9MovieImplE
f@N9Scaleform15NewOverrideBaseILi327EEE
N9Scaleform3GFx16LoadQueueEntryMTE
N9Scaleform3GFx16MoviePreloadTaskE
N9Scaleform3GFx12LoadVarsTaskE
N9Scaleform3GFx25LoadQueueEntryMT_LoadVarsE
N9Scaleform3GFx14LoadBinaryTaskE
N9Scaleform3GFx27LoadQueueEntryMT_LoadBinaryE
_ResourceLib_Images
N9Scaleform12RefCountBaseINS_3GFx15ResourceLibBaseELi2EEE
N9Scaleform3GFx15ResourceLibBaseE
N9Scaleform12RefCountBaseINS_3GFx11ResourceLibELi2EEE
N9Scaleform12RefCountBaseINS_3GFx11ResourceLib12ResourceSlotELi2EEE
N9Scaleform3GFx11ResourceLib12ResourceSlotE
N9Scaleform3GFx11ResourceLibE
N9Scaleform3GFx15ResourceWeakLibE
ImageCreator is null in ImageShapeCharacterDef ctor
Image is null in ImageShapeCharacterDef ctor.
  gradients: numGradients = %d
An image with resource id %d is not found in resource table.
  GFx_ReadFillStyles: count = %d
  GFx_ReadStrokeStyles: count = %d
  GFx_ReadStrokeStyles: count2 = %d
Corrupted shape detected in file %s
  ShapeCharacter read: nfillbits = %d, nlinebits = %d
  ShapeCharacter read: moveto %4g %4g
  ShapeCharacter read: fill0 = %d
  ShapeCharacter read: fill1 = %d
  ShapeCharacter read: line = %d
  ShapeCharacter read: more fill styles
  ShapeCharacter read: curved edge   = %4g %4g - %4g %4g - %4g %4g
  ShapeCharacter read: straight edge = %4g %4g - %4g %4g
Image is not created.
  FillStyle read type = 0x%X
  color: 
  BitmapChar = %d
N9Scaleform12RefCountBaseINS_6Render11ComplexFillELi71EEE
N9Scaleform6Render11ComplexFillE
N9Scaleform6Render15TransformerBaseE
N9Scaleform3GFx21ShapeBaseCharacterDefE
N9Scaleform3GFx13ShapeDataBaseE
N9Scaleform3GFx18ConstShapeNoStylesE
N9Scaleform3GFx20ConstShapeWithStylesE
N9Scaleform3GFx20SwfShapeCharacterDefE
N9Scaleform3GFx22ImageShapeCharacterDefE
N9Scaleform6Render18TransformerWrapperINS0_9Matrix2x4IfEEEE
N9Scaleform6Render18TransformerWrapperINS0_14Scale9GridInfoEEE
N9Scaleform3GFx6SpriteE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi74EEE
N9Scaleform12RefCountBaseINS_6Render4Text10FontHandleELi74EEE
N9Scaleform6Render4Text10FontHandleE
N9Scaleform3GFx10FontHandleE
Invalid SWF file: failed to load sprite's frame #%d since total frames counter is %d
  SetBackgroundColor: (%d %d %d)
An extra frame is found for sprite id = %d, framecnt = %d, actual frames = %d
  ShowFrame (sprite, char id = %d)
  -- sprite END, char id = %d --
AddFrameName(%d, '%s') -- frame is out of range (frameCount = %d; skipping
AddFrameName(%d, '%s') -- frame name already assigned to frame %d; overriding
  frames = %d
_down
_over
N9Scaleform3GFx13TimelineIODefE
N9Scaleform3GFx22GFxPlaceObjectUnpackedE
N9Scaleform3GFx14PlaceObjectTagE
N9Scaleform3GFx15PlaceObject2TagE
N9Scaleform3GFx15PlaceObject3TagE
N9Scaleform3GFx16RemoveObject2TagE
N9Scaleform3GFx15RemoveObjectTagE
N9Scaleform3GFx21SetBackgroundColorTagE
N9Scaleform3GFx9SpriteDefE
G  TextRect = { l: %f, t: %f, r: %f, b: %f }
Text style with undefined font; FontId = %d
Static text uses imported font! FontId = %d, import name = %s
begin text records
end text records
  text style change
  HasFont: font id = %d
  HasColor
  XOffset = %g
  YOffset = %g
  TextHeight = %g
  GlyphRecords: count = %d
TextCharacter, id = %d
N9Scaleform3GFx13StaticTextDefE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi74EEE
N9Scaleform15RefCountBaseNTSINS_6Render4Text10TextFilterELi74EEE
N9Scaleform6Render4Text10TextFilterE
N9Scaleform3GFx19StaticTextCharacterE
*ZN9Scaleform3GFx6Stream20ReadStringWithLengthEPNS_6StringEE12StringReader
---------------Tag type = %d, Tag length = %d, offset = %d
---------------Tag type = %d, Tag length = %d
N9Scaleform3GFx7LogBaseINS0_6StreamEEE
N9Scaleform3GFx6StreamE
  Frame label: "%s"
  ShapeLoader: id = %d
  bound rect:
  ShapeMorphLoader: id = %d
  Font: id = %d
  sprite
  char id = %d
SetTabIndex (unused) 
  metadata: %s
  frameLabelCount = %d
   Scene[%d] = { %d, "%s" }
   Label[%d] = { %d, "%s" }
  PlaceObject
  export: count = %d
  export: id = %d, name = %s
  PlaceObject2Tag
  PlaceObject3Tag
  import: id = %d, name = %s
  RemoveObject2(%d)
  RemoveObject(%d, %d)
  NumFonts = %d
  button GFxCharacter loader: CharId = %d
  Scene and Frame Label Data, numscenes = %d
Jpeg System is not installed - can't load jpeg image data
Image file handler registry is not installed - can't load jpeg image data
  GFx_DefineBitsJpeg2Loader: charid = %d pos = 0x%x
  GFx_DefineBitsJpeg4Loader: charid = %d pos = %d deblocking = %d
  GFx_DefineBitsJpeg3Loader: charid = %d pos = %d
ZlibState is not set - can't load zipped image data
  DefBitsLossless2: tagInfo.TagType = %d, id = %d, fmt = %d, w = %d, h = %d
Error: GFxZlibState is not set - can't load zipped image data
GFx_DefineFontInfoLoader - can't find FontResource w/ id %d
Don't know how to export Resource '%s'
GFx_DoActionLoader - AS2 support is not installed. Tag is skipped.
GFx_DoActionLoader - DoAction tag shouldn't appear in AS3 swf. Tag is skipped.
GFx_DoInitActionLoader - AS2 support is not installed. Tag is skipped.
GFx_DoInitActionLoader - DoInitAction tag shouldn't appear in AS3 swf. Tag is skipped.
Tag 'DefineBinaryData' (87) is not supported, potentially 'TLF text' fields are used. Switch to 'Classic Text'.
  DefineBinaryData: CharId = %d
GFx_PlaceObject2Loader - AS2 support is not installed. Tag is skipped.
GFx_PlaceObject3Loader - AS2 support is not installed. Tag is skipped.
  DefineExternalImage: tagInfo.TagType = %d, id = 0x%X, fmt = %d, name = '%s', exp = '%s', w = %d, h = %d
  DefineExternalGradientImage: tagInfo.TagType = %d, id = 0x%X, fmt = %d, name = '%s', size = %d
Deprecated tag 1004 - DefineGradientMapLoader encountered, ignored
Scale9GridLoader, id=%d, x1=%d, y1=%d, x2=%d, y2=%d
Scale9Grid for resource=%d has negative width %f
Scale9Grid for resource=%d has negative height %f
  importAssets: SourceUrl = %s, count = %d
  importAssets2: SourceUrl = %s, count = %d
GFx_RemoveObjectLoader - AS2 support is not installed. Tag is skipped.
  FontTextureInfo: tagInfo.TagType = %d, id = 0x%X, fmt = %d, name = '%s', w = %d, h = %d
  PadPixels = %d, nominal glyph size = %d, numTexGlyphs = %d
  TEXGLYPH[%d]: uvBnd.x1 = %f, uvBnd.y1 = %f, uvBnd.x2 = %f, uvBnd.y2 = %f
                uvOrigin.x = %f, uvOrigin.y = %f
N9Scaleform15RefCountBaseNTSINS_3GFx20SubImageResourceInfoELi2EEE
N9Scaleform3GFx20SubImageResourceInfoE
N9Scaleform12RefCountBaseINS_6Render4JPEG9ExtraDataELi2EEE
N9Scaleform6Render4JPEG9ExtraDataE
N9Scaleform6Render4JPEG12TablesHeaderE
N9Scaleform12RefCountBaseINS_6Render12TextureGlyphELi2EEE
N9Scaleform6Render12TextureGlyphE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi261EEE
N9Scaleform15RefCountBaseNTSINS_3GFx16TextureGlyphDataELi261EEE
N9Scaleform3GFx16TextureGlyphDataE
N9Scaleform3GFx16PlaceObject2TagaE
  WordWrap = %d, Multiline = %d, Password = %d, ReadOnly = %d
  AutoSize = %d, Selectable = %d, Border = %d, Html = %d, UseDeviceFont = %d
  HasFontClass: font class = %s
  HasLayout: alignment = %d, leftmarg = %f, rightmarg = %f, indent = %f, leading = %f
EditTextChar, varname = %s, text = %s
  FlagType = %s, GridFit = %s
  Thinkness = %f, Sharpnesss = %f
  HasMaxLength: len = %d
  FontHeight = %f
System
Internal
CSMTextSettings, id = %d
EditTextChar, id = %d
Pixel
N9Scaleform3GFx13TextClipboardE
N9Scaleform3GFx10TextKeyMapE
N9Scaleform3GFx12TextFieldDefE
N9Scaleform15RefCountBaseNTSINS_6Render4Text9AllocatorELi74EEE
N9Scaleform6Render4Text9AllocatorE
GFx_InflateWrapper() inflateInit() returned %d
GFx_InflateWrapper() Inflate() returned %d
GFx_InflateWrapper() InflateEnd() return %d
N9Scaleform3GFx11ZlibSupportE
UNKNOWN
Unknown
N9Scaleform3GFx12ASIMEManager14IMEFuncHandlerE
N9Scaleform3GFx14IMEManagerBaseE
N9Scaleform8ListNodeINS_10MemoryHeapEEE
N9Scaleform8SysAllocE
N9Scaleform10MemoryHeapE
N9Scaleform12MemoryHeapMHE
N9Scaleform13DelegatedFileE
N9Scaleform12BufferedFileE
N9Scaleform3LogE
0123456789abcdef
N9Scaleform11NumericBaseE
N9Scaleform11FmtResourceE
N9Scaleform9FormatterE
N9Scaleform12StrFormatterE
N9Scaleform13BoolFormatterE
N9Scaleform13LongFormatterE
N9Scaleform15DoubleFormatterE
N9Scaleform17ResourceFormatterE
N9Scaleform9MsgFormatE
N9Scaleform15SwitchFormatterE
N9Scaleform16RefCountImplCoreE
N9Scaleform19RefCountNTSImplCoreE
N9Scaleform13RefCountVImplE
N9Scaleform23RefCountWeakSupportImplE
`!p!a!q!b!r!c!s!d!t!e!u!f!v!g!w!h!x!i!y!j!z!k!{!l!|!m!}!n!~!o!
p!`!q!a!r!b!s!c!t!d!u!e!v!f!w!g!x!h!y!i!z!j!{!k!|!l!}!m!~!n!
UUUUUUU
TUUUUU+
UUUUUU
UUUUUUUUUUUUUUUUUU
UUUUUUUUUUU
*!Q"@RU
N9Scaleform7SysFileE
N9Scaleform12UnopenedFileE
N9Scaleform16AcquireInterfaceE
N9Scaleform23DefaultAcquireInterfaceE
N9Scaleform12RefCountBaseINS_8WaitableELi2EEE
N9Scaleform8WaitableE
N9Scaleform5EventE
N9Scaleform9SemaphoreE
N9Scaleform26SemaphoreWaitableIncrementE
N9Scaleform8ListNodeINS_6Render11ContextImpl20ContextCaptureNotifyEEE
N9Scaleform8ListNodeINS_6Render11ContextImpl8RTHandle10HandleDataEEE
N9Scaleform12RefCountBaseINS_6Render13ThreadCommandELi2EEE
N9Scaleform6Render13ThreadCommandE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi69EEE
N9Scaleform12RefCountBaseINS_6Render11ContextImpl11ContextLockELi69EEE
N9Scaleform6Render11ContextImpl11ContextLockE
N9Scaleform12RefCountBaseINS_6Render11ContextImpl8RTHandle10HandleDataELi69EEE
N9Scaleform6Render11ContextImpl8RTHandle10HandleDataE
N9Scaleform6Render11ContextImpl9EntryDataE
N9Scaleform6Render11ContextImpl12RenderNotify14ServiceCommandE
N9Scaleform6Render11ContextImpl12RenderNotifyE
N9Scaleform6Render11ContextImpl20ContextCaptureNotifyE
N9Scaleform8ListNodeINS_6Render13DrawableImageEEE
N9Scaleform12RefCountBaseINS_6Render20DrawableImageContextELi2EEE
N9Scaleform6Render20DrawableImageContextE
N9Scaleform6Render13DrawableImageE
N9Scaleform6Render13DICommandImplINS0_23DICommand_CreateTextureENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_15DICommand_ClearENS0_9DICommandEEE
N9Scaleform6Render20DICommand_SourceRectE
N9Scaleform6Render24DICommand_SourceRectImplINS0_21DICommand_ApplyFilterEEE
N9Scaleform6Render13DICommandImplINS0_14DICommand_DrawENS0_9DICommandEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_21DICommand_CopyChannelEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_20DICommand_CopyPixelsEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_24DICommand_ColorTransformEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_17DICommand_CompareEEE
N9Scaleform6Render13DICommandImplINS0_18DICommand_FillRectENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_FloodFillENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_28DICommand_GetColorBoundsRectENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_20DICommand_GetPixel32ENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_GetPixelsENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_HistogramENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_17DICommand_HitTestENS0_9DICommandEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_15DICommand_MergeEEE
N9Scaleform6Render13DICommandImplINS0_15DICommand_NoiseENS0_9DICommandEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_20DICommand_PaletteMapEEE
N9Scaleform6Render13DICommandImplINS0_21DICommand_PerlinNoiseENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_23DICommand_PixelDissolveENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_20DICommand_SetPixel32ENS0_9DICommandEEE
N9Scaleform6Render13DICommandImplINS0_19DICommand_SetPixelsENS0_9DICommandEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_16DICommand_ScrollEEE
N9Scaleform6Render24DICommand_SourceRectImplINS0_19DICommand_ThresholdEEE
N9Scaleform6Render33DestroyDrawableImageThreadCommandE
N9Scaleform6Render23DICommand_CreateTextureE
N9Scaleform6Render21DICommand_ApplyFilterE
N9Scaleform6Render14DICommand_DrawE
N9Scaleform6Render21DICommand_CopyChannelE
N9Scaleform6Render20DICommand_CopyPixelsE
N9Scaleform6Render24DICommand_ColorTransformE
N9Scaleform6Render17DICommand_CompareE
N9Scaleform6Render15DICommand_MergeE
N9Scaleform6Render20DICommand_PaletteMapE
N9Scaleform6Render16DICommand_ScrollE
N9Scaleform6Render19DICommand_ThresholdE
N9Scaleform6Render15RenderQueueItem9InterfaceE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi67EEE
N9Scaleform12RefCountBaseINS_6Render15FilterPrimitiveELi67EEE
Scaleform::Render::DrawableImage
N9Scaleform8ListNodeINS_6Render14DICommandQueueEEE
N9Scaleform6Render9DICommandE
N9Scaleform12RefCountBaseINS_6Render14DICommandQueueELi2EEE
N9Scaleform6Render14DICommandQueue14ExecuteCommandE
N9Scaleform6Render14DICommandQueueE
N9Scaleform6Render15DICommand_ClearE
N9Scaleform6Render18DICommand_FillRectE
N9Scaleform6Render19DICommand_FloodFillE
N9Scaleform6Render28DICommand_GetColorBoundsRectE
N9Scaleform6Render20DICommand_GetPixel32E
N9Scaleform6Render19DICommand_GetPixelsE
N9Scaleform6Render19DICommand_HistogramE
N9Scaleform6Render17DICommand_HitTestE
N9Scaleform6Render15DICommand_NoiseE
N9Scaleform6Render21DICommand_PerlinNoiseE
N9Scaleform6Render23DICommand_PixelDissolveE
N9Scaleform6Render20DICommand_SetPixel32E
N9Scaleform6Render19DICommand_SetPixelsE
N9Scaleform12RefCountBaseINS_6Render6FilterELi2EEE
N9Scaleform6Render6FilterE
N9Scaleform6Render14BlurFilterImplE
N9Scaleform6Render10BlurFilterE
N9Scaleform6Render12ShadowFilterE
N9Scaleform6Render10GlowFilterE
N9Scaleform6Render11BevelFilterE
N9Scaleform6Render17ColorMatrixFilterE
N9Scaleform6Render19CacheAsBitmapFilterE
N9Scaleform12RefCountBaseINS_6Render9FilterSetELi2EEE
N9Scaleform6Render9FilterSetE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi257EEE
N9Scaleform12RefCountBaseINS_6Render12GradientDataELi257EEE
N9Scaleform6Render12GradientDataE
N9Scaleform6Render13GradientImageE
BeginScene
beginDisplay
BeginFrame
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi71EEE
N9Scaleform15RefCountBaseNTSINS_6Render13PrimitiveFillELi71EEE
N9Scaleform6Render11RenderEventE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi65EEE
N9Scaleform12RefCountBaseINS_6Render14StereoImplBaseELi2EEE
N9Scaleform6Render14StereoImplBaseE
N9Scaleform12RefCountBaseINS_6Render11MatrixStateELi65EEE
N9Scaleform6Render11MatrixStateE
N9Scaleform12RefCountBaseINS_6Render3HALELi65EEE
N9Scaleform6Render3HALE
N9Scaleform6Render19HALBeginDisplayItemE
N9Scaleform6Render17HALEndDisplayItemE
N9Scaleform6Render13ImageSwizzlerE
N9Scaleform12RefCountBaseINS_6Render19TextureManagerLocksELi72EEE
N9Scaleform6Render19TextureManagerLocksE
N9Scaleform6Render17MappedTextureBaseE
N9Scaleform6Render15ImageUpdateSyncE
N9Scaleform12RefCountBaseINS_6Render11ImageUpdateELi2EEE
N9Scaleform6Render11ImageUpdateE
N9Scaleform12RefCountBaseINS_6Render14TextureManagerELi72EEE
N9Scaleform6Render14TextureManager14ServiceCommandE
N9Scaleform6Render14TextureManagerE
N9Scaleform6Render5ImageE
N9Scaleform6Render11ImageSourceE
N9Scaleform6Render8RawImageE
N9Scaleform6Render12TextureImageE
N9Scaleform6Render14MatrixPoolImpl16HMatrixConstantsE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi73EEE
N9Scaleform12RefCountBaseINS_6Render14MatrixPoolImpl10MatrixPoolELi73EEE
N9Scaleform6Render14MatrixPoolImpl10MatrixPoolE
N9Scaleform8ListNodeINS_6Render15MeshStagingNodeEEE
N9Scaleform6Render15MeshStagingNodeE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi68EEE
N9Scaleform12RefCountBaseINS_6Render8MeshBaseELi68EEE
N9Scaleform6Render8MeshBaseE
N9Scaleform6Render4MeshE
N9Scaleform6Render13PrimitiveFillE
N9Scaleform12RefCountBaseINS_6Render9PrimitiveELi67EEE
N9Scaleform6Render9PrimitiveE
N9Scaleform6Render11ComplexMeshE
N9Scaleform12RefCountBaseINS_6Render13MaskPrimitiveELi67EEE
N9Scaleform6Render13MaskPrimitiveE
N9Scaleform6Render15FilterPrimitiveE
N9Scaleform12RefCountBaseINS_6Render21ViewMatrix3DPrimitiveELi67EEE
N9Scaleform6Render21ViewMatrix3DPrimitiveE
N9Scaleform12RefCountBaseINS_6Render27ProjectionMatrix3DPrimitiveELi67EEE
N9Scaleform6Render27ProjectionMatrix3DPrimitiveE
N9Scaleform12RefCountBaseINS_6Render17UserDataPrimitiveELi67EEE
N9Scaleform6Render17UserDataPrimitiveE
N9Scaleform12RefCountBaseINS_6Render14Scale9GridInfoELi71EEE
N9Scaleform6Render14Scale9GridInfoE
Afff?
N9Scaleform6Render12MeshProviderE
N9Scaleform12RefCountBaseINS_6Render19MeshProvider_RCImplELi2EEE
N9Scaleform6Render19MeshProvider_RCImplE
N9Scaleform6Render23MeshProvider_KeySupportE
N9Scaleform6Render16ShapeDataFloatMPE
Render_ShapeMeshProvider: More than 65535 vertices, the shape cannot be displayed
N9Scaleform12RefCountBaseINS_6Render14MorphShapeDataELi71EEE
N9Scaleform6Render19ShapeDataFloatTemplINS_11ArrayLH_PODIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform6Render14MorphShapeDataE
N9Scaleform6Render17ShapeMeshProviderE
N9Scaleform6Render17MorphInterpolatorE
N9Scaleform6Render9StateData9InterfaceE
N9Scaleform6Render9StateData15Interface_ValueE
N9Scaleform6Render9StateData22Interface_RefCountImplE
N9Scaleform6Render13MaskNodeState9InterfaceE
N9Scaleform6Render21OrigScale9ParentState9InterfaceE
N9Scaleform6Render12StrokerTypesE
N9Scaleform6Render8TessBaseE
N9Scaleform6Render7StrokerE
N9Scaleform6Render12StrokeSorterE
N9Scaleform6Render9StrokerAAE
N9Scaleform12RefCountBaseINS_6Render10RenderSyncELi2EEE
N9Scaleform6Render10RenderSyncE
N9Scaleform6Render11TessellatorE
N9Scaleform12RefCountBaseINS_6Render10TextLayoutELi74EEE
N9Scaleform6Render10TextLayoutE
N9Scaleform6Render13Matrix3x4DataIfEE
N9Scaleform6Render13Matrix4x4DataIfEE
N9Scaleform6Render8RectDataIfEE
N9Scaleform6Render9Matrix3x4IfEE
N9Scaleform6Render9Matrix4x4IfEE
N9Scaleform6Render4RectIfEE
N9Scaleform12RefCountBaseINS_6Render14Scale9GridRectELi71EEE
N9Scaleform6Render14Scale9GridRectE
N9Scaleform12RefCountBaseINS_6Render9Matrix3x4IfEELi2EEE
N9Scaleform6Render12Matrix3x4RefIfEE
N9Scaleform12RefCountBaseINS_6Render9Matrix4x4IfEELi2EEE
N9Scaleform6Render12Matrix4x4RefIfEE
N9Scaleform12RefCountBaseINS_6Render13UserDataState4DataELi2EEE
N9Scaleform6Render13UserDataState4DataE
N9Scaleform6Render8TreeNode8NodeDataE
N9Scaleform6Render13TreeContainer8NodeDataE
N9Scaleform12RefCountBaseINS_6Render4RectIfEELi2EEE
N9Scaleform6Render7RectRefIfEE
N9Scaleform12RefCountBaseINS_6Render14Scale9GridDataELi2EEE
N9Scaleform6Render14Scale9GridDataE
N9Scaleform6Render9TreeShape8NodeDataE
N9Scaleform6Render14TreeCacheShapeE
N9Scaleform6Render19TreeCacheShapeLayerE
N9Scaleform6Render11ContextImpl21ContextData_ImplMixinINS0_8TreeText8NodeDataENS0_8TreeNode8NodeDataEEE
N9Scaleform6Render8TreeText8NodeDataE
N9Scaleform12RefCountBaseINS_6Render18SystemVertexFormatELi2EEE
N9Scaleform6Render18SystemVertexFormatE
N9Scaleform6Render10VertexPathE
N9Scaleform12RefCountBaseINS_6Render10Renderer2DELi65EEE
N9Scaleform6Render10Renderer2DE
N9Scaleform15NewOverrideBaseILi65EEE
N9Scaleform8ListNodeINS_6Render9HALNotifyEEE
N9Scaleform12RefCountBaseINS_6Render20PrimitiveFillManagerELi71EEE
N9Scaleform6Render20PrimitiveFillManagerE
N9Scaleform6Render9HALNotifyE
N9Scaleform12RefCountBaseINS_6Render14MeshKeyManagerELi65EEE
N9Scaleform6Render14MeshKeyManagerE
N9Scaleform6Render14Renderer2DImplE
N9Scaleform6Render16ImageFileHandlerE
N9Scaleform6Render21ImageFileReader_MixinINS0_3DDS10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render3DDS10FileReaderE
N9Scaleform6Render3DDS18DDSFileImageSourceE
N9Scaleform6Render4JPEG14AbstractReaderE
N9Scaleform6Render21ImageFileReader_MixinINS0_4JPEG10FileReaderENS2_14AbstractReaderEEE
N9Scaleform6Render4JPEG10FileReaderE
N9Scaleform6Render4JPEG5InputE
N9Scaleform6Render4JPEG17MemoryBufferImageE
N9Scaleform6Render4JPEG21JPEGInputImpl_jpeglibE
N9Scaleform6Render4JPEG11ImageSourceE
N9Scaleform6Render4JPEG18WrapperImageSourceE
Read Error.
Write Error.
1.5.13
N9Scaleform6Render15ImageFileWriterE
N9Scaleform6Render3PNG5InputE
N9Scaleform6Render21ImageFileReader_MixinINS0_3PNG10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render3PNG10FileReaderE
N9Scaleform6Render21ImageFileWriter_MixinINS0_3PNG10FileWriterENS0_15ImageFileWriterEEE
N9Scaleform6Render3PNG10FileWriterE
N9Scaleform6Render3PNG11LibPNGInputE
N9Scaleform6Render3PNG17MemoryBufferImageE
N9Scaleform6Render3PNG18PNGFileImageSourceE
N9Scaleform6Render15ImageFileReaderE
N9Scaleform6Render24ImageFileHandlerRegistryE
N9Scaleform6Render15FileImageSourceE
N9Scaleform6Render17MemoryBufferImageE
N9Scaleform6Render21ImageFileReader_MixinINS0_3TGA10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render3TGA10FileReaderE
N9Scaleform6Render3TGA18TGAFileImageSourceE
N9Scaleform6Render21ImageFileReader_MixinINS0_3SIF10FileReaderENS0_15ImageFileReaderEEE
N9Scaleform6Render3SIF10FileReaderE
N9Scaleform6Render3SIF18SIFFileImageSourceE
Times New Roman
CSGO Extra
Arial Unicode MS
Missing font "%s" in "%s". Search log:
Missing "%s" glyph '%c' (0x%x) in "%s".
Font has %u glyphs, ranges %s.
Search log: 
N9Scaleform15RefCountBaseNTSINS_6Render4Text10StyledTextELi74EEE
N9Scaleform12RefCountBaseINS_6Render4Text7DocViewELi74EEE
N9Scaleform6Render4Text7DocView12DocumentTextE
N9Scaleform6Render4Text7DocViewE
a:link
ALIGN
BASELINE
BLOCKINDENT
CENTER
CLASS
COLOR
HEIGHT
HSPACE
JUSTIFY
KERNING
LEADING
LEFTMARGIN
LETTERSPACING
RIGHTMARGIN
TABSTOPS
TARGET
VSPACE
WIDTH
N9Scaleform15RefCountBaseNTSINS_6Render4Text9ImageDescELi74EEE
N9Scaleform6Render4Text9ImageDescE
N9Scaleform6Render4Text16HTMLImageTagDescE
An image in TextLayout is NULL
F INDENT="{0}"
 BLOCKINDENT="{0}"
 LEFTMARGIN="{0}"
 RIGHTMARGIN="{0}"
 LEADING="{0}"
 TABSTOPS="
{0:sw:,:}{1}
 ALIGN="
<A HREF="{0}">
<IMG SRC="
 WIDTH="{0}"
 HEIGHT="{0}"
 VSPACE="{0}"
 HSPACE="{0}"
 ID="{0}"
baseline
<FONT
 FACE="{0}"
 SIZE="{0}"
 COLOR="#{0:X:.6}"
 LETTERSPACING="{0}"
 ALPHA="#{0:X:.2}"
 KERNING="{0:sw:1:0}"
</FONT>
></TEXTFORMAT>
<TEXTFORMAT
N9Scaleform6Render4Text10StyledTextE
N9Scaleform8FILEFileE
Object Interface
N9Scaleform12RefCountBaseINS_8AmpStatsELi2EEE
N9Scaleform8AmpStatsE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi578EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP21MovieInstructionStats17ScriptBufferStatsELi578EEE
N9Scaleform3GFx3AMP21MovieInstructionStats17ScriptBufferStatsE
N9Scaleform12RefCountBaseINS_3GFx3AMP12FunctionDescELi578EEE
N9Scaleform3GFx3AMP12FunctionDescE
N9Scaleform12RefCountBaseINS_3GFx3AMP12FuncTreeItemELi2EEE
N9Scaleform3GFx3AMP12FuncTreeItemE
N9Scaleform3GFx3AMP12MovieProfile10MarkerInfoE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi582EEE
N9Scaleform12RefCountBaseINS_3GFx3AMP9ViewStats22BufferInstructionTimesELi582EEE
N9Scaleform3GFx3AMP9ViewStats22BufferInstructionTimesE
N9Scaleform3GFx3AMP9ViewStatsE
Leaked string content: %s
ActionScript Memory leaks in movie '%s', including %d string nodes
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi324EEE
N9Scaleform12RefCountBaseINS_3GFx15ASStringManagerELi324EEE
N9Scaleform3GFx15ASStringManagerE
%.14g
+Infinity
-Infinity
%.10g
%.11g
%.12g
%.13g
@C-- action record:  
HitTest 
Down 
Over 
   CharId = %d, Depth = %d
   mat:
   cxform:
   HasFilters
   HasBlending, %d
GFx_ButtonLoader - AS2 support is not installed. Actions are skipped.
GFx_ButtonLoader - AS3 Button shouldn't have AS2 actions. Skipped.
N9Scaleform3GFx9ButtonDefE
N9Scaleform3GFx12CharacterDefE
Unnamed
DisplayObjContainer::ReplaceDisplayObject() - unknown cid = %d
N9Scaleform12RefCountBaseINS_18AmpMovieObjectDescELi2EEE
N9Scaleform18AmpMovieObjectDescE
N9Scaleform3GFx19DisplayObjContainerE
N9Scaleform20RefCountBaseStatImplINS_23RefCountWeakSupportImplELi322EEE
N9Scaleform23RefCountBaseWeakSupportINS_3GFx17DisplayObjectBaseELi322EEE
N9Scaleform3GFx7LogBaseINS0_17DisplayObjectBaseEEE
N9Scaleform3GFx17DisplayObjectBaseE
N9Scaleform3GFx13DisplayObjectE
ImageCreator is null in BeginBitmapFill
N9Scaleform8ListNodeINS_3GFx14DrawingContextEEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi322EEE
N9Scaleform15RefCountBaseNTSINS_3GFx14DrawingContextELi322EEE
N9Scaleform6Render15ShapeDataPackedINS_7ArrayDHIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform3GFx14DrawingContext11PackedShapeE
N9Scaleform3GFx14DrawingContextE
N9Scaleform12RefCountBaseINS_3GFx13KeyboardStateELi2EEE
N9Scaleform3GFx13KeyboardStateE
N9Scaleform15RefCountBaseNTSINS_3GFx15FontGlyphPackerELi2EEE
N9Scaleform3GFx15FontGlyphPackerE
D[Italic,Device]
[Device]
[Bold,Italic,Device]
[Bold,Device]
[Italic]
[Bold,Italic]
[Bold]
              : {0}.
Registered fonts: "
Applying FontMap: "
"  mapped to "
Searching FontLib: "
FontLib not installed.
Searching FontProvider: "
FontProvider not installed.
Searching for font: "
Font "
 will be generated from "
Font not found.
Empty font: "
" is created
Movie resource: "{0}" {1} found.
Movie resource: "{0}" {1} found, requires faux
Movie resource: "{0}" {1} ref found, requires FontLib/Map/Provider.
Movie resource: "{0}" {1} not found.
Imports       : "{0}" {1} found in "{2}".
Imports       : "{0}" {1} import delegates to font library.
Imports       : "{0}" {1} not found.
Exported      : "{0}" {1} found.
Exported      : "{0}" {1} not found.
Searching FontLib without [Device] flag: "
Searching again without [Device] flag:
N9Scaleform12RefCountBaseINS_6Render4Text15FontManagerBaseELi74EEE
N9Scaleform6Render4Text15FontManagerBaseE
N9Scaleform3GFx17FontManagerStatesE
N9Scaleform3GFx11FontManagerE
 Italic
 Bold
reading DefineCompactedFont:
read font "%s"
(none)
ShiftJIS
Unicode
reading DefineFontInfo
reading DefineFontInfo2
  Name = %s
  LangCode = %d
<noname>
reading DefineFont
offset[0] = %d
offset[%d] = %d
reading DefineFont2: 
reading DefineFont3: 
  Name = %s, %d glyphs
  KerningCount = %d
     Pair: %d - %d,	adj = %d
0x{0:x}
0x{0:x}-0x{1:x}
 (truncated)
Font '%s%s%s' has no hinting chars (any of 'HEFTUVWXZ' and 'zxvwy'). Auto-Hinting disabled.
Could not read tag DefineCompactedFont. Broken gfx file.
Invalid nominal size for DefineCompactedFont, font %s. Broken gfx file.
reading code table at offset %d
  CodePage = %s, Italic = %d, Bold = %d
  HasLayout = %d, CodePage = %s, Italic = %d, Bold = %d
  Ascent = %d, Descent = %d, Leading = %d
Corrupted file %s, kerning table of the font '%s' is longer than tagLength.
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi75EEE
N9Scaleform12RefCountBaseINS_6Render4FontELi75EEE
N9Scaleform6Render4FontE
N9Scaleform3GFx16TextureGlyphData19TextureGlyphVisitorE
N9Scaleform3GFx8FontDataE
N9Scaleform15RefCountBaseNTSINS_3GFx13CompactedFontINS_16ArrayPagedLH_PODIhLi12ELi256ELi261EEEEELi261EEE
N9Scaleform3GFx13CompactedFontINS_16ArrayPagedLH_PODIhLi12ELi256ELi261EEEEE
N9Scaleform3GFx20FontDataCompactedSwfE
N9Scaleform15RefCountBaseNTSINS_3GFx13CompactedFontINS_17ArrayUnsafeLH_PODIhLi261EEEEELi261EEE
N9Scaleform3GFx13CompactedFontINS_17ArrayUnsafeLH_PODIhLi261EEEEE
N9Scaleform3GFx20FontDataCompactedGfxE
N9Scaleform3GFx13FontDataBoundE
N9Scaleform3GFx12FontResourceE
N9Scaleform3GFx18TextureGlyphBinderE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi261EEE
N9Scaleform12RefCountBaseINS_3GFx24GFxSystemFontResourceKeyELi261EEE
N9Scaleform3GFx24GFxSystemFontResourceKeyE
N9Scaleform3GFx33GFxSystemFontResourceKeyInterfaceE
N9Scaleform12RefCountBaseINS_3GFx20ImageFileInfoKeyDataELi2EEE
N9Scaleform3GFx20ImageFileInfoKeyDataE
N9Scaleform3GFx21ImageFileKeyInterfaceE
N9Scaleform3GFx35MemoryBufferJpegImageWithZlibAlphasE
N9Scaleform3GFx15ZlibImageSourceE
N9Scaleform3GFx21MemoryBufferZlibImageE
:+<_>?~
;=,-./`
)!@#$%^&*(
ABCDEFGHIJKLMNOPQRSTUVWXYZ
0123456789*+
0123456789
abcdefghijklmnopqrstuvwxyz
0123456789*+
N9Scaleform3GFx17InteractiveObjectE
morph fill style type = 0x%X
morph fill style end color: 
morph fsr: numGradients = %d
morph fsr BitmapChar = %d
morph fill style begin color: 
MorphCharacterDef, first shape:
MorphCharacterDef, second shape:
N9Scaleform3GFx17MorphCharacterDefE
ProcessImageTags: can't find a resource for export name '%s'
ProcessImageTags: can't load the image '%s'
Image '%s' wasn't created in ProcessImageTags
ImageCreator is null in ProcessImageTags
Image resource creation failed - ImageCreator not installed
Resource for font id = %d is not found in text field id = %d, def text = '%s'
Resource for font class = '%s' is not found in text field id = %d, def text = '%s'
Font id = %d is referring to non-font resource in text field id = %d, def text = '%s'
a:hover
a:active
N9Scaleform15RefCountBaseNTSINS_6Render4Text7DocView16DocumentListenerELi74EEE
N9Scaleform6Render4Text7DocView16DocumentListenerE
N9Scaleform3GFx9TextField20TextDocumentListenerE
N9Scaleform3GFx9TextFieldE
.A1.2.7
N9Scaleform3GFx8ZLibFileE
N9Scaleform12RefCountBaseINS_6Render4Text21CompositionStringBaseELi74EEE
N9Scaleform6Render4Text21CompositionStringBaseE
N9Scaleform12RefCountBaseINS_6Render4Text13EditorKitBaseELi74EEE
N9Scaleform6Render4Text13EditorKitBaseE
N9Scaleform3GFx4Text17CompositionStringE
N9Scaleform3GFx4Text9EditorKitE
N9Scaleform6Render16SortKeyInterfaceE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi67EEE
N9Scaleform15RefCountBaseNTSINS_6Render6BundleELi67EEE
N9Scaleform6Render6BundleE
?fs-8R
@fs-8R
?fs-8R
Warning: Increase raster glyph cache capacity - see GlyphCacheParams
Warning: Raster glyph is too big - increase GlyphCacheParams.MaxSlotHeight
N9Scaleform6Render9CacheBaseE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi75EEE
N9Scaleform15RefCountBaseNTSINS_6Render11GlyphRasterELi75EEE
N9Scaleform6Render11GlyphRasterE
N9Scaleform6Render15ShapeDataPackedINS_11ArrayLH_PODIhLi2ENS_18ArrayDefaultPolicyEEEEE
N9Scaleform6Render10GlyphShapeE
N9Scaleform6Render18GlyphEvictNotifierE
N9Scaleform6Render16GlyphCacheConfigE
N9Scaleform6Render12StrokeScalerE
N9Scaleform6Render17GlyphTextureImageE
N9Scaleform12RefCountBaseINS_6Render10GlyphCacheELi2EEE
N9Scaleform6Render10GlyphCache13EvictNotifierE
N9Scaleform6Render10GlyphCacheE
N9Scaleform12RefCountBaseINS_6Render22FontCacheHandleManagerELi75EEE
N9Scaleform6Render22FontCacheHandleManagerE
>J)%?J)%>
N9Scaleform6Render11GlyphFitterE
N9Scaleform6Render9HairlinerE
N9Scaleform6Render12VertexOutputE
N9Scaleform6Render15MeshCacheConfigE
N9Scaleform6Render9MeshCacheE
N9Scaleform6Render16MeshVertexOutputE
N9Scaleform6Render23ComplexMeshVertexOutputE
N9Scaleform8ListNodeINS_6Render10MeshKeySetEEE
N9Scaleform6Render10MeshKeySetE
N9Scaleform6Render29SortKeyInterface_RefCountImplE
N9Scaleform6Render14DrawableBundleE
N9Scaleform6Render15PrimitiveBundleE
N9Scaleform6Render22ComplexPrimitiveBundleE
N9Scaleform6Render10MaskBundleE
N9Scaleform6Render12FilterBundleE
N9Scaleform6Render18ViewMatrix3DBundleE
N9Scaleform6Render24ProjectionMatrix3DBundleE
N9Scaleform6Render14UserDataBundleE
N9Scaleform6Render13SKI_PrimitiveE
N9Scaleform6Render20SKI_ComplexPrimitiveE
N9Scaleform6Render13SKI_MaskStartE
N9Scaleform6Render11SKI_MaskEnd12RQII_EndMaskE
N9Scaleform6Render11SKI_MaskEndE
N9Scaleform6Render13SKI_BlendMode14RQII_BlendModeE
N9Scaleform6Render13SKI_BlendModeE
N9Scaleform6Render10SKI_FilterE
N9Scaleform6Render16SKI_ViewMatrix3DE
N9Scaleform6Render22SKI_ProjectionMatrix3DE
N9Scaleform6Render12SKI_UserDataE
N9Scaleform6Render10RasterizerE
N9Scaleform8ListNodeINS_6Render16VectorGlyphShapeEEE
N9Scaleform8ListNodeINS_6Render16TextMeshProviderEEE
N9Scaleform6Render16VectorGlyphShapeE
N9Scaleform6Render16TextMeshProviderE
N9Scaleform6Render18TextLayerPrimitiveE
N9Scaleform6Render19TextPrimitiveBundleE
N9Scaleform6Render17SKI_TextPrimitiveE
Null pRoot in %p - %p node
SourceNode = %p, parent = %p
%p Depth = %d
Null pRoot in %p - %p node - at chain loop %d
Frame %d: Null NextPattern after %p, count = %d
N9Scaleform15NewOverrideBaseILi71EEE
N9Scaleform8ListNodeINS_6Render13TreeCacheNodeEEE
N9Scaleform6Render13TreeCacheNodeE
N9Scaleform6Render18TreeCacheContainerE
N9Scaleform6Render13TreeCacheRootE
N9Scaleform6Render17TreeCacheMeshBaseE
N9Scaleform6Render13TreeCacheTextE
A{0}: {1} ms ({2} times)
{0} ({1}) from {2} ({3}): {4} times
========== MOVIE VIEW FUNCTIONS FOR %s ======
========== RENDERER FUNCTIONS ===============
N9Scaleform12RefCountBaseINS_7MemItemELi2EEE
N9Scaleform7MemItemE
N9Scaleform12RefCountBaseINS_3GFx3AMP21MovieInstructionStatsELi578EEE
N9Scaleform3GFx3AMP21MovieInstructionStatsE
N9Scaleform12RefCountBaseINS_3GFx3AMP22MovieFunctionTreeStatsELi2EEE
N9Scaleform3GFx3AMP22MovieFunctionTreeStatsE
N9Scaleform12RefCountBaseINS_3GFx3AMP18MovieFunctionStatsELi578EEE
N9Scaleform3GFx3AMP18MovieFunctionStatsE
N9Scaleform12RefCountBaseINS_3GFx3AMP20MovieSourceLineStatsELi578EEE
N9Scaleform3GFx3AMP20MovieSourceLineStatsE
N9Scaleform12RefCountBaseINS_3GFx3AMP12MovieProfileELi578EEE
N9Scaleform3GFx3AMP12MovieProfileE
N9Scaleform12RefCountBaseINS_3GFx3AMP9ImageInfoELi578EEE
N9Scaleform3GFx3AMP9ImageInfoE
N9Scaleform12RefCountBaseINS_3GFx3AMP12ProfileFrameELi578EEE
N9Scaleform3GFx3AMP12ProfileFrameE
N9Scaleform12RefCountBaseINS_3GFx3AMP11ServerStateELi578EEE
N9Scaleform3GFx3AMP11ServerStateE
N9Scaleform15RefCountBaseNTSINS_3GFx13FontCompactorELi261EEE
N9Scaleform3GFx13FontCompactorE
 {0:sep:,}
{0}<MemItem Name="{1}">
{0}</MemItem>
{0}<MemItem Name="{1}" Value={2}>
N9Scaleform12RefCountBaseINS_12MemItemExtraELi2EEE
N9Scaleform12MemItemExtraE
N9Scaleform6Render11CacheEffectE
N9Scaleform6Render10MaskEffectE
N9Scaleform6Render15BlendModeEffectE
N9Scaleform6Render12FilterEffectE
N9Scaleform6Render18ViewMatrix3DEffectE
N9Scaleform6Render24ProjectionMatrix3DEffectE
N9Scaleform6Render14UserDataEffectE
Font '%s%s%s': No hinting chars (any of 'HEFTUVWXZ' and 'zxvwy'). Auto-Hinting disabled.
tag %d: DoActionLoader
-- actions in frame %d
  tag %d: DoInitActionLoader
-- action conditions %X
-- actions in button
  -- init actions for sprite %d
N9Scaleform10MemoryHeap12LimitHandlerE
N9Scaleform12RefCountBaseINS_3GFx13MemoryContextELi2EEE
N9Scaleform3GFx13MemoryContextE
N9Scaleform3GFx10AS2SupportE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi258EEE
N9Scaleform12RefCountBaseINS_3GFx16ButtonActionBaseELi258EEE
N9Scaleform3GFx16ButtonActionBaseE
N9Scaleform3GFx3AS212ButtonActionE
N9Scaleform3GFx3AS217MemoryContextImplE
N9Scaleform3GFx3AS214PlaceObject2EHE
N9Scaleform3GFx3AS215PlaceObject2EHaE
N9Scaleform3GFx3AS214PlaceObject3EHE
N9Scaleform3GFx3AS214RemoveObjectEHE
N9Scaleform3GFx3AS215RemoveObject2EHE
N9Scaleform3GFx3AS211DoActionTagE
N9Scaleform3GFx3AS215DoInitActionTagE
compositionSegment
clauseSegment
convertedSegment
phraseLengthAdj
lowConfSegment
01234567
htmlText
asfunction:
<disasm is disabled>
redMultiplier
greenMultiplier
blueMultiplier
alphaMultiplier
redOffset
greenOffset
blueOffset
alphaOffset
random
---enumerate - Push: %s
Invalid path '%s'
_root
_level
available
blurX
blurY
distance
highlightAlpha
highlightColor
shadowAlpha
shadowColor
knockout
inner
outer
strength
hideObject
tabEnabled
focusEnabled
tabChildren
underline
letterSpacing
kerning
center
dynamic
input
advanced
normal
bottom
shrink
noScale
exactFit
noBorder
showAll
scaleMode
onScroller
gfxPlayer
gfxLanguage
gfxArg
{0} : {1}
<invalid>
Getter method is null.
.prototype
avHardwareDisable
hasAccessibility
hasAudio
hasAudioEncoder
hasEmbeddedVideo
hasIME
hasMP3
hasPrinting
hasScreenBroadcast
hasScreenPlayback
hasStreamingAudio
hasStreamingVideo
hasVideoEncoder
isDebugger
localFileReadDisable
language
Scaleform Linux
manufacturer
pixelAspectRatio
playerType
screenColor
screenDPI
LINUX 8,0,0,0
windowlessDisable
screenResolutionX
screenResolutionY
serverString
maxscroll
maxhscroll
backgroundColor
border
borderColor
bottomScroll
mouseWheelEnabled
antiAliasType
autoSize
condenseWhite
embedFonts
maxChars
multiline
password
restrict
selectable
styleSheet
tabIndex
textColor
textHeight
textWidth
variable
wordWrap
addMarker
getTopMostEntity
getPosition
getButtonsState
captureFocus
disableFocusAutoRelease
alwaysEnableArrowKeys
alwaysEnableKeyboardPress
disableFocusRolloverEvent
disableFocusKeys
modalClip
moveFocus
findFocus
setModalClip
getModalClip
setControllerFocusGroup
getControllerFocusGroup
getFocusBitmask
numFocusGroups
getControllerMaskByFocusGroup
getFocusArray
CASEINSENSITIVE
LOG2E
LOG10E
SQRT1_2
SQRT2
MAX_VALUE
indexBackgroundColor
selectedTextColor
selectedTextBackgroundColor
selectedIndexBackgroundColor
fontSize
readingWindowTextColor
readingWindowBackgroundColor
readingWindowFontSize
ditheredThick
ditheredSingle
dotted
thick
single
underlineStyle
underlineColor
indexInRun
selected
matrix_a
matrix_b
matrix_c
matrix_d
matrix_tx
matrix_ty
corner0x
corner0y
corner1x
corner1y
corner2x
corner2y
corner3x
corner3y
DELETEKEY
showMenu
justify
bullet
blockIndent
leading
leftMargin
rightMargin
tabStops
pixelBounds
colorTransform
matrix
concatenatedColorTransform
concatenatedMatrix
onData
topLeft
bottomRight
[property]
[resolveHandler]
&SA=f
&MP3=f
&SV=f
&EV=f
&IME=
&AE=f
&VE=f
&ACC=f
&PR=f
&SP=f
&SB=f
&DEB=f
&DP=72
&COL=color
&AR=1.0
&L=en
&PT=External
&AVD=f
&LFD=f
&WD=f
numControllers
bytesLoaded
bytesTotal
fontFamily
font-family
font-size
fontStyle
font-style
fontWeight
font-weight
letter-spacing
marginLeft
margin-left
marginRight
margin-right
textAlign
text-align
textDecoration
text-decoration
textIndent
text-indent
%s ...<truncated>
imecommand
setIMECandidateListStyle
getInputLanguage
getIMECandidateListStyle
flash.geom
flash.external
flash.display
flash.filters
ascent
descent
shifttab
vertical
horizontal
square
miter
bevel
contentType
onChanged
onHTTPStatus
onLoad
onLoadStart
onLoadComplete
onLoadInit
onLoadError
onLoadProgress
onSetFocus
subString
image
baseLineX
baseLineY
matrixType
linearRGB
radial
rectangle
visibleRect
safeRect
originalRect
onResize
-------------- %s = %s
Setter method is null.
4.2.23
gfxVersion
FSCommand:
BevelFilter
BlurFilter
ColorMatrixFilter
(redMultiplier=
, greenMultiplier=
, blueMultiplier=
, alphaMultiplier=
, redOffset=
, greenOffset=
, blueOffset=
, alphaOffset=
DropShadowFilter
GlowFilter
LoadVars
, tx=
, ty=
, width=
, height=
SharedObject
StyleSheet
textFieldWidth
textFieldHeight
_level{0}
URLNotFound
ActionScriptMismatch
Canceled
Failed loading URL "%s"
Unknown error
getTextExtent
clear
getStyle
getStyleNames
parseCSS
setStyle
transform
charAt
charCodeAt
concat
indexOf
lastIndexOf
localeCompare
slice
split
substr
substring
toLowerCase
toString
toUpperCase
valueOf
addListener
removeListener
broadcastMessage
getBeginIndex
getCaretIndex
getEndIndex
getFocus
setFocus
setSelection
addProperty
hasOwnProperty
unwatch
isPropertyEnumerable
isPrototypeOf
MIN_VALUE
NEGATIVE_INFINITY
POSITIVE_INFINITY
getProgress
unloadClip
clone
createBox
createGradientBox
deltaTransformPoint
identity
invert
rotate
transformPoint
translate
getAscii
getCode
isDown
isToggled
apply
getDate
getDay
getFullYear
getHours
getMilliseconds
getMinutes
getMonth
getSeconds
getTime
getTimezoneOffset
getYear
getUTCDate
getUTCDay
getUTCFullYear
getUTCHours
getUTCMilliseconds
getUTCMinutes
getUTCMonth
getUTCSeconds
getUTCYear
setDate
setFullYear
setHours
setMilliseconds
setMinutes
setMonth
setSeconds
setTime
setYear
setUTCDate
setUTCFullYear
setUTCHours
setUTCMilliseconds
setUTCMinutes
setUTCSeconds
setUTCMonth
setUTCYear
setTransform
getTransform
setRGB
getRGB
loadBitmap
getFontList
appendText
appendHtml
copyToClipboard
cutToClipboard
getCharBoundaries
getCharIndexAtPoint
getExactCharBoundaries
getFirstCharInParagraph
getIMECompositionStringStyle
getLineIndexAtPoint
getLineIndexOfChar
getLineOffset
getLineMetrics
getLineText
getLineLength
pasteFromClipboard
setIMECompositionStringStyle
setImageSubstitutions
updateImageSubstitution
getDepth
getTextFormat
getNewTextFormat
setTextFormat
setNewTextFormat
replaceSel
replaceText
removeTextField
gotoAndStop
gotoAndPlay
nextFrame
prevFrame
getBytesLoaded
getBytesTotal
getBounds
getRect
localToGlobal
globalToLocal
hitTest
attachBitmap
attachMovie
duplicateMovieClip
removeMovieClip
createEmptyMovieClip
createTextField
swapDepths
getNextHighestDepth
getInstanceAtDepth
getTextSnapshot
getSWFVersion
startDrag
stopDrag
setMask
unloadMovie
loadVariables
beginFill
beginGradientFill
beginBitmapFill
lineGradientStyle
endFill
moveTo
lineTo
curveTo
reverse
sortOn
splice
unshift
DESCENDING
LOCALE
NUMERIC
RETURNINDEXEDARRAY
UNIQUESORT
findText
getCount
getSelected
getSelectedText
getText
getTextRunInfo
hitTestTextNearPos
setSelectColor
setSelected
fromCharCode
Function
Button
capabilities
Stage
AsBroadcaster
XMLNode
Mouse
ExternalInterface
MovieClipLoader
BitmapData
NetConnection
NetStream
BitmapFilter
LocManager
<unknown>
<undefined>
movieclip
super
_parent
_level0
_level0.
arguments
callee
caller
gfxExtensions
noInvisibleAdvance
continueAnimation
__proto__
constructor
__constructor__
_listeners
__resolve
[type Function]
[type Object]
[object Object]
onKillFocus
INVALID
onPress
onRelease
onReleaseOutside
onRollOver
onRollOut
onDragOver
onDragOut
@keyPress@
@initialize@
onUnload
onEnterFrame
onMouseDown
onMouseUp
onMouseMove
onMouseWheel
onKeyDown
onKeyUp
onConstruct
onSockClose
onSockConnect
onSockData
onSockXML
onXMLLoad
onXMLData
onPressAux
onReleaseAux
onReleaseOutsideAux
onDragOverAux
onDragOutAux
useHandCursor
hitArea
setCursorType
ARROW
IBEAM
rendererString
rendererFloat
disableBatching
getLocal
flush
getSize
contains
containsPoint
containsRectangle
equals
inflate
inflatePoint
intersection
intersects
isEmpty
offset
offsetPoint
setEmpty
union
interpolate
polar
normalize
subtract
registerClass
atan2
floor
addRequestHeader
decode
sendAndLoad
addCallback
multiply
screen
lighten
darken
difference
erase
overlay
hardlight
_xscale
_yscale
_currentframe
_totalframes
_alpha
_visible
_width
_height
_rotation
_target
_framesloaded
_name
_droptarget
_highquality
_focusrect
_soundbuftime
_quality
_xmouse
_ymouse
blendMode
cacheAsBitmap
enabled
trackAsMenu
_lockroot
edgeaaMode
scale9Grid
scrollRect
shadowStyle
hitTestDisable
noTranslate
caretIndex
numLines
verticalAutoSize
fontScaleFactor
verticalAlign
textAutoSize
useRichTextClipboard
alwaysShowSelection
selectionBeginIndex
selectionEndIndex
selectionBkgColor
selectionTextColor
inactiveSelectionBkgColor
inactiveSelectionTextColor
noAutoSelection
disableIME
topmostLevel
noAdvance
focusGroupMask
autoFit
blurStrength
outline
fauxBold
fauxItalic
shadowAngle
shadowBlurX
shadowBlurY
shadowDistance
shadowHideObject
shadowKnockOut
shadowQuality
shadowStrength
shadowOutline
_zscale
_xrotation
_yrotation
_matrix3d
_perspfov
$version
initialize
trace
parseInt
parseFloat
ifFrameLoaded
isNaN
isFinite
unescape
unescapeSpecialHTML
updateAfterEvent
setInterval
clearInterval
setTimeout
clearTimeout
ASSetPropFlags
ASnative
256 levels of recursion is reached
Invalid local register %d, stack only has %d entries
%s.removeMovieClip() failed - depth must be >= 0
Retrieval of the TextField.filters property is not implemented.
CallFrame('%d') - unknown frame
ProcessDeclDict(%d, %d) - DeclDict was already processed at %d
Action buffer dict length exceeded
InvokeParsed('%s','%s') - invalid format '%%h%c'
InvokeParsed('%s','%s') - invalid format '%%l%c'
InvokeParsed('%s','%s') - invalid format '%%%c'
InvokeParsed('%s','%s') - invalid char '%c'
!!! ExecuteEvent started '%s' = %p for %s
!!! ExecuteEvent finished '%s' = %p for %s
Sprite::AddDisplayObject() - unknown cid = %d
AvmSprite::SpriteGotoAndPlay needs one arg
AvmSprite::SpriteGotoAndStop needs one arg
moveFocus - invalid string id for key: '%s'
No user event handler interface is installed; Mouse.show failed.
No user event handler interface is installed; Mouse.hide failed.
No user event handler interface is installed; Mouse.setCursorType failed.
%s.attachMovie() failed - export name "%s" is not found.
%s.attachMovie() failed - "%s" is not a movieclip.
%s.attachMovie("%s") failed - depth (%d) must be >= 0
ExternalInterface.call - handler is not installed.
application/x-www-form-urlencoded
ImageCreator is null in UpdateImageSubstitution
%s.attachBitmap() failed - the argument is not a BitmapData.
%s.attachBitmap() failed - no image set in BitmapData.
%s.attachBitmap() failed - depth (%d) must be >= 0
%s.setImageSubstitutions() failed for #%d element - length of subString should not exceed 15 characters
%s.setImageSubstitutions() failed for #%d element - subString should be specified
%s.setImageSubstitutions() failed for #%d element - image has one zero dimension
%s.setImageSubstitutions() failed for #%d element - 'image' is not specified or not a BitmapData
ImageCreator is null in ProceedImageSubstitution
%s.setImageSubstitutions() failed: parameter should be either 'null', object or array
Invalid SetProperty request, property number %d
Attempt to write read-only property %s.%s, ignored
%s::CreateNewObject returned NULL during creation of %s class instance.
BitmapData::LoadBitmap: LoadMovieImageCallback failed to load image "%s"
Invalid GetProperty query, property number %d
 GetVariable failed: can't resolve the path "%s"
GetVariableRaw("%s") failed, returning UNDEFINED.
Invalid movie clip path; neither string nor object
Error: Too few parameters for Object.registerClass (%d)
Second parameter of Object.registerClass(%s, %s) should be function or null
SetVariable failed: can't resolve the path "%s"
NULL pathToVar passed to SetVariable/SetDouble()
KeyIsDown needs one Argument (the key code)
KeyIsToggled needs one Argument (the key code)
removeMovieClip("%s") failed - depth must be >= 0
CallFunction - attempt to call invalid function
Error: Null or invalid 'this' is used for a method of %s class.
Array.sort - sorting failed, check your sort functor
LoadVars.addRequestHeader is not implemented.
LoadVars.send is not implemented.
LoadVars.sendAndLoad is not implemented.
Failed loading SWF "%s": ActionScript version mismatch
{0} {1} {2:2} {3:02}:{4:02}:{5:02} GMT{6:+03}{7:02} {8}
ImageCreator::LoadProtocolImage failed to load image "%s"
ImageCreator is not installed,failed to load image "%s"
_level0 unloaded - no further playback possible
*ZN9Scaleform3GFx3AS2L24GAS_GlobalASSetPropFlagsERKNS1_6FnCallEE13MemberVisitor
*ZN9Scaleform3GFx3AS213GlobalContext4InitEPNS0_9MovieImplEE13MemberVisitor
*ZN9Scaleform3GFx3AS216ExecutionContext15EnumerateOpCodeEiE18EnumerateOpVisitor
*ZN9Scaleform3GFx3AS213AsBroadcaster16BroadcastMessageEPNS1_11EnvironmentEPNS1_15ObjectInterfaceERKNS0_8ASStringEiiE19LocalInvokeCallback
*ZN9Scaleform3GFx3AS29AvmSprite17InitObjectMembersERKNS1_6FnCallEE11InitVisitor
*ZNK9Scaleform3GFx3AS29AvmSprite12VisitMembersEPNS1_15ASStringContextEPNS1_15ObjectInterface13MemberVisitorEjPKS5_E7Visitor
*ZN9Scaleform3GFx3AS215MovieClipObject12Set__proto__EPNS1_15ASStringContextEPNS1_6ObjectEE13MemberVisitor
*ZN9Scaleform3GFx3AS221TextFieldCtorFunction11GetFontListERKNS1_6FnCallEE12FontsVisitor
*ZNK9Scaleform3GFx23AS2ValueObjectInterface12VisitMembersEPvPNS0_5Value15ObjectInterface10ObjVisitorEbE12VisitorProxy
*ZN9Scaleform3GFx3AS213LoadVarsProto8ToStringERKNS1_6FnCallEE13MemberVisitor
*ZN9Scaleform3GFx3AS212SharedObject18ComputeSizeInBytesEPNS1_11EnvironmentEE17DataSizeEstimator
*ZN9Scaleform3GFx3AS212SharedObject5FlushEPNS1_11EnvironmentEPNS0_19SharedObjectVisitorEE10DataWriter
N9Scaleform15NewOverrideBaseILi323EEE
N9Scaleform8ListNodeINS_3GFx16MovieDefRootNodeEEE
N9Scaleform3PtrINS_3GFx3AS212SharedObjectEEE
N9Scaleform3GFx14ActionPriorityE
N9Scaleform3GFx13KeyboardState9IListenerE
N9Scaleform3GFx5Value15ObjectInterfaceE
N9Scaleform12RefCountBaseINS_3GFx15ASMovieRootBaseELi327EEE
N9Scaleform3GFx15ASMovieRootBaseE
N9Scaleform3GFx17AvmDisplayObjBaseE
N9Scaleform3GFx21AvmInteractiveObjBaseE
N9Scaleform3GFx11DisplayList13MemberVisitorE
N9Scaleform3GFx26AvmDisplayObjContainerBaseE
N9Scaleform3GFx13AvmSpriteBaseE
N9Scaleform3GFx14LoadQueueEntryE
N9Scaleform3GFx16MovieDefRootNodeE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi323EEE
N9Scaleform12RefCountBaseINS_3GFx19ASIntervalTimerIntfELi323EEE
N9Scaleform3GFx19ASIntervalTimerIntfE
N9Scaleform12RefCountBaseINS_3GFx9MovieImpl17WideStringStorageELi327EEE
N9Scaleform3GFx9MovieImpl17WideStringStorageE
N9Scaleform3GFx9MovieImpl13StickyVarNodeE
N9Scaleform12RefCountBaseINS_3GFx3AS217RefCountCollectorILi323EEELi323EEE
N9Scaleform3GFx3AS214RefCountBaseGCILi323EEE
N9Scaleform3GFx3AS217RefCountCollectorILi323EE4RootE
N9Scaleform3GFx3AS217RefCountCollectorILi323EEE
N9Scaleform3GFx3AS219ASRefCountCollectorE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi263EEE
N9Scaleform12RefCountBaseINS_3GFx3AS216ActionBufferDataELi263EEE
N9Scaleform3GFx3AS216ActionBufferDataE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi323EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3AS212ActionBufferELi323EEE
N9Scaleform3GFx3AS212ActionBufferE
N9Scaleform3GFx3AS217MemoryContextImpl9HeapLimitE
N9Scaleform3GFx3AS214ASRefCountBaseINS1_13ValuePropertyEEE
N9Scaleform3GFx3AS213ValuePropertyE
N9Scaleform3GFx7LogBaseINS0_3AS26FnCallEEE
N9Scaleform3GFx3AS26FnCallE
N9Scaleform3GFx3AS215ObjectInterface13MemberVisitorE
N9Scaleform3GFx3AS215ObjectInterfaceE
N9Scaleform3GFx3AS214ASRefCountBaseINS1_6ObjectEEE
N9Scaleform3GFx3AS26ObjectE
N9Scaleform3GFx3AS214FunctionObjectE
N9Scaleform3GFx3AS215CFunctionObjectE
N9Scaleform3GFx3AS218ObjectCtorFunctionE
N9Scaleform3GFx3AS220FunctionCtorFunctionE
N9Scaleform3GFx3AS214ASRefCountBaseINS1_10LocalFrameEEE
N9Scaleform3GFx3AS210LocalFrameE
N9Scaleform3GFx7LogBaseINS0_3AS212ActionLoggerEEE
N9Scaleform3GFx3AS212ActionLoggerE
N9Scaleform3GFx7LogBaseINS0_3AS211EnvironmentEEE
N9Scaleform3GFx3AS211EnvironmentE
N9Scaleform15RefCountBaseNTSINS_3GFx3AS213GlobalContextELi323EEE
N9Scaleform3GFx3AS213GlobalContextE
N9Scaleform3GFx3AS212AvmCharacterE
N9Scaleform3GFx3AS217GenericDisplayObjE
N9Scaleform3GFx3AS216GASPrototypeBaseE
N9Scaleform3GFx3AS29PrototypeINS1_6ObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS211ObjectProtoE
N9Scaleform3GFx3AS213FunctionProtoE
N9Scaleform3GFx3AS211SuperObjectE
N9Scaleform3GFx3AS29AvmSpriteE
N9Scaleform3GFx3AS215MovieClipObjectE
N9Scaleform3GFx3AS29PrototypeINS1_15MovieClipObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS214MovieClipProtoE
N9Scaleform3GFx3AS221MovieClipCtorFunctionE
N9Scaleform3GFx3AS215MovieClipLoaderE
N9Scaleform3GFx3AS29PrototypeINS1_15MovieClipLoaderENS1_11EnvironmentEEE
N9Scaleform3GFx3AS220MovieClipLoaderProtoE
N9Scaleform3GFx3AS227MovieClipLoaderCtorFunctionE
N9Scaleform3GFx3AS214LoadVarsObjectE
N9Scaleform3GFx3AS29PrototypeINS1_14LoadVarsObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS213LoadVarsProtoE
N9Scaleform3GFx3AS229GASLoadVarsLoaderCtorFunctionE
N9Scaleform6Render4Text16StyleManagerBaseE
N9Scaleform12RefCountBaseINS_3GFx3AS215ASCSSFileLoaderELi2EEE
N9Scaleform3GFx3AS215ASCSSFileLoaderE
N9Scaleform3GFx3AS216StyleSheetObjectE
N9Scaleform3GFx3AS29PrototypeINS1_16StyleSheetObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS215StyleSheetProtoE
N9Scaleform3GFx3AS222StyleSheetCtorFunctionE
N9Scaleform3GFx3AS213MouseListenerE
N9Scaleform3GFx3AS220GFxAS2LoadQueueEntryE
N9Scaleform3GFx3AS232GFxAS2LoadQueueEntryMT_LoadMovieE
N9Scaleform3GFx3AS217GFxAS2LoadXMLTaskE
N9Scaleform3GFx3AS230GFxAS2LoadQueueEntryMT_LoadXMLE
N9Scaleform3GFx3AS217GFxAS2LoadCSSTaskE
N9Scaleform3GFx3AS230GFxAS2LoadQueueEntryMT_LoadCSSE
N9Scaleform3GFx3AS29MovieRoot13StickyVarNodeE
N9Scaleform3GFx3AS29MovieRootE
N9Scaleform3GFx13AvmButtonBaseE
N9Scaleform3GFx3AS29AvmButtonE
N9Scaleform3GFx3AS212ButtonObjectE
N9Scaleform3GFx3AS29PrototypeINS1_12ButtonObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS211ButtonProtoE
N9Scaleform3GFx3AS218ButtonCtorFunctionE
N9Scaleform3GFx3AS216AsFunctionObjectE
N9Scaleform3GFx9TextField13CSSHolderBaseE
N9Scaleform3GFx16AvmTextFieldBaseE
N9Scaleform3GFx3AS212AvmTextField9CSSHolderE
N9Scaleform3GFx3AS212AvmTextFieldE
N9Scaleform3GFx3AS215TextFieldObjectE
N9Scaleform3GFx3AS29PrototypeINS1_15TextFieldObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS214TextFieldProtoE
N9Scaleform3GFx3AS221TextFieldCtorFunctionE
N9Scaleform3GFx3AS211ColorObjectE
N9Scaleform3GFx3AS29PrototypeINS1_11ColorObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS210ColorProtoE
N9Scaleform3GFx3AS217ColorCtorFunctionE
N9Scaleform3GFx3AS212MatrixObjectE
N9Scaleform3GFx3AS29PrototypeINS1_12MatrixObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS211MatrixProtoE
N9Scaleform3GFx3AS221GASMatrixCtorFunctionE
N9Scaleform3GFx3AS220ColorTransformObjectE
N9Scaleform3GFx3AS29PrototypeINS1_20ColorTransformObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS219ColorTransformProtoE
N9Scaleform3GFx3AS226ColorTransformCtorFunctionE
N9Scaleform3GFx3AS215RectangleObjectE
N9Scaleform3GFx3AS29PrototypeINS1_15RectangleObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS214RectangleProtoE
N9Scaleform3GFx3AS221RectangleCtorFunctionE
N9Scaleform3GFx3AS215TransformObjectE
N9Scaleform3GFx3AS29PrototypeINS1_15TransformObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS214TransformProtoE
N9Scaleform3GFx3AS221TransformCtorFunctionE
N9Scaleform3GFx3AS210BitmapDataE
N9Scaleform3GFx3AS29PrototypeINS1_10BitmapDataENS1_11EnvironmentEEE
N9Scaleform3GFx3AS215BitmapDataProtoE
N9Scaleform3GFx3AS222BitmapDataCtorFunctionE
N9Scaleform3GFx3AS211PointObjectE
N9Scaleform3GFx3AS29PrototypeINS1_11PointObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS210PointProtoE
N9Scaleform3GFx3AS217PointCtorFunctionE
N9Scaleform3GFx3AS211StageObjectE
N9Scaleform3GFx3AS29PrototypeINS1_11StageObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS210StageProtoE
N9Scaleform3GFx3AS217StageCtorFunctionE
N9Scaleform3GFx3AS212StringObjectE
N9Scaleform3GFx3AS29PrototypeINS1_12StringObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS211StringProtoE
N9Scaleform3GFx3AS218StringCtorFunctionE
N9Scaleform3GFx3AS211ArrayObjectE
N9Scaleform3GFx3AS29PrototypeINS1_11ArrayObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS210ArrayProtoE
N9Scaleform3GFx3AS217ArrayCtorFunctionE
N9Scaleform3GFx3AS212NumberObjectE
N9Scaleform3GFx3AS29PrototypeINS1_12NumberObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS211NumberProtoE
N9Scaleform3GFx3AS218NumberCtorFunctionE
N9Scaleform3GFx3AS213BooleanObjectE
N9Scaleform3GFx3AS29PrototypeINS1_13BooleanObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS212BooleanProtoE
N9Scaleform3GFx3AS219BooleanCtorFunctionE
N9Scaleform3GFx3AS24MathE
N9Scaleform3GFx3AS29PrototypeINS1_4MathENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29MathProtoE
N9Scaleform3GFx3AS216MathCtorFunctionE
N9Scaleform3GFx3AS213IntervalTimerE
N9Scaleform3GFx3AS213AsBroadcaster14InvokeCallbackE
N9Scaleform3GFx3AS213AsBroadcasterE
N9Scaleform3GFx3AS29PrototypeINS1_13AsBroadcasterENS1_11EnvironmentEEE
N9Scaleform3GFx3AS218AsBroadcasterProtoE
N9Scaleform3GFx3AS225AsBroadcasterCtorFunctionE
N9Scaleform3GFx3AS210DateObjectE
N9Scaleform3GFx3AS29PrototypeINS1_10DateObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS29DateProtoE
N9Scaleform3GFx3AS216DateCtorFunctionE
N9Scaleform3GFx3AS29KeyObjectE
N9Scaleform3GFx3AS29PrototypeINS1_9KeyObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS28KeyProtoE
N9Scaleform3GFx3AS215KeyCtorFunctionE
N9Scaleform3GFx3AS211MouseObjectE
N9Scaleform3GFx3AS29PrototypeINS1_11MouseObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS210MouseProtoE
N9Scaleform3GFx3AS217MouseCtorFunction19LocalInvokeCallbackE
N9Scaleform3GFx3AS217MouseCtorFunctionE
N9Scaleform3GFx3AS217ExternalInterfaceE
N9Scaleform3GFx3AS29PrototypeINS1_17ExternalInterfaceENS1_11EnvironmentEEE
N9Scaleform3GFx3AS222ExternalInterfaceProtoE
N9Scaleform3GFx3AS229ExternalInterfaceCtorFunctionE
N9Scaleform3GFx3AS29SelectionE
N9Scaleform3GFx3AS29PrototypeINS1_9SelectionENS1_11EnvironmentEEE
N9Scaleform3GFx3AS214SelectionProtoE
N9Scaleform3GFx3AS221SelectionCtorFunctionE
N9Scaleform3GFx3AS216TextFormatObjectE
N9Scaleform3GFx3AS29PrototypeINS1_16TextFormatObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS215TextFormatProtoE
N9Scaleform3GFx3AS222TextFormatCtorFunctionE
N9Scaleform15RefCountBaseNTSINS_3GFx19SharedObjectVisitorELi2EEE
N9Scaleform3GFx19SharedObjectVisitorE
N9Scaleform3GFx3AS212SharedObjectE
N9Scaleform3GFx3AS29PrototypeINS1_12SharedObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS217SharedObjectProtoE
N9Scaleform3GFx3AS215SharedObjectPtrE
N9Scaleform3GFx3AS224SharedObjectCtorFunctionE
N9Scaleform3GFx3AS29AmpMarkerE
N9Scaleform3GFx3AS29PrototypeINS1_9AmpMarkerENS1_11EnvironmentEEE
N9Scaleform3GFx3AS214AmpMarkerProtoE
N9Scaleform3GFx3AS221AmpMarkerCtorFunctionE
N9Scaleform3GFx22StaticTextSnapshotData12GlyphVisitorE
N9Scaleform3GFx3AS218TextSnapshotObjectE
N9Scaleform3GFx3AS29PrototypeINS1_18TextSnapshotObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS217TextSnapshotProtoE
N9Scaleform3GFx3AS224TextSnapshotCtorFunctionE
N9Scaleform3GFx3AS224CapabilitiesCtorFunctionE
N9Scaleform3GFx3AS218BitmapFilterObjectE
N9Scaleform3GFx3AS29PrototypeINS1_18BitmapFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS217BitmapFilterProtoE
N9Scaleform3GFx3AS224BitmapFilterCtorFunctionE
N9Scaleform3GFx3AS222DropShadowFilterObjectE
N9Scaleform3GFx3AS29PrototypeINS1_22DropShadowFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS221DropShadowFilterProtoE
N9Scaleform3GFx3AS228DropShadowFilterCtorFunctionE
N9Scaleform3GFx3AS216GlowFilterObjectE
N9Scaleform3GFx3AS29PrototypeINS1_16GlowFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS215GlowFilterProtoE
N9Scaleform3GFx3AS222GlowFilterCtorFunctionE
N9Scaleform3GFx3AS216BlurFilterObjectE
N9Scaleform3GFx3AS29PrototypeINS1_16BlurFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS215BlurFilterProtoE
N9Scaleform3GFx3AS222BlurFilterCtorFunctionE
N9Scaleform3GFx3AS217BevelFilterObjectE
N9Scaleform3GFx3AS29PrototypeINS1_17BevelFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS216BevelFilterProtoE
N9Scaleform3GFx3AS223BevelFilterCtorFunctionE
N9Scaleform3GFx3AS223ColorMatrixFilterObjectE
N9Scaleform3GFx3AS29PrototypeINS1_23ColorMatrixFilterObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS222ColorMatrixFilterProtoE
N9Scaleform3GFx3AS229ColorMatrixFilterCtorFunctionE
N9Scaleform3GFx3AS215GASGlobalObjectE
N9Scaleform3GFx3AS225UserDefinedFunctionObjectE
N9Scaleform3GFx23AS2ValueObjectInterfaceE
N9Scaleform3GFx3AS221GASSharedObjectLoaderE
N9Scaleform3GFx3AS226CSSFileLoaderAndParserImplE
N9Scaleform3GFx3AS216CSSStringBuilderE
N9Scaleform3GFx3AS219CSSTextFormatLoaderE
N9Scaleform3GFx3AS227GASTextSnapshotGlyphVisitorE
Affffff
P?isLanguageBar
isStatusWindow
SendIMEMessage
ALPHANUMERIC_FULL
onRemoveStatusWindow
onDisplayStatusWindow
onIMEComposition
onSwitchLanguage
onSetSupportedLanguages
onSetSupportedIMEs
onSetCurrentInputLanguage
onSetIMEName
onSetConversionStatus
doConversion
getConversionMode
getEnabled
setCompositionString
getCompositionString
setConversionMode
setEnabled
SendLangBarMessage
ALPHANUMERIC_HALF
CHINESE
JAPANESE_HIRAGANA
JAPANESE_KATAKANA_FULL
JAPANESE_KATAKANA_HALF
KOREAN
_global.gfx_ime_candidate_list_state
Error in loading candidate list from 
_global.gfx_ime_candidate_list_path
*N9Scaleform3GFx3AS212_GLOBAL__N_119CandidateListLoaderE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi513EEE
N9Scaleform12RefCountBaseINS_3GFx12ASIMEManagerELi513EEE
N9Scaleform3GFx12ASIMEManagerE
N9Scaleform3GFx3AS26GASImeE
N9Scaleform3GFx3AS29PrototypeINS1_6GASImeENS1_11EnvironmentEEE
N9Scaleform3GFx3AS211GASImeProtoE
N9Scaleform3GFx3AS218GASImeCtorFunctionE
N9Scaleform3GFx3AS210IMEManagerE
XML.send is not implemented.
xmlns
xmlDecl
ignoreWhite
xml version="
encoding="
standalone="yes"
standalone="no"
docTypeDecl
idMap
status
attributes
childNodes
firstChild
lastChild
localName
namespaceURI
nextSibling
nodeName
nodeType
nodeValue
parentNode
prefix
previousSibling
appendChild
cloneNode
getNamespaceForPrefix
getPrefixForNamespace
hasChildNodes
insertBefore
removeNode
createElement
createTextNode
parseXML
XML.addRequestHeader is not implemented.
XML.sendAndLoad is not implemented.
XMLNodeCtorFunction::GlobalCtor - malformed XMLNode object
XMLNodeCtorFunction::GlobalCtor - node type not specified
XMLNode::appendChild - trying to add a child that is not of type XMLNode
XMLNode::appendChild - trying to add a child that is the root of the current tree
XMLNode::appendChild - trying to add a child to a text node
XMLNodeObject::SetMember - cannot set nodeName of node type %d. Only type 1 allowed
XMLNodeObject::SetMember - cannot set nodeName of a malformed node
XMLNodeObject::SetMember - cannot set nodeValue of a malformed node
XMLNodeObject::SetMember - cannot set attributes of node type %d. Only type 1 allowed
XMLNodeObject::SetMember - cannot set attributes of a malformed node
XMLNodeProto::GetNamespaceForPrefix - only element nodes support this method.
No XML parser state set for movie!
N9Scaleform15NewOverrideBaseILi326EEE
N9Scaleform20RefCountBaseStatImplINS_12RefCountImplELi326EEE
N9Scaleform12RefCountBaseINS_3GFx3AS213XMLFileLoaderELi326EEE
N9Scaleform3GFx3AS213XMLFileLoaderE
N9Scaleform12RefCountBaseINS_3GFx3XML13ParserHandlerELi326EEE
N9Scaleform3GFx3XML13ParserHandlerE
N9Scaleform3GFx3XML13ShadowRefBaseE
N9Scaleform3GFx3AS212XMLShadowRefE
N9Scaleform3GFx3AS213XmlNodeObjectE
N9Scaleform3GFx3AS29PrototypeINS1_13XmlNodeObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS212XmlNodeProtoE
N9Scaleform3GFx3AS219XmlNodeCtorFunctionE
N9Scaleform3GFx3AS29XmlObjectE
N9Scaleform3GFx3AS29PrototypeINS1_9XmlObjectENS1_11EnvironmentEEE
N9Scaleform3GFx3AS28XmlProtoE
N9Scaleform3GFx3AS215XmlCtorFunctionE
N9Scaleform3GFx3AS226XMLFileLoaderAndParserImplE
N9Scaleform3GFx3AS217XMLFileLoaderImplE
N9Scaleform3GFx3AS216XMLPrefixQuerierE
N9Scaleform3GFx3AS225XMLAttributeStringBuilderE
%d.%d
GL_ARB_get_program_binary
GL_ARB_sync
PushFilters
PopMask
EndMaskSubmit
PushMask_BeginSubmit
DrawProcessedComplexMeshes
DrawProcessedPrimitive
N9Scaleform6Render2GL10ExtensionsE
N9Scaleform6Render12RenderBufferE
N9Scaleform6Render12RenderTargetE
N9Scaleform6Render18DepthStencilBufferE
N9Scaleform6Render2GL11MatrixStateE
N9Scaleform6Render9ShaderHALINS0_2GL13ShaderManagerENS2_15ShaderInterfaceEEE
N9Scaleform6Render2GL3HALE
N9Scaleform6Render2GL16RenderTargetDataE
N9Scaleform8ListNodeINS_6Render10MeshBufferEEE
N9Scaleform6Render10MeshBufferE
N9Scaleform6Render2GL10MeshBufferE
N9Scaleform6Render2GL9MeshCacheE
fcolor
vfmuniforms
vfuniforms
GFxShaders.cache
GFxShadersV2
%sGFxShaders-%08x.cache
separate_shader_objects
(scolor * color.a)
attribute vec2 intc%d;
varying   vec2 tc%d;
uniform vec2 srctexscale;
uniform vec4 scolor2;
  tc%d = intc%d * texscale;
  color = color * samples;
  color *= samples;
  gl_FragColor = %s;}
intc%d
cxmul
cxadd
srctex
srctexscale
samples
scolor
scolor2
(scolor * color.a + scolor2 * color.r)
uniform sampler2D tex;
uniform vec2 texscale;
uniform vec4 cxmul;
uniform vec4 cxadd;
uniform float samples;
uniform vec4 mvp[2];
uniform vec2 texscale;
attribute vec4 pos;
void main(void)
  vec4 opos = pos;
  opos.x = dot(pos, mvp[0]);
  opos.y = dot(pos, mvp[1]);
  gl_Position = opos;
uniform vec4 scolor;
uniform sampler2D srctex;
  tc%d = intc%d * srctexscale;
void main(void)
  vec4 color = vec4(0);
  color.a += texture2D(tex, tc%d).a;
  color.r += texture2D(tex, tc%d).a;
  color += texture2D(tex, tc%d);
  vec4 base = texture2D(srctex, tc%d);
  color.ar = clamp((1.0 - color.ar) - (1.0 - color.ra) * 0.5, 0.0,1.0);
  color = (scolor * (color.a) + scolor2 * (color.r)
           + base * (1.0 - color.a - color.r)) * base.a;
  gl_FragColor = color * cxmul + cxadd * color.a;
  color = scolor * (1-color.a) * base.a;
  color = mix(scolor, base, color.a) * base.a;
  color = %s * (1.0-base.a) + base;
  color *= (1.0 - base.a);
  gl_FragColor = color * cxmul + cxadd * color.a;
  gl_FragColor = color * cxmul + cxadd * color.a;
N9Scaleform6Render2GL10RenderSyncE
EXT_texture_compression_s3tc
N9Scaleform8ListNodeINS_6Render19DepthStencilSurfaceEEE
N9Scaleform12RefCountBaseINS_6Render19DepthStencilSurfaceELi72EEE
N9Scaleform6Render19DepthStencilSurfaceE
N9Scaleform6Render13TextureFormatE
N9Scaleform6Render2GL13TextureFormatE
N9Scaleform6Render2GL7TextureE
N9Scaleform6Render2GL19DepthStencilSurfaceE
N9Scaleform6Render2GL13MappedTextureE
N9Scaleform6Render2GL14TextureManagerE
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGH
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
IJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
IJKOPQ
IJKOPQ
TTTUUUVVVWWWVVVWWWXXXYYYZZZ[[[ZZZ[[[\\\\\\]]]]]]]]]]]]^^^^^^____________```aaabbbcccbbbcccdddeeefffgggfffggghhhhhhiiiiiiiiiiiijjjjjjkkkkkkkkkkkklllmmmnnnooonnnooopppqqqrrrsssrrrsssttttttuuuuuuuuuuuuvvvvvvwwwwwwwwwwwwxxxyyyzzz{{{zzz{{{|||}}}~~~
						
   !!!!!!""""""""""""######$$$$$$$$$$$$%%%&&&'''((('''((()))***+++,,,+++,,,------............//////000000000000
111222333444555666777888999:::;;;<<<===>>>???@@@AABBCCDDCCDDAAABBBCCCDDDCCCDDDEEFFGGHHGGHHEEEFFFGGGHHHGGGHHHIIJJKKLLKKLLIIIJJJKKKLLLKKKLLLMMNNOOPPOOPPMMMNNNOOOPPPOOOPPP
QQQQQQQQQQQQQQQQQQQQQQQQQQRRRSSSRR
afactor
vbatch
acolor
cxmul1
fsize
texgen
#version 150
uniform sampler2D srctex;
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fchannels = texture(tex, tc);
fcolor  = texture(srctex, vec2(fchannels.r, 0.125));
fcolor += texture(srctex, vec2(fchannels.g, 0.375));
fcolor += texture(srctex, vec2(fchannels.b, 0.625));
fcolor += texture(srctex, vec2(fchannels.a, 0.875));
#version 150
uniform sampler2D tex[2];
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
vec4 diff = fcolor0 - fcolor1;
vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );
vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;
vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));
vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;
float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));
fcolor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );
#version 150
uniform mat4 cxmul;
uniform mat4 cxmul1;
uniform sampler2D tex[2];
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor_original = texture(tex[int(0.0)], tc0);
vec4 fcolor_source   = texture(tex[int(1.0)], tc1);
fcolor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);
#version 150
uniform sampler2D tex[3];
in vec2 tc0;
in vec2 tc1;
in vec2 tc2;
out vec4 fcolor;
void main() {
vec4 fcolor_org = texture(tex[int(0.0)], tc0);
vec4 fcolor_src = texture(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
fcolor.a = 1.0;
fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
#version 150
uniform sampler2D tex[3];
in vec2 tc0;
in vec2 tc1;
in vec2 tc2;
out vec4 fcolor;
void main() {
vec4 fcolor_org = texture(tex[int(0.0)], tc0);
vec4 fcolor_src = texture(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);
fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
#version 150
uniform sampler2D tex[3];
in vec2 tc0;
in vec2 tc1;
in vec2 tc2;
out vec4 fcolor;
void main() {
vec4 fcolor_org = texture(tex[int(0.0)], tc0);
vec4 fcolor_src = texture(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
fcolor.a = inAlpha;
fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
#version 150
uniform vec4 mvp[2];
uniform vec4 texgen[6];
in vec4 pos;
out vec2 tc0;
out vec2 tc1;
out vec2 tc2;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
tc2.x = dot(pos, texgen[int(4.0)]);
tc2.y = dot(pos, texgen[int(5.0)]);
#version 150
uniform sampler2D tex[2];
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor_org = texture(tex[int(0.0)], tc0);
vec4 fcolor_src = texture(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
fcolor.a = 1.0;
fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
#version 150
uniform sampler2D tex[2];
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor_org = texture(tex[int(0.0)], tc0);
vec4 fcolor_src = texture(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);
fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
#version 150
uniform sampler2D tex[2];
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor_org = texture(tex[int(0.0)], tc0);
vec4 fcolor_src = texture(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
fcolor.a = inAlpha;
fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);
#version 150
uniform vec4 mvp[2];
uniform vec4 texgen[4];
in vec4 pos;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - fcolor.a - fcolor.r);
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r));
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - fcolor.a - fcolor.r);
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r));
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - fcolor.a - fcolor.r) * base.a;
fcolor = (scolor * fcolor.a + scolor2 * fcolor.r + base* (1.0 - fcolor.a - fcolor.r)) * base.a;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += textureLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor.ar = clamp((1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
fcolor = ((scolor * fcolor.a + scolor2 * fcolor.r)*(1.0-base.a) + base);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
fcolor = scolor * clamp(fcolor.a * fsize.z, 0.0, 1.0);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
fcolor = scolor * clamp(fcolor.a * fsize.z, 0.0, 1.0);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);
fcolor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);
fcolor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);
fcolor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - fcolor.a) * fsize.z, 0.0, 1.0);
fcolor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
fcolor -= knockout;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
fcolor = color * fsize.w;
vec4 base = textureLod(srctex, tc * srctexscale.xy, 0.0);
fcolor = scolor * clamp(fcolor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
fcolor = color * fsize.w;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += textureLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
fcolor = color * fsize.w;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
float  i = 0.0;
for (i = -fsize.x; i <= fsize.x; i++)
color += textureLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
fcolor = color * fsize.w;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
float  i = 0.0;
for (i = -fsize.x; i <= fsize.x; i++)
color += textureLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
fcolor = color * fsize.w;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor) * (cxmul) + cxadd * (fcolor.a + cxadd.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[4];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[3];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[4];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture(tex[int(3.0)], tc).r;
fcolor = c;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[3];
in vec2 tc;
out vec4 fcolor;
void main() {
float c0 = float((texture(tex[int(0.0)], tc).r - 16./255.) * 1.164);
float U0 = float(texture(tex[int(1.0)], tc).r - 128./255.);
float V0 = float(texture(tex[int(2.0)], tc).r - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
fcolor = c;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec2 atc;
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc = atc;
fucxadd = vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)];
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
in vec2 atc;
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc = atc;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec2 atc;
in vec4 pos;
out vec2 tc;
out vec4 vcolor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
vcolor = acolor * vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)] + vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];
tc = atc;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
in vec4 pos;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[96];
in vec2 atc;
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
tc = atc;
fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[48];
in vec2 atc;
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);
tc = atc;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec2 tc;
in vec4 vcolor;
out vec4 fcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture(tex, tc).r;
fcolor = c;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec2 tc;
in vec4 vcolor;
out vec4 fcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture(tex, tc).r;
fcolor = c;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec2 tc;
in vec4 vcolor;
out vec4 fcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture(tex, tc).r;
fcolor = c;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec2 atc;
in vec4 pos;
out vec2 tc;
out vec4 vcolor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
vcolor = acolor * vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)] + vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];
tc = atc;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 cxmul;
out vec4 fcolor;
void main() {
fcolor = cxmul;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 cxmul;
out vec4 fcolor;
void main() {
fcolor = cxmul;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 cxmul;
out vec4 fcolor;
void main() {
fcolor = cxmul;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[48];
in vec4 pos;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec2 atc;
in vec4 pos;
in float vbatch;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc = atc;
fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];
#version 150
uniform mat4 vfmuniforms[24];
in vec2 atc;
in vec4 pos;
in float vbatch;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc = atc;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec2 atc;
in vec4 pos;
in float vbatch;
out vec2 tc;
out vec4 vcolor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
vcolor = acolor * vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
tc = atc;
#version 150
uniform mat4 vfmuniforms[24];
in vec4 pos;
in float vbatch;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
#version 150
uniform vec4 vfuniforms[96];
in vec2 atc;
in vec4 pos;
in float vbatch;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
tc = atc;
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
#version 150
uniform vec4 vfuniforms[48];
in vec2 atc;
in vec4 pos;
in float vbatch;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
tc = atc;
#version 150
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec2 atc;
in vec4 pos;
in float vbatch;
out vec2 tc;
out vec4 vcolor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
tc = atc;
#version 150
uniform vec4 vfuniforms[48];
in vec4 pos;
in float vbatch;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
in vec2 atc;
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc = atc;
fucxadd = cxadd;
fucxmul = cxmul;
#version 150
uniform mat4 mvp;
in vec2 atc;
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc = atc;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
in vec4 acolor;
in vec2 atc;
in vec4 pos;
out vec2 tc;
out vec4 vcolor;
void main() {
gl_Position = (pos) * ( mvp);
vcolor = acolor * cxmul + cxadd;
tc = atc;
#version 150
uniform mat4 mvp;
in vec4 pos;
void main() {
gl_Position = (pos) * ( mvp);
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
in vec2 atc;
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc = atc;
fucxadd = cxadd;
fucxmul = cxmul;
#version 150
uniform vec4 mvp[2];
in vec2 atc;
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc = atc;
#version 150
uniform sampler2D tex;
in vec2 tc;
in vec4 vcolor;
out vec4 fcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture(tex, tc).r;
fcolor = c;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec2 tc;
in vec4 vcolor;
out vec4 fcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture(tex, tc).r;
fcolor = c;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec2 tc;
in vec4 vcolor;
out vec4 fcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture(tex, tc).r;
fcolor = c;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
in vec4 acolor;
in vec2 atc;
in vec4 pos;
out vec2 tc;
out vec4 vcolor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
vcolor = acolor * cxmul + cxadd;
tc = atc;
#version 150
uniform vec4 cxmul;
out vec4 fcolor;
void main() {
fcolor = cxmul;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform vec4 cxmul;
out vec4 fcolor;
void main() {
fcolor = cxmul;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform vec4 cxmul;
out vec4 fcolor;
void main() {
fcolor = cxmul;
fcolor = fcolor;
#version 150
uniform vec4 mvp[2];
in vec4 pos;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[144];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 3.0)]);
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 pos;
out vec4 color;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 2.0 + 1.0+ 0.1)];
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
color = acolor;
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
in vec4 acolor;
in vec4 pos;
out vec4 color;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
color = acolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(gl_InstanceID * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[144];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[192];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 2.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 8.0 + 4.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 8.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 8.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[144];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 3.0)]);
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 pos;
out vec4 color;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 4.0 + 1.0+ 0.1)];
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
in vec4 factor;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
in vec4 color;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 pos;
out vec4 color;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[144];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[144];
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(gl_InstanceID * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(gl_InstanceID * 6.0 + 1.0+ 0.1)];
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[96];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor;
#version 150
#extension GL_ARB_draw_instanced : enable
uniform vec4 vfuniforms[96];
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(gl_InstanceID * 4.0 + 2.0+ 0.1 + 1.0)]);
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[144];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 2.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 pos;
in float vbatch;
out vec4 color;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];
#version 150
uniform mat4 vfmuniforms[24];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
in vec4 acolor;
in vec4 pos;
in float vbatch;
out vec4 color;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
color = acolor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
in vec4 pos;
in float vbatch;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
in vec4 pos;
in float vbatch;
out vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
#version 150
uniform vec4 vfuniforms[144];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
uniform vec4 vfuniforms[192];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform vec4 vfuniforms[144];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);
factor = afactor;
#version 150
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform vec4 vfuniforms[96];
in vec4 acolor;
in vec4 pos;
in float vbatch;
out vec4 color;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
#version 150
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
factor = afactor;
#version 150
uniform vec4 vfuniforms[48];
in vec4 acolor;
in vec4 pos;
in float vbatch;
out vec4 color;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
#version 150
uniform vec4 vfuniforms[144];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 150
uniform vec4 vfuniforms[144];
in vec4 pos;
in float vbatch;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];
#version 150
uniform vec4 vfuniforms[96];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
#version 150
uniform vec4 vfuniforms[96];
in vec4 pos;
in float vbatch;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
uniform mat4 mvp;
uniform vec4 texgen[2];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[4];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = (pos) * ( mvp);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
uniform mat4 mvp;
uniform vec4 texgen[4];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = (pos) * ( mvp);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
factor = afactor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
in vec4 acolor;
in vec4 pos;
out vec4 color;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
#version 150
uniform mat4 mvp;
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
factor = afactor;
#version 150
uniform mat4 mvp;
in vec4 acolor;
in vec4 pos;
out vec4 color;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
#version 150
uniform mat4 mvp;
uniform vec4 texgen[2];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 150
uniform mat4 mvp;
uniform vec4 texgen[2];
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 color;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex,tc);
vec4 fcolor1 = color;
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor;
#version 150
uniform vec4 mvp[2];
uniform vec4 texgen[2];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[4];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex[2];
in vec4 factor;
in vec2 tc0;
in vec2 tc1;
out vec4 fcolor;
void main() {
vec4 fcolor0 = texture(tex[int(0.0)], tc0);
vec4 fcolor1 = texture(tex[int(1.0)], tc1);
fcolor = mix(fcolor1, fcolor0, factor.r);
fcolor = fcolor;
#version 150
uniform vec4 mvp[2];
uniform vec4 texgen[4];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc0;
out vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
factor = afactor;
#version 150
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 fucxadd;
in vec4 fucxmul;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
in vec4 acolor;
in vec4 pos;
out vec4 color;
out vec4 fucxadd;
out vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
#version 150
in vec4 color;
in vec4 factor;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 factor;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
in vec4 color;
in vec4 factor;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform vec4 mvp[2];
in vec4 acolor;
in vec4 afactor;
in vec4 pos;
out vec4 color;
out vec4 factor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
factor = afactor;
#version 150
in vec4 color;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
in vec4 color;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
in vec4 color;
out vec4 fcolor;
void main() {
fcolor = color;
fcolor = fcolor;
#version 150
uniform vec4 mvp[2];
in vec4 acolor;
in vec4 pos;
out vec4 color;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
fcolor += fucxadd * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 150
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 fucxadd;
in vec4 fucxmul;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor * fucxmul + fucxadd;
fcolor = fcolor;
#version 150
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
in vec4 pos;
out vec4 fucxadd;
out vec4 fucxmul;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.a *= factor.a;
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.a *= factor.a;
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec4 factor;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.a *= factor.a;
fcolor = fcolor;
#version 150
uniform vec4 mvp[2];
uniform vec4 texgen[2];
in vec4 afactor;
in vec4 pos;
out vec4 factor;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 150
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor.rgb = fcolor.rgb * fcolor.a;
fcolor = fcolor;
#version 150
uniform sampler2D tex;
in vec2 tc;
out vec4 fcolor;
void main() {
fcolor = texture(tex,tc);
fcolor = fcolor;
#version 150
uniform vec4 mvp[2];
uniform vec4 texgen[2];
in vec4 pos;
out vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
#version 120
uniform sampler2D srctex;
uniform sampler2D tex;
varying vec2 tc;
void main() {
vec4 fchannels = texture2D(tex, tc);
gl_FragColor  = texture2D(srctex, vec2(fchannels.r, 0.125));
gl_FragColor += texture2D(srctex, vec2(fchannels.g, 0.375));
gl_FragColor += texture2D(srctex, vec2(fchannels.b, 0.625));
gl_FragColor += texture2D(srctex, vec2(fchannels.a, 0.875));
#version 120
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
vec4 diff = fcolor0 - fcolor1;
vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );
vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;
vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));
vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;
float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));
gl_FragColor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );
#version 120
uniform mat4 cxmul;
uniform mat4 cxmul1;
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_original = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_source   = texture2D(tex[int(1.0)], tc1);
gl_FragColor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);
#version 120
uniform sampler2D tex[3];
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
gl_FragColor.a = 1.0;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
#version 120
uniform sampler2D tex[3];
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
#version 120
uniform sampler2D tex[3];
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
gl_FragColor.a = inAlpha;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
#version 120
uniform vec4 mvp[2];
uniform vec4 texgen[6];
attribute vec4 pos;
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
tc2.x = dot(pos, texgen[int(4.0)]);
tc2.y = dot(pos, texgen[int(5.0)]);
#version 120
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
gl_FragColor.a = 1.0;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
#version 120
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
#version 120
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
gl_FragColor.a = inAlpha;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
#version 120
uniform vec4 mvp[2];
uniform vec4 texgen[4];
attribute vec4 pos;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2D(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2D(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2D(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
float  i = 0.0;
for (i = -fsize.x; i <= fsize.x; i++)
color += texture2D(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
float  i = 0.0;
for (i = -fsize.x; i <= fsize.x; i++)
color += texture2D(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[4];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[3];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc = atc;
fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];
#version 120
uniform mat4 vfmuniforms[24];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc = atc;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
vcolor = acolor * vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
tc = atc;
#version 120
uniform mat4 vfmuniforms[24];
attribute vec4 pos;
attribute float vbatch;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
#version 120
uniform vec4 vfuniforms[96];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
tc = atc;
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
#version 120
uniform vec4 vfuniforms[48];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
tc = atc;
#version 120
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
tc = atc;
#version 120
uniform vec4 vfuniforms[48];
attribute vec4 pos;
attribute float vbatch;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec2 atc;
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc = atc;
fucxadd = cxadd;
fucxmul = cxmul;
#version 120
uniform mat4 mvp;
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc = atc;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = (pos) * ( mvp);
vcolor = acolor * cxmul + cxadd;
tc = atc;
#version 120
uniform mat4 mvp;
attribute vec4 pos;
void main() {
gl_Position = (pos) * ( mvp);
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec2 atc;
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc = atc;
fucxadd = cxadd;
fucxmul = cxmul;
#version 120
uniform vec4 mvp[2];
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc = atc;
#version 120
uniform sampler2D tex;
varying vec2 tc;
varying vec4 vcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture2D(tex, tc).a;
gl_FragColor = c;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec2 tc;
varying vec4 vcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture2D(tex, tc).a;
gl_FragColor = c;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec2 tc;
varying vec4 vcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture2D(tex, tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
vcolor = acolor * cxmul + cxadd;
tc = atc;
#version 120
uniform vec4 cxmul;
void main() {
gl_FragColor = cxmul;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxmul;
void main() {
gl_FragColor = cxmul;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxmul;
void main() {
gl_FragColor = cxmul;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 mvp[2];
attribute vec4 pos;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[144];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 2.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];
#version 120
uniform mat4 vfmuniforms[24];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
color = acolor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
#version 120
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
#version 120
uniform vec4 vfuniforms[144];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
#version 120
uniform vec4 vfuniforms[192];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform vec4 vfuniforms[144];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);
factor = afactor;
#version 120
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
#version 120
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
factor = afactor;
#version 120
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
#version 120
uniform vec4 vfuniforms[144];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
#version 120
uniform vec4 vfuniforms[144];
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];
#version 120
uniform vec4 vfuniforms[96];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
#version 120
uniform vec4 vfuniforms[96];
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( mvp);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
uniform mat4 mvp;
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( mvp);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
factor = afactor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
#version 120
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
factor = afactor;
#version 120
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
#version 120
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 120
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 mvp[2];
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
factor = afactor;
#version 120
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
#version 120
varying vec4 color;
varying vec4 factor;
void main() {
gl_FragColor = color;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 factor;
void main() {
gl_FragColor = color;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
varying vec4 factor;
void main() {
gl_FragColor = color;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
factor = afactor;
#version 120
varying vec4 color;
void main() {
gl_FragColor = color;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
void main() {
gl_FragColor = color;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
varying vec4 color;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
#version 120
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
#version 120
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
#version 120
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor;
#version 120
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
uniform sampler2D srctex;
uniform sampler2D tex;
varying vec2 tc;
void main() {
vec4 fchannels = texture2D(tex, tc);
gl_FragColor  = texture2D(srctex, vec2(fchannels.r, 0.125));
gl_FragColor += texture2D(srctex, vec2(fchannels.g, 0.375));
gl_FragColor += texture2D(srctex, vec2(fchannels.b, 0.625));
gl_FragColor += texture2D(srctex, vec2(fchannels.a, 0.875));
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
vec4 diff = fcolor0 - fcolor1;
vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );
vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;
vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));
vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;
float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));
gl_FragColor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );
uniform mat4 cxmul;
uniform mat4 cxmul1;
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_original = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_source   = texture2D(tex[int(1.0)], tc1);
gl_FragColor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);
uniform sampler2D tex[3];
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
gl_FragColor.a = 1.0;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
uniform sampler2D tex[3];
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
uniform sampler2D tex[3];
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);
float inAlpha = fcolor_src.a * fcolor_alp.a;
gl_FragColor.a = inAlpha;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
uniform vec4 mvp[2];
uniform vec4 texgen[6];
attribute vec4 pos;
varying vec2 tc0;
varying vec2 tc1;
varying vec2 tc2;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
tc2.x = dot(pos, texgen[int(4.0)]);
tc2.y = dot(pos, texgen[int(5.0)]);
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
gl_FragColor.a = 1.0;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
gl_FragColor.a = mix(inAlpha, 1.0, fcolor_org.a);
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
uniform sampler2D tex[2];
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);
vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);
float inAlpha = fcolor_src.a;
gl_FragColor.a = inAlpha;
gl_FragColor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / gl_FragColor.a);
uniform vec4 mvp[2];
uniform vec4 texgen[4];
attribute vec4 pos;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r);
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r));
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base * (1.0 - gl_FragColor.a - gl_FragColor.r) * base.a;
gl_FragColor = (scolor * gl_FragColor.a + scolor2 * gl_FragColor.r + base* (1.0 - gl_FragColor.a - gl_FragColor.r)) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform vec4 scolor2;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color.a += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0).a;
color.r += texture2DLod(tex, tc - (offset.xy + i) * texscale.xy, 0.0).a;
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor.ar = clamp((1.0 - gl_FragColor.ar * fsize.z) - (1.0 - gl_FragColor.ra * fsize.z), 0.0, 1.0);
vec4 knockout = base;
gl_FragColor = ((scolor * gl_FragColor.a + scolor2 * gl_FragColor.r)*(1.0-base.a) + base);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
gl_FragColor = scolor * clamp(gl_FragColor.a * fsize.z, 0.0, 1.0);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
float lerpval = clamp((base.a - gl_FragColor.a) * fsize.z, 0.0, 1.0);
gl_FragColor = mix(base, scolor, lerpval) * base.a;
vec4 knockout = base * (1.0-lerpval) * base.a;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor -= knockout;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform vec4 offset;
uniform vec4 scolor;
uniform sampler2D srctex;
uniform vec4 srctexscale;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + (offset.xy + i) * texscale.xy, 0.0);
} // EndBox2.
gl_FragColor = color * fsize.w;
vec4 base = texture2DLod(srctex, tc * srctexscale.xy, 0.0);
gl_FragColor = scolor * clamp(gl_FragColor.a * (1.0-base.a) * fsize.z, 0.0, 1.0) + base;
vec4 knockout = base;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
vec2 i = vec2(0.0, 0.0);
for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
color += texture2DLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
float  i = 0.0;
for (i = -fsize.x; i <= fsize.x; i++)
color += texture2DLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 fsize;
uniform sampler2D tex;
uniform vec4 texscale;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor       = vec4(0.0, 0.0, 0.0, 0.0);
vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
float  i = 0.0;
for (i = -fsize.x; i <= fsize.x; i++)
color += texture2DLod(tex, tc + i * texscale.xy, 0.0);
}} // EndBox1/2.
gl_FragColor = color * fsize.w;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform mat4 cxmul;
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor) * (cxmul) + cxadd * (gl_FragColor.a + cxadd.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[4];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = texture2D(tex[int(3.0)], tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec4 factor;
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[3];
varying vec2 tc;
void main() {
float c0 = float((texture2D(tex[int(0.0)], tc).a - 16./255.) * 1.164);
float U0 = float(texture2D(tex[int(1.0)], tc).a - 128./255.);
float V0 = float(texture2D(tex[int(2.0)], tc).a - 128./255.);
vec4 c = vec4(c0,c0,c0,c0);
vec4 U = vec4(U0,U0,U0,U0);
vec4 V = vec4(V0,V0,V0,V0);
c += V * vec4(1.596, -0.813, 0.0, 0.0);
c += U * vec4(0.0, -0.392, 2.017, 0.0);
c.a = 1.0;
gl_FragColor = c;
gl_FragColor = gl_FragColor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc = atc;
fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];
uniform mat4 vfmuniforms[24];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc = atc;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
vcolor = acolor * vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
tc = atc;
uniform mat4 vfmuniforms[24];
attribute vec4 pos;
attribute float vbatch;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
uniform vec4 vfuniforms[96];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
tc = atc;
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
uniform vec4 vfuniforms[48];
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
tc = atc;
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
tc = atc;
uniform vec4 vfuniforms[48];
attribute vec4 pos;
attribute float vbatch;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec2 atc;
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc = atc;
fucxadd = cxadd;
fucxmul = cxmul;
uniform mat4 mvp;
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc = atc;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = (pos) * ( mvp);
vcolor = acolor * cxmul + cxadd;
tc = atc;
uniform mat4 mvp;
attribute vec4 pos;
void main() {
gl_Position = (pos) * ( mvp);
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec2 atc;
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc = atc;
fucxadd = cxadd;
fucxmul = cxmul;
uniform vec4 mvp[2];
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc = atc;
uniform sampler2D tex;
varying vec2 tc;
varying vec4 vcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture2D(tex, tc).a;
gl_FragColor = c;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec2 tc;
varying vec4 vcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture2D(tex, tc).a;
gl_FragColor = c;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec2 tc;
varying vec4 vcolor;
void main() {
vec4 c = vcolor;
c.a = c.a * texture2D(tex, tc).a;
gl_FragColor = c;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec2 atc;
attribute vec4 pos;
varying vec2 tc;
varying vec4 vcolor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
vcolor = acolor * cxmul + cxadd;
tc = atc;
uniform vec4 cxmul;
void main() {
gl_FragColor = cxmul;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform vec4 cxmul;
void main() {
gl_FragColor = cxmul;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform vec4 cxmul;
void main() {
gl_FragColor = cxmul;
gl_FragColor = gl_FragColor;
uniform vec4 mvp[2];
attribute vec4 pos;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[144];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);
factor = afactor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 2.0 + 1.0+ 0.1)];
factor = afactor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
color = acolor;
fucxadd = vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 2.0 + 1.0+ 0.1)];
uniform mat4 vfmuniforms[24];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
color = acolor;
factor = afactor;
uniform mat4 vfmuniforms[24];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
color = acolor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[96];
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(afactor.b*255.01 * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
factor = afactor;
uniform mat4 vfmuniforms[24];
uniform vec4 vfuniforms[48];
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( vfmuniforms[int(vbatch * 1.0 + 0.0+ 0.1)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
uniform vec4 vfuniforms[144];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
uniform vec4 vfuniforms[192];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];
factor = afactor;
uniform vec4 vfuniforms[144];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);
tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);
tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);
factor = afactor;
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];
factor = afactor;
uniform vec4 vfuniforms[96];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
color = acolor;
fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
factor = afactor;
uniform vec4 vfuniforms[48];
attribute vec4 acolor;
attribute vec4 pos;
attribute float vbatch;
varying vec4 color;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);
color = acolor;
uniform vec4 vfuniforms[144];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];
factor = afactor;
uniform vec4 vfuniforms[144];
attribute vec4 pos;
attribute float vbatch;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);
fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];
fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];
uniform vec4 vfuniforms[96];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);
factor = afactor;
uniform vec4 vfuniforms[96];
attribute vec4 pos;
attribute float vbatch;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);
gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);
tc.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);
tc.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( mvp);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
uniform mat4 mvp;
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = (pos) * ( mvp);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
factor = afactor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
factor = afactor;
uniform mat4 mvp;
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
void main() {
gl_Position = (pos) * ( mvp);
color = acolor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
uniform mat4 mvp;
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = (pos) * ( mvp);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
vec4 fcolor0 = texture2D(tex,tc);
vec4 fcolor1 = color;
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex[2];
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);
vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);
gl_FragColor = mix(fcolor1, fcolor0, factor.r);
gl_FragColor = gl_FragColor;
uniform vec4 mvp[2];
uniform vec4 texgen[4];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc0;
varying vec2 tc1;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc0.x = dot(pos, texgen[int(0.0)]);
tc0.y = dot(pos, texgen[int(1.0)]);
tc1.x = dot(pos, texgen[int(2.0)]);
tc1.y = dot(pos, texgen[int(3.0)]);
factor = afactor;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
varying vec4 fucxadd;
varying vec4 fucxmul;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
fucxadd = cxadd;
fucxmul = cxmul;
varying vec4 color;
varying vec4 factor;
void main() {
gl_FragColor = color;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 factor;
void main() {
gl_FragColor = color;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
varying vec4 factor;
void main() {
gl_FragColor = color;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 color;
varying vec4 factor;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
factor = afactor;
varying vec4 color;
void main() {
gl_FragColor = color;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
varying vec4 color;
void main() {
gl_FragColor = color;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
varying vec4 color;
void main() {
gl_FragColor = color;
gl_FragColor = gl_FragColor;
uniform vec4 mvp[2];
attribute vec4 acolor;
attribute vec4 pos;
varying vec4 color;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
color = acolor;
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = (gl_FragColor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;
gl_FragColor += fucxadd * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
factor = afactor;
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor * fucxmul + fucxadd;
gl_FragColor = gl_FragColor;
uniform vec4 cxadd;
uniform vec4 cxmul;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec4 fucxadd;
varying vec4 fucxmul;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
fucxadd = cxadd;
fucxmul = cxmul;
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.a *= factor.a;
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.a *= factor.a;
gl_FragColor = gl_FragColor;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 afactor;
attribute vec4 pos;
varying vec4 factor;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
factor = afactor;
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.rgb = vec3(gl_FragColor.a, gl_FragColor.a, gl_FragColor.a);
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;
gl_FragColor = gl_FragColor;
uniform sampler2D tex;
varying vec2 tc;
void main() {
gl_FragColor = texture2D(tex,tc);
gl_FragColor = gl_FragColor;
uniform vec4 mvp[2];
uniform vec4 texgen[2];
attribute vec4 pos;
varying vec2 tc;
void main() {
gl_Position = vec4(0.0,0,0.0,1);
gl_Position.x = dot(pos, mvp[int(0.0)]);
gl_Position.y = dot(pos, mvp[int(1.0)]);
tc.x = dot(pos, texgen[int(0.0)]);
tc.y = dot(pos, texgen[int(1.0)]);
glGetActiveUniform
glGetActiveUniformARB
glGetActiveUniformEXT
glMapBufferRange
glMapBufferRangeARB
glMapBufferRangeEXT
glProgramUniform4fv
glProgramUniform4fvARB
glProgramUniform4fvEXT
glGetProgramPipelineiv
glGetProgramPipelineivARB
glGetProgramPipelineivEXT
glCreateShader
glCreateShaderARB
glCreateShaderEXT
glCompressedTexImage2D
glCompressedTexImage2DARB
glCompressedTexImage2DEXT
glGetProgramPipelineInfoLog
glGenerateMipmap
glGenerateMipmapARB
glGenerateMipmapEXT
glProgramBinary
glProgramBinaryARB
glProgramBinaryEXT
glBlendEquation
glBlendEquationARB
glBlendEquationEXT
glGetSynciv
glGetSyncivARB
glGetSyncivEXT
glBindAttribLocation
glBindAttribLocationARB
glBindAttribLocationEXT
glCompileShader
glCompileShaderARB
glCompileShaderEXT
glAttachShader
glAttachShaderARB
glAttachShaderEXT
glBindRenderbuffer
glBindRenderbufferARB
glBindRenderbufferEXT
glGetAttribLocation
glGetAttribLocationARB
glGetAttribLocationEXT
glBlendFuncSeparate
glBlendFuncSeparateARB
glBlendFuncSeparateEXT
glProgramUniform3fv
glProgramUniform3fvARB
glProgramUniform3fvEXT
glGetShaderiv
glGetShaderivARB
glGetShaderivEXT
glGetRenderbufferParameteriv
glBindFragDataLocation
glBindFragDataLocationARB
glBindFragDataLocationEXT
glStringMarkerGREMEDY
glStringMarkerGREMEDYARB
glStringMarkerGREMEDYEXT
glCreateProgram
glCreateProgramARB
glCreateProgramEXT
glUniform1f
glUniform1fARB
glUniform1fEXT
glFenceSync
glFenceSyncARB
glFenceSyncEXT
glGenFramebuffers
glGenFramebuffersARB
glGenFramebuffersEXT
glGenRenderbuffers
glGenRenderbuffersARB
glGenRenderbuffersEXT
glBindProgramPipeline
glBindProgramPipelineARB
glBindProgramPipelineEXT
glFramebufferRenderbuffer
glFramebufferRenderbufferARB
glFramebufferRenderbufferEXT
glGenVertexArrays
glGenVertexArraysARB
glGenVertexArraysEXT
glUniform4fv
glUniform4fvARB
glUniform4fvEXT
glUseProgramStages
glUseProgramStagesARB
glUseProgramStagesEXT
glUnmapBuffer
glUnmapBufferARB
glUnmapBufferEXT
glGenProgramPipelines
glGenProgramPipelinesARB
glGenProgramPipelinesEXT
glClientWaitSync
glClientWaitSyncARB
glClientWaitSyncEXT
glDeleteSync
glDeleteSyncARB
glDeleteSyncEXT
glUniform2fv
glUniform2fvARB
glUniform2fvEXT
glProgramUniform2fv
glProgramUniform2fvARB
glProgramUniform2fvEXT
glProgramUniformMatrix4fv
glProgramUniformMatrix4fvARB
glProgramUniformMatrix4fvEXT
glMapBuffer
glMapBufferARB
glMapBufferEXT
glDrawElementsInstanced
glDrawElementsInstancedARB
glDrawElementsInstancedEXT
glGenBuffers
glGenBuffersARB
glGenBuffersEXT
glBufferData
glBufferDataARB
glBufferDataEXT
glLinkProgram
glLinkProgramARB
glLinkProgramEXT
glActiveTexture
glActiveTextureARB
glActiveTextureEXT
glGetProgramiv
glGetProgramivARB
glGetProgramivEXT
glUniform1fv
glUniform1fvARB
glUniform1fvEXT
glRenderbufferStorage
glRenderbufferStorageARB
glRenderbufferStorageEXT
glDisableVertexAttribArray
glDisableVertexAttribArrayARB
glDisableVertexAttribArrayEXT
glUniform1iv
glUniform1ivARB
glUniform1ivEXT
glGetFragDataLocation
glGetFragDataLocationARB
glGetFragDataLocationEXT
glCheckFramebufferStatus
glCheckFramebufferStatusARB
glCheckFramebufferStatusEXT
glIsRenderbuffer
glIsRenderbufferARB
glIsRenderbufferEXT
glProgramParameteri
glProgramParameteriARB
glProgramParameteriEXT
glGetProgramBinary
glGetProgramBinaryARB
glGetProgramBinaryEXT
glUniform1i
glUniform1iARB
glUniform1iEXT
glDeleteVertexArrays
glDeleteVertexArraysARB
glDeleteVertexArraysEXT
glFramebufferTexture2D
glFramebufferTexture2DARB
glFramebufferTexture2DEXT
glProgramUniform1fv
glProgramUniform1fvARB
glProgramUniform1fvEXT
glDeleteRenderbuffers
glDeleteRenderbuffersARB
glDeleteRenderbuffersEXT
glBufferSubData
glBufferSubDataARB
glBufferSubDataEXT
glDeleteProgram
glDeleteProgramARB
glDeleteProgramEXT
glDeleteFramebuffers
glDeleteFramebuffersARB
glDeleteFramebuffersEXT
glFlushMappedBufferRange
glFlushMappedBufferRangeARB
glFlushMappedBufferRangeEXT
glGetStringi
glGetStringiARB
glGetStringiEXT
glDeleteProgramPipelines
glDeleteProgramPipelinesARB
glDeleteProgramPipelinesEXT
glIsProgram
glIsProgramARB
glIsProgramEXT
glUseProgram
glUseProgramARB
glUseProgramEXT
glGetProgramInfoLog
glGetProgramInfoLogARB
glGetProgramInfoLogEXT
glDeleteShader
glDeleteShaderARB
glDeleteShaderEXT
glDeleteBuffers
glDeleteBuffersARB
glDeleteBuffersEXT
glBindFramebuffer
glBindFramebufferARB
glBindFramebufferEXT
glShaderSource
glShaderSourceARB
glShaderSourceEXT
glBindBuffer
glBindBufferARB
glBindBufferEXT
glIsFramebuffer
glIsFramebufferARB
glIsFramebufferEXT
glGetShaderInfoLog
glGetShaderInfoLogARB
glGetShaderInfoLogEXT
glUniformMatrix4fv
glUniformMatrix4fvARB
glUniformMatrix4fvEXT
glEnableVertexAttribArray
glEnableVertexAttribArrayARB
glEnableVertexAttribArrayEXT
glVertexAttribPointer
glVertexAttribPointerARB
glVertexAttribPointerEXT
glUniform2f
glUniform2fARB
glUniform2fEXT
glGetUniformLocation
glGetUniformLocationARB
glGetUniformLocationEXT
glProgramUniform1iv
glProgramUniform1ivARB
glProgramUniform1ivEXT
glUniform3fv
glUniform3fvARB
glUniform3fvEXT
glBindVertexArray
glBindVertexArrayARB
glBindVertexArrayEXT
glGetProgramPipelineInfoLogARB
glGetProgramPipelineInfoLogEXT
glGetRenderbufferParameterivARB
glGetRenderbufferParameterivEXT
glGetFramebufferAttachmentParameteriv
glGetFramebufferAttachmentParameterivARB
glGetFramebufferAttachmentParameterivEXT
sAmTb
BKbhTb~XBK!;
A!;I2
?u='@
Bogus message code %d
Bogus buffer control mode
Invalid crop request
DCT coefficient out of range
Bogus input colorspace
Bogus JPEG colorspace
Bogus marker length
Invalid memory pool code %d
Bogus sampling factors
Bogus virtual array access
Suspension not allowed here
Bogus DAC index %d
Bogus DAC value 0x%x
Bogus DHT index %d
Bogus DQT index %d
Read from EMS failed
Write to EMS failed
Input file read error
Empty input file
Premature end of input file
Not implemented yet
Backing store not supported
Insufficient memory (case %d)
Read failed on temporary file
Seek failed on temporary file
Read from XMS failed
Write to XMS failed
8d  15-Jan-2012
Define Huffman Table 0x%02x
Define Restart Interval %u
Freed EMS handle %u
Obtained EMS handle %u
End Of Image
Unexpected marker 0x%02x
Quantizing to %d colors
RST%d
Start of Image
Start Of Scan: %d components
    Component %d: dc=%d ac=%d
  Ss=%d, Se=%d, Ah=%d, Al=%d
Closed temporary file %s
Opened temporary file %s
Freed XMS handle %u
Obtained XMS handle %u
Premature end of JPEG file
ALIGN_TYPE is wrong, please fix
MAX_ALLOC_CHUNK is wrong, please fix
Invalid component ID %d in SOS
DCT scaled block size %dx%d not supported
Component index %d: mismatching sampling ratio %d:%d, %d:%d, %c
Bogus Huffman table definition
Wrong JPEG library version: library is %d, caller expects %d
Sampling factors too large for interleaved scan
Unsupported JPEG data precision %d
Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d
Invalid progressive parameters at scan script entry %d
Invalid scan script at entry %d
Improper call to JPEG library in state %d
JPEG parameter struct mismatch: library thinks size is %u, caller expects %u
Buffer passed to JPEG library is too small
CCIR601 sampling not implemented yet
Too many color components: %d, max %d
Unsupported color conversion request
Empty JPEG image (DNL not supported)
Didn't expect more than one scan
Output file write error --- out of disk space?
Fractional sampling not implemented yet
Huffman code size table overflow
Missing Huffman code table entry
Maximum supported image dimension is %u pixels
Cannot transcode due to multiple use of quantization table %d
Scan script does not transmit all data
Invalid color quantization mode change
Requested feature was omitted at compile time
Arithmetic table 0x%02x was not defined
Huffman table 0x%02x was not defined
JPEG datastream contains no image
Quantization table 0x%02x was not defined
Not a JPEG file: starts with 0x%02x 0x%02x
Cannot quantize more than %d color components
Cannot quantize to fewer than %d colors
Cannot quantize to more than %d colors
Invalid JPEG file structure: two SOF markers
Invalid JPEG file structure: missing SOS marker
Unsupported JPEG process: SOF type 0x%02x
Invalid JPEG file structure: two SOI markers
Invalid JPEG file structure: SOS before SOF
Failed to create temporary file %s
Write failed on temporary file --- out of disk space?
Application transferred too few scanlines
Unsupported marker type 0x%02x
Virtual array controller messed up
Image too wide for this implementation
Copyright (C) 2012, Thomas G. Lane, Guido Vollbeding
Caution: quantization tables are too coarse for baseline JPEG
Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d
Unknown APP0 marker (not JFIF), length %u
Unknown APP14 marker (not Adobe), length %u
Define Arithmetic Table 0x%02x: 0x%02x
Define Quantization Table %d  precision %d
        %3d %3d %3d %3d %3d %3d %3d %3d
JFIF APP0 marker: version %d.%02d, density %dx%d  %d
Warning: thumbnail image size does not match data length %u
JFIF extension marker: type 0x%02x, length %u
    with %d x %d thumbnail image
Miscellaneous marker 0x%02x, length %u
        %4u %4u %4u %4u %4u %4u %4u %4u
Quantizing to %d = %d*%d*%d colors
Selected %d colors for quantization
At marker 0x%02x, recovery action %d
Smoothing not supported with nonstandard sampling ratios
Start Of Frame 0x%02x: width=%u, height=%u, components=%d
    Component %d: %dhx%dv q=%d
JFIF extension marker: JPEG-compressed thumbnail image, length %u
JFIF extension marker: palette thumbnail image, length %u
JFIF extension marker: RGB thumbnail image, length %u
Unrecognized component IDs %d %d %d, assuming YCbCr
Unknown Adobe color transform code %d
Corrupt JPEG data: bad arithmetic code
Inconsistent progression sequence for component %d coefficient %d
Corrupt JPEG data: %u extraneous bytes before marker 0x%02x
Corrupt JPEG data: premature end of data segment
Corrupt JPEG data: bad Huffman code
Warning: unknown JFIF revision number %d.%02d
Corrupt JPEG data: found marker 0x%02x instead of RST%d
Invalid SOS parameters for sequential JPEG
Application transferred too many scanlines
JPEGMEM
%ld%c
Too many bytes for PNG signature
Potential overflow in png_zalloc()
Application built with libpng-
Unknown freer parameter in png_data_freer
libpng version 1.5.13 - September 27, 2012
Copyright (c) 1998-2012 Glenn Randers-Pehrson
Copyright (c) 1996-1997 Andreas Dilger
Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.
 libpng version 1.5.13 - September 27, 2012
Image width exceeds user limit in IHDR
Image height exceeds user limit in IHDR
Width is too large for libpng to process pixels
Invalid color type/bit depth combination in IHDR
Unknown interlace method in IHDR
Unknown compression method in IHDR
MNG features are not allowed in a PNG datastream
ASCII conversion buffer too small
extreme cHRM chunk cannot be converted to tristimulus values
internal error in png_XYZ_from_xy
Ignoring attempt to set negative chromaticity value
Ignoring attempt to set cHRM RGB triangle with zero area
 but running with 
Ignoring invalid time value
 +0000
Image width is zero in IHDR
Image height is zero in IHDR
Invalid image width in IHDR
Invalid image height in IHDR
Invalid bit depth in IHDR
Invalid color type in IHDR
Unknown filter method in IHDR
Invalid filter method in IHDR
Invalid IHDR data
fixed point overflow ignored
Invalid cHRM white point
Invalid cHRM red point
Invalid cHRM green point
Invalid cHRM blue point
gamma table being rebuilt
CXYZ values out of representable range
Out of range gamma value ignored
Invalid palette size, hIST allocation skipped
Insufficient memory for hIST chunk data
Invalid format for pCAL parameter
Insufficient memory for pCAL purpose
Insufficient memory for pCAL units
Insufficient memory for pCAL params
Insufficient memory for pCAL parameter
Memory allocation failed while processing sCAL
Insufficient memory to process iCCP chunk
Insufficient memory to process iCCP profile
text compression mode is out of range
Insufficient memory to store text
tRNS chunk has out-of-range samples for bit_depth
Out of memory while processing sPLT chunk
Out of memory while processing unknown chunk
Attempt to set buffer size beyond max ignored
cHRM Blue Y
cHRM Blue X
cHRM Green Y
cHRM Green X
cHRM Red Y
cHRM Red X
cHRM White Y
cHRM White X
cHRM Red Z
png_set_gAMA
Invalid pCAL equation type
Invalid sCAL unit
Invalid sCAL width
Invalid sCAL height
Invalid sCAL width ignored
Invalid sCAL height ignored
Invalid palette length
No memory for sPLT palettes
?1.2.3.4
zlib memory error
zlib stream error
zlib version error
Unknown zlib error
Missing IHDR before IDAT
Missing PLTE before IDAT
Decompression error
Not enough image data
Extra compressed data
bad adaptive filter value
sequential row overflow
Too many IDATs found
Invalid attempt to read row data
internal sequential row size calculation error
Interlace handling should be turned on when using png_read_image
Read palette index exceeding num_palette
Image is too high to process with png_read_png()
Read Error
Call to NULL read function
Can't set both read_data_fn and write_data_fn in the same structure
Write Error
Call to NULL write function
Unknown filter heuristic method
Writing zero-length unknown chunk
Valid palette required for paletted images
Wrote palette index exceeding num_palette
png_write_info was never called before png_write_row
internal write transform logic error
Unknown row filter for method 0
Can't add Up filter after starting
Can't add Average filter after starting
Can't add Paeth filter after starting
Only compression windows <= 32k supported by PNG
Only compression windows >= 256 supported by PNG
Compression window is being reset to 512
Only compression method 8 is supported by PNG
Text compression window is being reset to 512
No IDATs written into file
Unknown custom filter method
p@gamma value
png_set_background
invalid alpha mode
rgb to gray green coefficient
rgb to gray red coefficient
invalid background gamma type
NULL row buffer
Uninitialized row
Can't discard critical data on CRC error
Application must supply a known background gamma
output gamma out of expected range
conflicting calls to set alpha mode and background
invalid error action to rgb_to_gray
ignoring out of range rgb_to_gray coefficients
libpng does not support gamma+background+rgb_to_gray
png_do_encode_alpha: unexpected call
png_do_rgb_to_gray found nongray pixel
png_do_quantize returned rowbytes=0
incorrect png_set_filler call ignored
Out of Memory
123456789
0123456789ABCDEF
0123456789ABCDEFlibpng warning: %s
libpng error: %s
PNG fixed point integer out of range
Buffer error in compressed datastream
Data error in compressed datastream
Incomplete compressed datastream
PNG unsigned integer out of range
PNG file corrupted by ASCII conversion
Exceeded size limit while expanding chunk
Not enough memory to decompress chunk
Ignoring PLTE chunk in grayscale PNG
Truncating incorrect tRNS chunk length
Truncating incorrect info tRNS chunk length
Ignoring gAMA chunk with out of range gamma
Ignoring incorrect gAMA value @1 when sRGB is also present
Ignoring cHRM chunk with negative chromaticities
Ignoring incorrect cHRM white(@1,@2) r(@3,@4)g(@5,@6)b(@7,@8) when sRGB is also present
internal error handling cHRM coefficients
internal error handling cHRM->XYZ
Ignoring incorrect cHRM value when sRGB is also present
Ignoring nonzero compression type in iCCP chunk
Profile size field missing from iCCP chunk
Ignoring iCCP chunk with declared size = @1 and actual length = @2
No space in chunk cache for sPLT
sPLT chunk requires too much memory
tRNS chunk not allowed with alpha channel
Incorrect bKGD chunk index value
Invalid pCAL parameters for equation type
Unrecognized equation type for pCAL chunk
Out of memory while processing sCAL chunk
Invalid sCAL ignored: invalid unit
Invalid sCAL chunk ignored: bad width format
Invalid sCAL chunk ignored: non-positive width
Invalid sCAL chunk ignored: bad height format
Invalid sCAL chunk ignored: non-positive height
No space in chunk cache for tEXt
No memory to process text chunk
Not enough memory to process text chunk
Insufficient memory to process text chunk
No space in chunk cache for zTXt
Out of memory processing zTXt chunk
Unknown compression type in zTXt chunk
Not enough memory to process zTXt chunk
Insufficient memory to store zTXt chunk
No space in chunk cache for iTXt
No memory to process iTXt chunk
Unknown iTXt compression type or method
Not enough memory to process iTXt chunk
Insufficient memory to store iTXt chunk
No space in chunk cache for unknown chunk
internal row size calculation error
invalid user transform pixel depth
Row has too many bytes to allocate in memory
Not a PNG file
CRC error
invalid chunklength
png_inflate logic error
Unknown compression type @1
Out of place IHDR
Invalid IHDR chunk
Missing IHDR before PLTE
Invalid PLTE after IDAT
Duplicate PLTE chunk
Invalid palette chunk
No image in file
Incorrect IEND chunk length
Missing IHDR before gAMA
Invalid gAMA after IDAT
Out of place gAMA chunk
Duplicate gAMA chunk
Incorrect gAMA chunk length
Missing IHDR before sBIT
Invalid sBIT after IDAT
Out of place sBIT chunk
Duplicate sBIT chunk
Incorrect sBIT chunk length
Missing IHDR before cHRM
Invalid cHRM after IDAT
Out of place cHRM chunk
Duplicate cHRM chunk
Incorrect cHRM chunk length
Missing IHDR before sRGB
Invalid sRGB after IDAT
Out of place sRGB chunk
Duplicate sRGB chunk
Incorrect sRGB chunk length
Unknown sRGB intent
Missing IHDR before iCCP
Invalid iCCP after IDAT
Out of place iCCP chunk
Duplicate iCCP chunk
Malformed iCCP chunk
Missing IHDR before sPLT
Invalid sPLT after IDAT
malformed sPLT chunk
sPLT chunk has bad length
sPLT chunk too long
Missing IHDR before tRNS
Invalid tRNS after IDAT
Duplicate tRNS chunk
Incorrect tRNS chunk length
Missing PLTE before tRNS
Zero length tRNS chunk
Missing IHDR before bKGD
Invalid bKGD after IDAT
Missing PLTE before bKGD
Duplicate bKGD chunk
Incorrect bKGD chunk length
Missing IHDR before hIST
Invalid hIST after IDAT
Missing PLTE before hIST
Duplicate hIST chunk
Incorrect hIST chunk length
Missing IHDR before pHYs
Invalid pHYs after IDAT
Duplicate pHYs chunk
Incorrect pHYs chunk length
Missing IHDR before oFFs
Invalid oFFs after IDAT
Duplicate oFFs chunk
Incorrect oFFs chunk length
Missing IHDR before pCAL
Invalid pCAL after IDAT
Duplicate pCAL chunk
No memory for pCAL purpose
Invalid pCAL data
No memory for pCAL params
Missing IHDR before sCAL
Invalid sCAL after IDAT
Duplicate sCAL chunk
sCAL chunk too short
Out of place tIME chunk
Duplicate tIME chunk
Incorrect tIME chunk length
Missing IHDR before tEXt
Missing IHDR before zTXt
Truncated zTXt chunk
Missing IHDR before iTXt
Truncated iTXt chunk
Malformed iTXt chunk
unknown critical chunk
error in user chunk
invalid chunk type
internal row logic error
internal row width error
Decompression Error
Extra compression data
DDDDUUUU
00003333
""""UUUU
 0@P`p
!1AQaq
"2BRbr
#3CScs
$4DTdt
%5EUeu
&6FVfv
'7GWgw
(8HXhx
)9IYiy
*:JZjz
+;K[k{
,<L\l|
-=M]m}
.>N^n~
/?O_o
invalid zlib state
) version error
) stream error
) memory error
) unknown error
stream
[no zlib message]
length exceeds PNG maxima
Invalid filter type specified
Invalid sBIT depth specified
zero length keyword
Zero length keyword
zlib failed to initialize compressor (
zstream already in use (internal error)
zlib failed to reset compressor: @1(@2): @3
zstream not in use (internal error)
Invalid zlib compression method or flags in non-IDAT chunk
Invalid bit depth for grayscale image
Invalid bit depth for RGB image
Invalid bit depth for paletted image
Invalid bit depth for grayscale+alpha image
Invalid bit depth for RGBA image
Invalid image color type specified
Invalid compression type specified
Invalid interlace type specified
Invalid number of colors in palette
Ignoring request to write a PLTE chunk in grayscale PNG
Invalid zlib compression method or flags in IDAT
Invalid sRGB rendering intent specified
Invalid number of transparent colors specified
Ignoring attempt to write tRNS chunk out-of-range for bit_depth
Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8
Can't write tRNS with an alpha channel
Invalid background palette index
Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8
Ignoring attempt to write bKGD chunk out-of-range for bit_depth
Invalid number of histogram entries specified
Out of memory while procesing keyword
invalid keyword character 0x@1
trailing spaces removed from keyword
leading spaces removed from keyword
extra interior spaces removed from keyword
keyword length must be 1 - 79 characters
Unknown compression type in iCCP chunk
Embedded profile length in iCCP chunk is negative
Embedded profile length too large in iCCP chunk
Truncating profile to actual length in iCCP chunk
Empty language field in iTXt chunk
Unrecognized unit type for oFFs chunk
Can't write sCAL (buffer too small)
Unrecognized unit type for pHYs chunk
Invalid time specified for tIME chunk
 deflate 1.2.5 Copyright 1995-2010 Jean-loup Gailly and Mark Adler 
incorrect header check
unknown compression method
invalid window size
unknown header flags set
header crc mismatch
invalid block type
invalid stored block lengths
invalid code lengths set
invalid bit length repeat
invalid literal/lengths set
invalid distances set
invalid literal/length code
invalid distance code
invalid distance too far back
incorrect data check
incorrect length check
too many length or distance symbols
invalid code -- missing end-of-block
 inflate 1.2.5 Copyright 1995-2010 Mark Adler 
								
1.2.5
need dictionary
stream end
file error
data error
insufficient memory
buffer error
incompatible version
false 
(%zu) Descend: %s, (%s), %s
	(%zu) comparing %s with %s
DBG_PATHMATCH
Lowered '%s' -> '%s'
Breaking '%s' in '%s'
Matched '%s' -> '%s'
Unmatched %s
(%zu) readdir failed to find '%s' in '%s'
D333333
SSE and SSE2 are required.
'_? A1> A1> A1> A1>
4fff>fff>fff>fff>
BTI1BTI1
BTI1	
BTI1BTI1BTI1
NULLATI2ATI1$
BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1BTI1
RGB565
RGB888_BLUESCREEN
BGR888_BLUESCREEN
BGR565
BGRA4444
DXT1_ONEBITALPHA
BGRA5551
UVWQ8888
RGBA16161616F
UVLX8888
RGB323232F
RGBA32323232F
RG1616F
RG3232F
RGBX8888
NV_NULL
ATI1N
ATI2N
RGBA1010102
BGRA1010102
D15S1
LINEAR_D24S8
D24X8
D24X4S4
D24FS8
D16_SHADOW
D24X8_SHADOW
LINEAR_BGRX8888
LINEAR_RGBA8888
LINEAR_ABGR8888
LINEAR_ARGB8888
LINEAR_BGRA8888
LINEAR_RGB888
LINEAR_BGR888
LINEAR_BGRX5551
LINEAR_I8
LINEAR_RGBA16161616
LINEAR_A8
LINEAR_DXT1
LINEAR_DXT3
LINEAR_DXT5
LE_BGRX8888
LE_BGRA8888
DXT1_RUNTIME
DXT5_RUNTIME
DXT3_RUNTIME
BFloatBitMap_t::LoadFromFloatBitmap: Received improper bitmap size, skipping!
FloatBitMap_t: Error opening %s
FloatBitMap_t: Error loading %s
FloatBitMap_t::LoadFromBuffer: Received improper buffer size, skipping!
FloatBitMap_t::LoadFromBuffer: Unsupported color format, skipping!
FloatBitMap_t::WriteToBuffer: Received improper buffer size, skipping!
FloatBitMap_t::WriteToBuffer: Unsupported color format, skipping!
%d %d
-1.000000
sub%dx%d.tga
submrg%dx%d.tga
11IRefCounted
8CFunctor
20CRefCountServiceBaseILb1E6CRefMTE
12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE
15CMemberFunctor0IP22CParallelLoopProcessorI13FloatBitMap_t31CLoopMemberFuncJobItemProcessorIS1_S1_S1_EEMS4_FvvE12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor0IP22CParallelLoopProcessorI25FloatBitmapResampleInfo_t25CLoopFuncJobItemProcessorIS1_EEMS4_FvvE12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
?Unsupported PSD color mode!
Unable to read file %s
Displacement Range: (%g, %g)
8File has not been opened!
Unable to read file %s!
CUtlStreamBuffer does not support TEXT_BUFFER's use CUtlBuffer
N9Scaleform3GFx6ButtonE
inline
block
N9Scaleform3GFx4Text26TextStyleParserHandlerBaseE
N9Scaleform3GFx4Text12StyleManagerE
N9Scaleform3GFx4Text10CSSHandlerIwEE
N9Scaleform3GFx4Text22TextStyleParserHandlerIwEE
N9Scaleform20RefCountBaseStatImplINS_15RefCountNTSImplELi326EEE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML4NodeELi326EEE
N9Scaleform3GFx3XML4NodeE
N9Scaleform3GFx3XML11ElementNodeE
N9Scaleform3GFx3XML8TextNodeE
N9Scaleform3GFx3XML8DocumentE
N9Scaleform3GFx3XML10DOMBuilderE
N9Scaleform3GFx14ExternalLibPtrE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML13ObjectManagerELi326EEE
N9Scaleform3GFx3XML13ObjectManagerE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML6PrefixELi326EEE
N9Scaleform3GFx3XML6PrefixE
N9Scaleform15RefCountBaseNTSINS_3GFx3XML8RootNodeELi326EEE
N9Scaleform3GFx3XML8RootNodeE
N9Scaleform8ListNodeINS_6Render13RBGenericImpl9CacheDataEEE
N9Scaleform6Render13RBGenericImpl9CacheDataE
N9Scaleform12RefCountBaseINS_6Render19RenderBufferManagerELi72EEE
N9Scaleform6Render19RenderBufferManagerE
N9Scaleform6Render13RBGenericImpl19RenderBufferManagerE
N9Scaleform6Render13RBGenericImpl12RenderTargetE
N9Scaleform6Render13RBGenericImpl18DepthStencilBufferE
/home/buildbot/buildslave/csgo_pcbeta_client_linux/build/src/public/tier0/tslist.h
CSOAContainer::SetAttributeType - ERROR, trying to change type of previously-defined attribute %d!
15CMemberFunctor7IP13CSOAContainerMS0_FviiiiPKS0_iiEiiiiS3_ii12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor6IP13CSOAContainerMS0_FviiiiiU8__vectorfEiiiiiS2_12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor7IP13CSOAContainerMS0_FviiiiiiiEiiiiiii12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor0IP18CParallelProcessorI26KMeansQuantizationWorkUnit21CFuncJobItemProcessorIS1_ELi1EEMS4_FvvE12CRefCounted1I8CFunctor20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
15CMemberFunctor0IP18CParallelProcessorIi27CMemberFuncJobItemProcessorIi11CCallQueueTI8CTSQueueIP8CFunctorLb0EEES7_ELi1EEMS9_FvvE12CRefCounted1IS4_20CRefCountServiceBaseILb1E6CRefMTEE18CFuncMemPolicyNoneE
;*3$"
r""\\
GCC: (Ubuntu 4.8.1-2ubuntu1~12.04+steamrt2+srt1) 4.8.1
GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
GCC: (Ubuntu 4.8.2-19ubuntu1) 4.8.2
GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3
.symtab
.strtab
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.data.rel.ro
.dynamic
.got.plt
.data
.comment
.gnu_debuglink
__printf_chk@@GLIBC_2.3.4
ftell@@GLIBC_2.2.5
pthread_cond_signal@@GLIBC_2.3.2
deflateInit_
__swprintf_chk@@GLIBC_2.4
glDrawArrays
mbstowcs@@GLIBC_2.2.5
__errno_location@@GLIBC_2.2.5
symlink@@GLIBC_2.2.5
g_VProfCurrentProfile
deflateInit2_
isspace@@GLIBC_2.2.5
strcspn@@GLIBC_2.2.5
atan2@@GLIBC_2.2.5
deflate_copyright
__pow_finite@@GLIBC_2.15
rewind@@GLIBC_2.2.5
strtoll@@GLIBC_2.2.5
scandir@@GLIBC_2.2.5
__vswprintf_chk@@GLIBC_2.4
mkfifo@@GLIBC_2.2.5
ceil@@GLIBC_2.2.5
__ctype_tolower_loc@@GLIBC_2.3
__longjmp_chk@@GLIBC_2.11
__stpcpy_chk@@GLIBC_2.3.4
sin@@GLIBC_2.2.5
glColorMask
strstr@@GLIBC_2.2.5
WriteMiniDump
s_pInterfaceRegs
LoggingSystem_RegisterLoggingChannel
_edata
glClear
glDisable
glViewport
pthread_mutex_trylock@@GLIBC_2.2.5
wcsncpy@@GLIBC_2.2.5
zlibVersion
inflate_copyright
rand@@GLIBC_2.2.5
_ZSt9terminatev@@GLIBCXX_3.4
dl_iterate_phdr@@GLIBC_2.2.5
wcschr@@GLIBC_2.2.5
link@@GLIBC_2.2.5
_ZN12CThreadEvent3SetEv
strtoul@@GLIBC_2.2.5
log@@GLIBC_2.2.5
realpath@@GLIBC_2.3
pthread_cond_broadcast@@GLIBC_2.3.2
strchr@@GLIBC_2.2.5
glTexImage2D
floorf@@GLIBC_2.2.5
wcsncat@@GLIBC_2.2.5
cbrtf@@GLIBC_2.2.5
__expf_finite@@GLIBC_2.15
strspn@@GLIBC_2.2.5
rmdir@@GLIBC_2.2.5
sincosf@@GLIBC_2.2.5
__cxa_finalize@@GLIBC_2.2.5
strlen@@GLIBC_2.2.5
__acosf_finite@@GLIBC_2.15
memcmp@@GLIBC_2.2.5
mkdir@@GLIBC_2.2.5
deflate
glReadPixels
_ZN13CThreadRWLock11WaitForReadEv
unlink@@GLIBC_2.2.5
strncmp@@GLIBC_2.2.5
deflateSetDictionary
_ZN17CThreadSyncObjectD2Ev
wcstof@@GLIBC_2.2.5
g_pMemAlloc
wcscoll@@GLIBC_2.2.5
glPixelStorei
getcwd@@GLIBC_2.2.5
deflateSetHeader
strncpy@@GLIBC_2.2.5
glGetError
utime@@GLIBC_2.2.5
pthread_attr_setschedparam@@GLIBC_2.2.5
memset@@GLIBC_2.2.5
abort@@GLIBC_2.2.5
ceilf@@GLIBC_2.2.5
dlerror@@GLIBC_2.2.5
tan@@GLIBC_2.2.5
pthread_create@@GLIBC_2.2.5
readdir64@@GLIBC_2.2.5
__strncpy_chk@@GLIBC_2.3.4
__sprintf_chk@@GLIBC_2.3.4
deflateEnd
trunc@@GLIBC_2.2.5
inflateMark
sincos@@GLIBC_2.2.5
rename@@GLIBC_2.2.5
_ZN10CVProfNode10GetSubNodeEPKciS1_i
glGetString
__cxa_guard_abort@@CXXABI_1.3
inflatePrime
__cxa_guard_release@@CXXABI_1.3
chown@@GLIBC_2.2.5
pthread_attr_setstacksize@@GLIBC_2.2.5
strncat@@GLIBC_2.2.5
glGetTexLevelParameteriv
utimes@@GLIBC_2.2.5
_ZTVN10__cxxabiv117__class_type_infoE@@CXXABI_1.3
crc32
sscanf@@GLIBC_2.2.5
LoggingSystem_IsChannelEnabled
_fini
open@@GLIBC_2.2.5
adler32_combine
inflateSync
z_errmsg
dlclose@@GLIBC_2.2.5
sleep@@GLIBC_2.2.5
pthread_mutex_unlock@@GLIBC_2.2.5
_ZN16IDirect3DDevice911SaveGLStateEv
iswspace@@GLIBC_2.2.5
iconv_open@@GLIBC_2.2.5
Error
_ZN16IDirect3DDevice911GetViewportEP13_D3DVIEWPORT9
__asin_finite@@GLIBC_2.15
strtod@@GLIBC_2.2.5
inflateGetHeader
sqrt@@GLIBC_2.2.5
glBlendFunc
inflate
_ZN13CThreadRWLock12LockForWriteEv
iconv_close@@GLIBC_2.2.5
__log_finite@@GLIBC_2.15
ThreadInterlockedExchangePointer
__vsnprintf_chk@@GLIBC_2.3.4
memcpy@@GLIBC_2.14
inflateSyncPoint
atan@@GLIBC_2.2.5
sinf@@GLIBC_2.2.5
__exp_finite@@GLIBC_2.15
wcslen@@GLIBC_2.2.5
KeyValuesSystem
__strcpy_chk@@GLIBC_2.3.4
wcstombs@@GLIBC_2.2.5
__atan2f_finite@@GLIBC_2.15
inflateInit2_
gmtime@@GLIBC_2.2.5
__cxa_atexit@@GLIBC_2.2.5
inflateInit_
pthread_self@@GLIBC_2.2.5
glScissor
_ZN17CThreadSpinRWLock15SpinLockForReadEv
SteamAPI_RegisterCallback
towlower@@GLIBC_2.2.5
pow@@GLIBC_2.2.5
Warning
chmod@@GLIBC_2.2.5
ThreadInterlockedCompareExchangePointer
strcpy@@GLIBC_2.2.5
glEnable
acos@@GLIBC_2.2.5
glStencilMask
glGetIntegerv
SteamInternal_CreateInterface
__isoc99_sscanf@@GLIBC_2.7
V_UTF8ToUnicode
fclose@@GLIBC_2.2.5
glDrawElements
__xstat@@GLIBC_2.2.5
lchown@@GLIBC_2.2.5
glStencilFunc
isalnum@@GLIBC_2.2.5
glXGetProcAddressARB
acosf@@GLIBC_2.2.5
LoggingSystem_Log
inflateEnd
freopen@@GLIBC_2.2.5
RandomFloat
SteamAPI_InitSafe
_ZN13CThreadRWLock11UnlockWriteEv
__ctype_b_loc@@GLIBC_2.3
strcasecmp@@GLIBC_2.2.5
__atan2_finite@@GLIBC_2.15
deflateCopy
deflateBound
strrchr@@GLIBC_2.2.5
fseek@@GLIBC_2.2.5
inflateCopy
__stack_chk_fail@@GLIBC_2.4
_init
fopen64@@GLIBC_2.2.5
MemFreeScratch
_ZN10CVProfNode10EnterScopeEv
__dynamic_cast@@CXXABI_1.3
__lxstat64@@GLIBC_2.2.5
MemAllocScratch
LOG_GENERAL
DevMsg
pthread_mutex_destroy@@GLIBC_2.2.5
_Jv_RegisterClasses
fflush@@GLIBC_2.2.5
fopen@@GLIBC_2.2.5
free@@GLIBC_2.2.5
crc32_combine64
pthread_cond_init@@GLIBC_2.3.2
CommandLine
glStencilOp
exit@@GLIBC_2.2.5
pthread_attr_init@@GLIBC_2.2.5
getenv@@GLIBC_2.2.5
towupper@@GLIBC_2.2.5
glBindTexture
get_crc_table
ThreadGetCurrentId
fputc@@GLIBC_2.2.5
wcscmp@@GLIBC_2.2.5
strncasecmp@@GLIBC_2.2.5
zError
CreateInterface
_ZTVN10__cxxabiv120__si_class_type_infoE@@CXXABI_1.3
pthread_attr_setdetachstate@@GLIBC_2.2.5
exp@@GLIBC_2.2.5
malloc@@GLIBC_2.2.5
strtoull@@GLIBC_2.2.5
glGetTexParameteriv
fmod@@GLIBC_2.2.5
__xmknod@@GLIBC_2.2.5
glDeleteTextures
stderr@@GLIBC_2.2.5
glTexParameteri
glGenTextures
Plat_IsInDebugSession
inflateReset2
atan2f@@GLIBC_2.2.5
pthread_mutexattr_init@@GLIBC_2.2.5
__memset_chk@@GLIBC_2.3.4
__vsprintf_chk@@GLIBC_2.3.4
putchar@@GLIBC_2.2.5
strcmp@@GLIBC_2.2.5
strtol@@GLIBC_2.2.5
inflateReset
usleep@@GLIBC_2.2.5
deflateReset
deflatePrime
_ZN17CThreadSpinRWLock16SpinLockForWriteEv
__xstat64@@GLIBC_2.2.5
glFlush
_setjmp@@GLIBC_2.2.5
tolower@@GLIBC_2.2.5
tanf@@GLIBC_2.2.5
dlopen@@GLIBC_2.2.5
pthread_mutex_lock@@GLIBC_2.2.5
chdir@@GLIBC_2.2.5
iscntrl@@GLIBC_2.2.5
glClearColor
pthread_mutex_init@@GLIBC_2.2.5
fread@@GLIBC_2.2.5
zlibCompileFlags
opendir@@GLIBC_2.2.5
wcstol@@GLIBC_2.2.5
SteamAPI_GetHSteamPipe
__bss_start
pthread_cond_timedwait@@GLIBC_2.3.2
pthread_cond_wait@@GLIBC_2.3.2
_Z10DevWarningPKcz
strnlen@@GLIBC_2.2.5
closedir@@GLIBC_2.2.5
gettimeofday@@GLIBC_2.2.5
memmove@@GLIBC_2.2.5
SteamAPI_GetHSteamUser
__fprintf_chk@@GLIBC_2.3.4
pthread_once@@GLIBC_2.2.5
__gxx_personality_v0@@CXXABI_1.3
g_pThreadPool
iswalnum@@GLIBC_2.2.5
pthread_attr_destroy@@GLIBC_2.2.5
glTexSubImage2D
__pthread_key_create@@GLIBC_2.2.5
asin@@GLIBC_2.2.5
access@@GLIBC_2.2.5
LoggingSystem_LogDirect
_Z6ConMsgPKcz
SteamAPI_UnregisterCallback
adler32_combine64
__memcpy_chk@@GLIBC_2.3.4
floor@@GLIBC_2.2.5
glGetFloatv
deflateTune
ThreadSleep
inflateUndermine
Plat_ExitProcess
open64@@GLIBC_2.2.5
iswalpha@@GLIBC_2.2.5
__acos_finite@@GLIBC_2.15
_ZTVN10__cxxabiv121__vmi_class_type_infoE@@CXXABI_1.3
_ITM_deregisterTMCloneTable
strpbrk@@GLIBC_2.2.5
inflateSetDictionary
_ZN12CThreadEventC1Eb
isprint@@GLIBC_2.2.5
pthread_exit@@GLIBC_2.2.5
iconv@@GLIBC_2.2.5
_Z6DevMsgPKcz
_ZN10CVProfNode9ExitScopeEv
modf@@GLIBC_2.2.5
swscanf@@GLIBC_2.2.5
pthread_mutexattr_settype@@GLIBC_2.2.5
__cxa_guard_acquire@@CXXABI_1.3
sqrtf@@GLIBC_2.2.5
strdup@@GLIBC_2.2.5
_ZNV16CThreadFastMutex4LockEjj
dlsym@@GLIBC_2.2.5
toupper@@GLIBC_2.2.5
frexp@@GLIBC_2.2.5
wcscasecmp@@GLIBC_2.2.5
cos@@GLIBC_2.2.5
GetCPUInformation
__lxstat@@GLIBC_2.2.5
mount@@GLIBC_2.2.5
adler32
__gmon_start__
glClearStencil
_ITM_registerTMCloneTable
V_UnicodeToUTF8
strcasestr@@GLIBC_2.2.5
localeconv@@GLIBC_2.2.5
pthread_cond_destroy@@GLIBC_2.3.2
fwrite@@GLIBC_2.2.5
deflateParams
crc32_combine
_ZN16IDirect3DDevice914RestoreGLStateEv
RandomSeed
scaleformui_client.so.dbg
