					
						
							
								break;
								depthSuccess++;
								exception += "."
								exception += entry;
								result = result[identifier];
							Log( key + " = " + lookupTable[value] + " <-- " + value );
							Log( key + " = " + result + " <-- " + value );
							Log( key + " = \"" + "~" + value + "\" (unresolved)" );
							build_refs(val.watches[i].val);
							else
							exception += unresolvedId;
							foreach ( entry in m_bindNamesStack )
							iLast = iNext + 1;
							identifiers.push( value.slice( iLast, iNext ) );
							if ( identifier in result )
							local exception = "Unresolved symbol: " + bind + " in ";
							subTableOrArray[key] = "~" + value.slice( 1 );
							subTableOrArray[key] = "~" + value;
							subTableOrArray[key] = lookupTable[value];
							subTableOrArray[key] = result;
							throw exception; 
							unresolvedId = value;
							{
							}
						//::print( "Added " + value + " to call chain " + key + "\n" );
						//::print( "Added " + value + " to call chain.\n" );
						//::print( "Creating new call chain " + key + "\n");
						//::print( "Creating new call simple chain\n");
						args.push( vargv[i] );
						chain <- [];
						chain.push( value );
						chains[key] <- [];
						else
						emitvalue("type","val",v.val);
						foreach( identifier in identifiers )
						found = true;
						identifiers.push( value.slice( iLast ) );
						if ( depthSuccess == identifiers.len() )
						if ( throwException )
						if ( value in lookupTable )
						if(val.watches[i].status!="error")
						key = key.slice( prefix.len() );
						local depthSuccess = 0;
						local iLast = 1;
						local iNext;
						local identifiers = [];
						local result = lookupTable;
						result = func();
						result = func.acall( args ); 
						return false;
						val.watches[i] <- evaluate_watch(val.locals,i,watch);
						val.watches[i] <- {status="error"}
						value = value.slice( 1 );
						while ( ( iNext = value.find( ".", iLast ) ) != null )
						{
						}
					args.push( scope );
					args.push( vargv[i] );
					attribute("exp",v.exp);
					attribute("id",i.tostring());
					attribute("status",v.status);
					colon = description.len();
					continue;
					else
					else if ( controlChar == '@' )
					else{
					emitvalue("kt","kv",idx);
					emitvalue("vt","v",obj[idx]);
					for ( i = 0; i < vargc; i++ )
					found = false;
					found = true;
					foundMatch = ( key.find( prefix ) == 0 )
					foundMatch = ( prefix == key );
					if ( !(chain) )
					if ( !(key in chains) )
					if ( !args.len() )
					if ( !chain.len() || chain != value )
					if ( !chain.len() || chain.top() != value )
					if ( !exactMatch )
					if ( controlChar == '^' )
					if ( result != null && !result )
					if ( unresolvedId != null )
					if(v.status!="error") {
					if(val.src!="NATIVE"){
					key = key.slice( prefix.len() );
					local chain = chains[key];
					local controlChar = value[0]
					local func = chain[i];
					local result;
					local unresolvedId = null;
					result = func.pacall( scope, args ); 
					result = func.pcall( scope );
					return false;
					return;
					val.watches[i].exp <- watch;
					{
					}
				Assert( typeof(symbol) == "string" )
				Document( symbol, itemDescription[0], itemDescription[1] );
				EstablishDelegation( childTable, value );
				Log( "{" );
				Log( "}" );
				Log( isTable ? "{" : "[" );
				Log( isTable ? "}" : "]" );
				Log( key + " =" );
				Log( subTablePair[0] + " = " );
				RemoveDelegation( value );
				args.push( scope );
				attribute("name",getvalue(i).tostring());
				beginelement("e");	
				beginelement("w");
				description = description.slice( colon + 1 );
				else
				emitvalue("type","val",v);
				endelement("e");	
				endelement("w");
				for ( i = 0; i < vargc; i++ )
				for ( i = chain.len() - 1; i >= 0; i -= 1 )
				foreach(i,watch in watches)
				func(obj,idx,val);
				func_src=func_src+","
				if ( !Resolve( subTablePair[1], subTablePair[1], false ) )
				if ( !args.len() )
				if ( ::type(idx) == "string" && idx.find( "__" ) == 0 )
				if ( Resolve( ( isTable ) ? value : lookupTable, value, throwException ) )
				if ( colon == null )
				if ( exactMatch )
				if ( foundMatch )
				if ( key.find( prefix ) == 0 )
				if ( result != null && !result )
				if ( string != "*" && name.tolower().find( string.tolower() ) == null )
				if ( value.len() )
				if ( vargc > 0 )
				if(::type(val) == "function")
				local alias = description.slice( 1, colon );
				local args = [];
				local colon = description.find( ":" );
				local foundMatch = false;
				local func = chain[i];
				local i;
				local result;
				m_bindNamesStack.pop();
				m_bindNamesStack.push( key );
				matches.append( name ); 
				matches.append( string )
				name = alias;
				print( "  " );
				printl( "Description: " + documentation[1] );
				signature = "#";
				signature = GetFunctionSignature( this[name], name );
				signature = documentation[0];
				val.watches <- {}
				{
				}
			    build_refs(i);
			    build_refs(val);
			EstablishDelegation( m_targetTable, subTablePair[1] );
			RemoveDelegation( subTablePair[1] );
			attribute("typeof",_typeof);
			beginelement("l");
			build_refs(l);
			delete roottable[name];
			else
			endelement("l");
			first=null
			for ( i = chain.len() - 1; i >= 0; i -= 1 )
			for ( local i = 0; i < m_logIndent; i++ )
			foreach( name, documentation in Documentation.functions )
			foreach( subTablePair in m_fixupSet )
			foreach( symbol, itemDescription in symbolOrTable )
			foreach(i,v in val.watches)
			func(obj,idx,obj[idx]);
			func_src=func_src+i
			if ( chain.len() )
			if ( description[0] == '#' )
			if ( documentation[0] != "#" )
			if ( documentation[1].len() )
			if ( isTable || isArray )
			if ( string in Documentation.functions )
			if ( type == "string" )
			if ( type == "table" )
			if ( typeof( value ) == "function" ) 
			if ( vargc > 0 )
			if(!first){
			if("watches" in this) {
			iterateobject(i,function (obj,idx,val) {
			local args = [];
			local b = ( description[0] == '#' );
			local chain = chains[event];
			local documentation = Documentation.functions[name];
			local i;
			local isArray = ( type == "array" )
			local isTable = ( type == "table" );
			local result = name;
			local signature;
			local type = typeof value;
			objs_reg.refs[t] <- objs_reg.maxid++;
			params.append(v)
			print( "\n" ); 
			printl( "Function:    " + name );
			printl( "Signature:   " + signature );
			printl( "Symbol " + string + " not found" );
			printl( string );
			printl( symbolOrTable + ":" + itemIfSymbol.tostring() + "/" + descriptionIfSymbol );
			return NativeFunctionSignatures[nativeFunction]
			return objs_reg.refs[v].tostring();
			return pack_type(::type(v));
			return v;
			return;
			roottable[name] = saved;
			saved = roottable[name];
			scope = ::getroottable();
			scope = scopeForThis;
			})
		    foreach(idx,val in obj)
		    func(obj,idx,val);
		    iterateobject(t,function(o,i,val):(objs_reg)
		    return "null";
		    return v.tostring();
		    return v;
		    {
		    }
		    })
		   foreach(idx,val in obj.getclass())
		   {
		   }
		// Expose a bound global function to dispatch to this object
		Documentation.functions[name] <- [ signature, description ]
		HookRootMetamethod( "_get", function( key ) { return "^" + key; } );
		HookRootMetamethod( "_newslot", function( key, value ) { if ( typeof value == "table" ) { m_fixupSet.push( [ key, value ] ); this.rawset( key, value ); };  }.bindenv(this) );
		Log( "...end resolution" );
		Log( "Begin late bind on table " + m_targetTable );
		Log( "Begin resolution... " )
		Log( "End late bind on table " + m_targetTable );
		UnhookRootMetamethod( "_get" );
		UnhookRootMetamethod( "_newslot" );
		attribute("fnc",val.func);
		attribute("line",val.line.tostring());
		attribute("ref",o.tostring());
		attribute("src",val.src);
		attribute("type",(i==::getroottable()?"r":pack_type(::type(i))));
		beginelement("call");
		beginelement("o");
		case "array":
		case "bool":
		case "class":
		case "float":
		case "instance":
		case "integer":
		case "null":
		case "string":
		case "table":
		catch(e) {
		chain = [];
		chains = {};
		classes = {}
		default:
		delegate null : childTable;
		delegate null : scope;
		delegate outer : result;
		delegate parentTable : childTable;
		delete roottable[saveSlot];
		delete scope.parent[scope.__vname];
		else
		else if ( exact )
		endelement("call");
		endelement("o");
		exactMatch = exactNameMatch
		foreach( key, value in childTable )
		foreach( key, value in scope )
		foreach( key, value in subTableOrArray )
		foreach( name in matches )
		foreach( subTablePair in m_fixupSet )
		foreach(i,l in val.locals)
		foreach(i,v in val.locals)
		foreach(idx,val in obj)
		func(obj,"@ref",obj.ref());
		functions = {}
		if ( chain.len() )
		if ( description.len() )
		if ( event in chains )
		if ( m_log )
		if ( matches.len() == 0 )
		if ( name in roottable )
		if ( nativeFunction in NativeFunctionSignatures )
		if ( saved != null )
		if ( scopeForThis != null )
		if ( string == "*" || !exact )
		if ( typeof( symbolOrTable ) == "table" )
		if(!(t in objs_reg.refs)) {
		if("watches" in val) {
		if(_typeof != ::type(i)) {
		if(i != ::getroottable()){
		if(i!="this" && i[0] != '@'){ //foreach iterators start with @
		if(val.src!="NATIVE") {
		instances = {}
		level++;
		local _typeof = typeof i;
		local found = false;
		local found = true;
		local func=::compilestring(func_src);
		local matches = []
		local roottable = getroottable();
		local saveSlot = "__saved" + name;
		local saved = null;
		local saved = roottable[saveSlot];
		m_log = log;
		m_logIndent++;
		m_logIndent--;
		m_targetTable = target;
		matches.sort();
		prefix = prefixString;
		result = outer[name] <- { __vname=name, __vrefs = 1 };
		result = outer[name];
		result.(void, long double,...)(float, short) += 1;
		return "<unnamed>"
		return found;
		return true;
		return {status="error"}
		return {status="ok" , val=func().acall(params)};
		return;
		roottable["__saved" + name] <- saved;
		roottable[name] <- value;
		scope.__vname = null;
		scope[ "Dispatch" + prefixString ] <- Call.bindenv( this );
		stack.append(si);
		throw "Assertion failed";
		throw "Assertion failed: " + msg;
		throw "Bad reference counting on scope " + scope.__vname;
		try { //TRY TO USE _nexti
		while ( found )
	// private:
	// public:
	//ENUMERATE THE STACK WATCHES
	//EVALUATE ALL WATCHES
	::print("ERROR"+e+"\n");
	::setroottable( ::getroottable().parent );
	::setroottable( currentscope );
	Documentation <-
	["array"] = null,
	["array"]="a",
	["bool"]="b",
	["class"] = null,
	["class"]="y",  
	["float"]="f",
	["function"]="fn",
	["generator"]="g",
	["instance"] = null,
	["instance"]="x", 
	["integer"]="i",
	["null"]="n",
	["string"]="s",
	["table"] = null,
	["table"]="t",
	["thread"]="h",
	["userdata"]="u",
	["weakref"] = null,
	["weakref"]="w"  
	[A\]
	attribute(type_attrib,pack_type(::type(val)));
	attribute(value_attrib,getvalue(val).tostring());
	beginelement("calls");
	beginelement("objs");
	build_tree();
	catch(e)
	chain = null;
	chains = null;
	constructor( prefixString, scopeForThis = null )
	constructor( prefixString, scopeForThis = null, exactNameMatch = false )
	currentscope = ::getroottable();
	else
	else if ( scope.(void, long double,...)(float, short) == 0 )
	else if(ty == "weakref") {
	else {
	endelement("calls");
	endelement("objs");
	exactMatch = false
	foreach(i,o in objs_reg.refs)
	foreach(i,v in locals){
	foreach(i,val in stack)
	func_src=func_src+"){\n"
	func_src=func_src+"return ("+expression+")\n}"
	function Begin( target, log = false )
	function Call( ... )
	function Call( event, ... )
	function Document( symbolOrTable, itemIfSymbol = null, descriptionIfSymbol = null )
	function Document( symbolOrTable, itemIfSymbol = null, descriptionIfSymbol = null ) {}
	function End()
	function EstablishDelegation( parentTable, childTable )
	function HookRootMetamethod( name, value )
	function Log( string )
	function PostScriptExecute() 
	function PrintHelp( string = "*", exact = false )
	function PrintHelp( string = "*", exact = false ) {}
	function RegisterFunctionDocumentation( func, name, signature, description )
	function RemoveDelegation( childTable )
	function Resolve( lookupTable, subTableOrArray, throwException = false )
	function RetrieveNativeSignature( nativeFunction )
	function RetrieveNativeSignature( nativeFunction ) { return "<unnamed>"; }
	function UnhookRootMetamethod( name )
	if ( !(name in outer) )
	if ( b )
	if ( msg != null )
	if ( scope.(void, long double,...)(float, short) < 0 )
	if("collectgarbage" in ::getroottable()) ::collectgarbage();
	if(otype in complex_types)
	if(t == ::getroottable())
	if(ty == "instance") {
	if(type in packed_types)return packed_types[type]
	local first=1;
	local func_src="return function ("
	local otype = ::type(t);
	local params=[];
	local result;
	local ty = ::type(obj);
	m_bindNamesStack = [];
	m_fixupSet = [];
	m_log = false;
	m_logIndent = 0;
	m_targetTable = null;
	objs_reg = null;
	objs_reg.refs[::getroottable()] <- objs_reg.maxid++;
	params.append(locals["this"])
	prefix = null;
	return print( text );
	return print( text + "\n" );
	return result;
	return type
	scope = null;
	scope.(void, long double,...)(float, short) -= 1;
	see copyright notice in sqrdbg.h
	stack = null;
	switch(::type(v))
	try {
	w(UH
	while(si=::getstackinfos(level))
 %s="%s"
 ( def. "%s" )
 2008, Valve Corporation, All rights reserved. ========
 <YwA
 H;CH
 H;C`
 M9t$
 [%.3f server clamped to %.3f]
 [A\A]A^]
 [A\A]]
 [A\]
 []A\
 bytes
 failed to dlopen %s error=%s
 max. %f
 min. %f
 s n  n
"%s" 
"%s" = "%s"
"></img>
"E:#uIA
"t%L;}
#[A\]
$+s$Hc
$<.tO
$A+D$$H
$I;D$
$[A\]
%%.%if%s
%-80s
%-80s - %.80s
%.14g
%f %f %f))
%i %i %i %i
%s %s %s %s
%s [%d]
%s line = (%d) column = (%d) : error %s
%s/%s
%s/bin/%s
%x%x%llx_%s
&#35;
&#36;
&#92;
&AElig;
&Aacute;
&Acirc;
&Agrave;
&Aring;
&Atilde;
&Auml;
&Ccedil;
&ETH;
&Eacute;
&Ecirc;
&Egrave;
&Euml;
&Iacute;
&Icirc;
&Igrave;
&Iuml;
&Ntilde;
&Oacute;
&Ocirc;
&Ograve;
&Oslash;
&Otilde;
&Ouml;
&THORN;
&Uacute;
&Ucirc;
&Ugrave;
&Uuml;
&YA1[]
&Yacute;
&aacute;
&acirc;
&acute;
&aelig;
&agrave;
&amp;
&apos;
&aring;
&atilde;
&auml;
&brvbar;
&ccedil;
&cedil;
&cent;
&copy;
&curren;
&deg;
&divide;
&eacute;
&ecirc;
&egrave;
&eth;
&euml;
&euro;
&frac12;
&frac14;
&frac34;
&iacute;
&icirc;
&iexcl;
&igrave;
&iquest;
&iuml;
&laquo;
&macr;
&mdash;
&micro;
&middot;
&nbsp;
&ndash;
&not;
&ntilde;
&oacute;
&ocirc;
&ograve;
&ordf;
&ordm;
&oslash;
&otilde;
&ouml;
&para;
&plusmn;
&pound;
&quot;
&quot;n
&quot;r
&raquo;
&reg;
&sect;
&shy;
&sup1;
&sup2;
&sup3;
&szlig;
&thorn;
&times;
&trade;
&uacute;
&ucirc;
&ugrave;
&uml;
&uuml;
&yacute;
&yen;
&yuml;
'_? A1> A1> A1> A1>
'break' has to be in a loop block
'continue' has to be in a loop block
(%s %p)
(%s : 0x%p)
(H9pH
(H;K@tfH
(H;KH|
(L9cH~BL
(M9fH~UL
(M9uH
(M;fH}UL
([A\A]A^A_]
([A\A]]
([]A\A]A^A_
(instance : 0x%p)
(vector : (%f, %f, %f))
(weakref : 0x%p [%s] )
*FUNCTION [%s()] %s line [%d]
*FUNCTION [%s] %s line [%d]
+C$9C
+C$;C
+K$Lc
+S$Hc
+W$Hc
+s$Hc
+s$Ic
+{$Hc
, or } expected
,#[A\A]A^]
,%03d
,/$`,
,uef.
-&B'-
-+ #0
-VUUU
-allowdebug
-valveinternal
-xlsp
.@failed to bind the socket
.comment
.data
.data.rel.ro
.dynamic
.dynstr
.dynsym
.eh_frame
.eh_frame_hdr
.fini
.fini_array
.gnu.hash
.gnu.version
.gnu.version_r
.gnu_debuglink
.got.plt
.init
.init_array
.note.gnu.build-id
.rela.dyn
.rela.plt
.rodata
.shstrtab
.strtab
.symtab
.text
// 	   BarBar="@Test1.Foo"
// 	   Foo=1
// 	   FooFoo = "I'm foo foo"
// 	   SubTable = { boo=[bah, "@Test2.FooFoo", "@Test1.Foo"], booboo2={one=bah, two="@Test2.FooFoo", three="@Test1.Foo"} }
// 	   bah=wha
// 	   booboo2={one=bah, two="@Test2.FooFoo", three="@Test1.Foo"}
// 	   booboo=[bah, "@Test2.FooFoo", "@Test1.Foo"]
//    
//    Test1 <-
//    Test2 <-
//    delete lateBinder;
//    lateBinder <- LateBinder();
//    lateBinder.Begin( this );
//    lateBinder.End();
//    {   
//    }   
// Documentation table
// General
// Late binding: allows a table to refer to parts of itself, it's children,
// Purpose: Script initially run after squirrel VM is initialized
// Usage:
// VSquirrel support functions
// When End() is called, all of the unresolved symbols in the tables and arrays will be resolved,
// any left unresolved will become a string prepended with '~', which later code can deal with
// it's owner, and then have the references fixed up after it's fully parsed
//-----------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////
//===	======= Copyright 
//=============================================================================
/t7I9
0123456789ABCDEF
0123456789abcdef
0[A\A]A^A_]
0[A\A]A^]
0[A\]
0[]A\A]A^
10ConCommand
10IAppSystem
10SQInstance
10SQUserData
11CSquirrelVM
11SQDelegable
11SQGenerator
12CEmptyConVar
12SQRefCounted
13SQCollectable
13SquirrelError
14CBaseAppSystemI14IScriptManagerE
14CScriptManager
14ConCommandBase
14IScriptManager
14SquirrelObject
15CTier0AppSystemI14IScriptManagerE
15CTier1AppSystemI14IScriptManagerLi0EE
15SQFunctionProto
15SQNativeClosure
16CDefaultAccessor
16CDllDemandLoader
16CSQStateIterator
18CUtlCharConversion
19CUtlNoEscConversion
20ConVar_ServerBounded
21CUtlCStringConversion
23CSplitScreenAddedConVar
23IConCommandBaseAccessor
333333
3@T]f
4 A\]
4$A\]
4SQVM
4fff>fff>fff>fff>
6ConVar
6SQBlob
7+W$Hc
7A+W$Hc
7IConVar
7SQArray
7SQTable
8CFmtStrNILi256ELb0EE
8SQStream
8SQString
8[A\A]A^A_]
8[A\A]]
8[]A\A]A^A_
9IScriptVM
9SQClosure
9SQWeakRef
9w UH
;*3$"
;,u}H
;|uif
<$*tAL
<$.tlL
<$A\]
<*uwH
</%s>
</h1>
</pre>
</script>
</t!f
</tS<\tOH
</ul>
<19{ |.
<=t#<>
<Rt<<Pt`<S
<Xu-H
<XueH
<\tz</tv1
<\u&H
<img src="
<pre>
<unknown>
<unnamed>
=t{H=
?0,/1a,
?7SQClass
?A\A]A^A_]
?A\A]A^]
?|uBH
@ A\]
@INDEX@
@ITERATOR@
@[A\A]A^]
@[A\]
@t%[A\]
A#D$xH
A+D$$H
A+E$H
A+G$H
A+G$Lc
A+L$$Hc
A+U$Hc
A+W$Hc
A+u$Hc
A+|$$Hc
A9G }
A;G ~
A;\$ A
A;t$ A
A;w A
AN ERROR HAS OCCURED [%s]
AN ERROR HAS OCCURED [unknown]
APPSYSTEM: In ConnectInterfaces(), s_nRegistrationCount is %d!
ARRAY
ATSA9
ATUSH
AUATA
AUATE1
AUATH
AUATI
AUATL
AUATLc
AUATM
AUATS
AUATSH
AUATS~}H
AUATUSH
AVAUA
AVAUAT
AVAUATA
AVAUATD
AVAUATE1
AVAUATI
AVAUATL
AVAUATS
AVAUATS1
AVAUATSH
AVAUATSHc
AVAUATUSH
AVAUD
AVAUH
AVAUI
AVAUL
AVAUM
AW-VUUUAV
AWAVA
AWAVAUA
AWAVAUATA
AWAVAUATI
AWAVAUATL
AWAVAUATM
AWAVAUATSD
AWAVAUATSH
AWAVAUATUSH
AWAVAUE1
AWAVAUI
AWAVAUL
AWAVE
AWAVE1
AWAVH
AWAVI
AWAVL
AWAVLc
A\A]A^A_]
A\A]A^A_]A
A\A]A^]
A\A]]
A]A^]
Accessed null instance
BuiltDebug
C,[A\A]]
C,[A\]
C0t H
C33s?
C8[A\]
CALLSTACK
CCommand::Tokenize: Encountered command which overflows the argument buffer.. Clamped!
CCommand::Tokenize: Encountered command which overflows the tokenizer buffer.. Skipping!
CLASS
COLORCORRECTION_VERSION_1
CUtlBuffer::VaPrintf: String overflowed buffer [%d]
CUtlFixedMemory overflow!
CUtlLinkedList overflow! (exhausted index range)
CUtlLinkedList overflow! (exhausted memory allocator)
CUtlRBTree overflow!
CXXABI_1.3
CXt;H
Callstack mismatch in VScript/Squirrel!
CommandLine
ConVar(%s) defined with infinite float value (%s)
ConVarRef %s doesn't point to an existing ConVar
CreateFunction: typeMask string too long.
CreateInterface
Cross
CxHcV
CxIc<$H
CxMc,$L
D$ H9
D$8I9
D$8I9D$@
D$8L9
D$@H9S`
D$@I9
D$@L9
D$PE1
D$PI9D$Xv.I
D$hH)
D$hI9D$pv2I
D$hM)
D+C$Mc
D+k$Mc
DLOPEN Error:%s
DebugTextureInfo001
E+D$$Mc
E+F$Mc
E+G$Mc
E+O$Mc
E+o$Mc
E+w$Mc
Error
EventSystem001
FCVAR_NEVER_AS_STRING
FLOAT
Failed to read Squirrel table entry %s
Failed to restore a Squirrel object of type %s
FmtStrVSNPrintf truncated to %d without QUIET_TRUNCATION specified!
G A9G
G u*H
G8I9E8
GCC: (Ubuntu 4.8.1-2ubuntu1~12.04+steamrt2+srt1) 4.8.1
GENERATOR
GHHcv
GLIBCXX_3.4
GLIBC_2.11
GLIBC_2.14
GLIBC_2.15
GLIBC_2.2.5
GLIBC_2.3.4
GLIBC_2.4
GameUISystemMgr001
Generate a random floating point number within a range, inclusive
Generate a random integer within a range, inclusive
GenerateUniqueKey: buffer too small
GetCPUInformation
GetFunctionSignature
GpH+GxH
GpH+GxH9
H#F0H
H#P0H
H9*tgH
H9C8s
H9Hpt
H9S`w
H9X8~
H9ZXv3H
H;Ch|
H;Cp|
H;Cx|
H;WPH
H;Y8}
H;sHr
H;s`r
H;sxr
H;w@}
HA\A]A^A_]
HPH9S`
H[A\A]A^A_]
H[A\A]]
H[]A\A]A^A_
HcH(H
HcM te
HcP(H
HcP8L9
HcSPH
HcV,H
HcWPH
Hcp0H
Hcs I
I9D$XI
I9\$(H
I9\$@
I9\$Xw
I;D$8
I;W8r
I;W8sRH
I;\$8I
I;\$8r
I;\$8sEH
I;\$8sHH
I;\$H
I;\$Hr
I;\$HsEH
I;\$XI
I;\$Xr
I;\$XsEH
I;\$XsHH
I;]p|FL
IDENTIFIER
IMEManager001
INSTANCE
INSTANCE type assignment mismatch
INTEGER
Ic4$A
Ic4$H
Ic<$A
Ic<$H
Ic<$Hc@(H)E
Ic<$I
Incompatible script version
InputStackSystemVersion001
InputSystemVersion001
InstallChangeCallback called with NULL callback, ignoring!!!
InstallChangeCallback ignoring duplicate change callback!!!
Internal error
Invalid Instance Type
Invalid character
Invalid qsort, probably compare function defect
Invalid scope handed to script VM
IsValid
KPt#I
Kht#I
Kpt!I
KxHcP,L
L$`E1
L+nxH
L9`8~
L9cHw
L9cXw
L9c`w
L9ch~FL
L9cpw
L9cx~FL
L9cx~nH
L9kHw
L9k`w
L9kxw
L;c8r
L;c8sBL
L;c@H
L;cHH
L;cHsBL
L;cPH
L;cXH
L;cXsBL
L;c`H
L;c`r
L;c`sBL
L;cpH
L;cpr
L;cpsBL
L;cxH
L;cxr
L;cxsBL
L;cxsFL
L;k8r
L;k8sBL
L;k8sJH
L;k@H
L;kHr
L;kHs
L;kHs:M
L;kHsBL
L;kHsNM
L;kPH
L;k`r
L;k`s:M
L;k`sNM
L;opt
L;ppt
L;s@v0M
L;sHr
L;sHsBL
L;sPH
L;s`v0M
L;sp|
L;sxr
L;sxsBL
L;sxv0M
L;xpt
L;{Pv)M
L;{Xr
L;{Xs
L;{XsRH
L;{hv)M
L;{ps
LIATA\A]A^]
LIATL
LOCALS
LOG_GENERAL
Length
Length2D
Length2DSqr
LengthSqr
Localize_001
LoggingSystem_IsChannelEnabled
LoggingSystem_Log
M;fH|
M;l$Hr
M;l$Xr
M;l$`r
M;l$pr
M;ox}Q
M;u8}BL
M;wHr
M;wHsFL
MATCHFRAMEWORK_001
MD$XI
MDLCache004
MatSystemSurface006
MaterialSystemHardwareConfig013
Mc$$H
Mc,$H
MeshSystem001
Module %s is a debug build
NATIVE
NATIVECLOSURE
NULL instance passed to vscript!
Native stack overflow
NetworkSystemVersion001
No such file
O0t!H
P[A\A]A^]
P[A\]
PanoramaTextServices001
PanoramaUIClient001
PanoramaUIEngine001
Physics2 Interface ActorMgr v0.1
Physics2 Interface ResourceMgr v0.1
Physics2 Interface v0.3
Plat_ExitProcess
Plat_FloatTime
Plat_IsInDebugSession
Plat_MSTime
QueuedLoaderVersion001
RAND_MAX
RIQSSH
RandomFloat
RandomInt
RandomSeed
RegisterFunctionDocumentation
RenderDevice001
RenderDeviceMgr001
RenderHardwareConfig001
RenderSystemSurface001
ResourceSystem004
S(H9S0v-H
S0[A\A]A^]
S8H9S@
S8H9S@vkH
S@H9J
S@H9P
SERIALIZE_STATE
SHH9SP
SSE and SSE2 are required.
SXH9S`
S`H9Sh
S`H9ShvsH
S`f+PHf
Save load of generators not well tested. caveat emptor
SceneSystem_001
Script debugger disconnected
Script function returned unsupported type
Script running too long, terminating
Script terminated by SQQuerySuspend
SoundSystem001
SpH9Sx
SpH9Sxw
SpH;Sx
Squirrel
Squirrel 2.2.3 stable
SxIc4$E
SxIc4$H
T$8H)
T$HE1
T$PE1
T$`E1
TABLE
THREAD
TRAPATL
TRAPL
ThreadSleep
ToKVString
U@H9r
UCS-2LE
UCS-4LE
USERDATA
USERPOINTER
UTF-32LE
UTF-8
VAvi001
VBAllocTracker001
VBik001
VDataCache003
VDmeMakeFileUtils001
VEngineCvar007
VFileSystem017
VGUI_Input005
VGUI_Panel009
VGUI_Scheme010
VGUI_Surface031
VGUI_System010
VGUI_ivgui008
VMDLLIB001
VMaterialSystem080
VMaterialSystem2_001
VNewAsyncFileSystem001
VP4002
VPhysicsCollision007
VPrecacheSystem001
VProcessUtils002
VResourceAccessControl001
VScriptManager009
VSoundEmitter003
VSquirrel_OnCreateScope
VSquirrel_OnReleaseScope
VStudioRender026
V_AppendSlash: ran out of space on %s.
V_MakeAbsolutePath: _getcwd failed.
Vector
Vector argument expected
WEAKREF
Warning
Warning:  %s = '%s' is infinite, clamping value.
WorldRendererMgr001
WpI9Wx
WpI9Wxv4I
WriteMiniDump
XA\A]A^A_]
X[A\A]A^A_]
X[A\A]A^]
X[A\A]]
X[]A\A]A^A_
ZN11CSquirrelVM9DumpStateEvE9CIterator
[%s] "%s"
[%s] %.14g
[%s] %d
[%s] %s
[%s] ARRAY
[%s] CLASS
[%s] CLOSURE
[%s] GENERATOR
[%s] INSTANCE
[%s] NATIVECLOSURE
[%s] NULL
[%s] TABLE
[%s] THREAD
[%s] USERDATA
[%s] USERPOINTER
[%s] WEAKREF
[/code]
[/h1]
[/img]
[/list]
[/url]
[A\A]A^A_]
[A\A]A^]
[A\A]]
[]A\A]
[]A\A]A^
[]A\A]A^A_
[code]
[img]
[list]
[url=
]H+Gx
]tG9E
^ t+H
_@I9Wh
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
_Jv_RegisterClasses
_Z10DevWarningPKcz
_Z6ConMsgPKcz
_Z6DevMsgPKcz
_ZNSs4_Rep10_M_destroyERKSaIcE
_ZNSs4_Rep10_M_destroyERKSaIcE@@GLIBCXX_3.4
_ZNSs4_Rep10_M_disposeERKSaIcE
_ZNSs4_Rep10_M_disposeERKSaIcE@@GLIBCXX_3.4
_ZNSs4_Rep20_S_empty_rep_storageE
_ZNSs4_Rep20_S_empty_rep_storageE@@GLIBCXX_3.4
_ZNSs6appendEmc
_ZNSs6appendEmc@@GLIBCXX_3.4
_ZNSs6assignEPKcm
_ZNSs6assignEPKcm@@GLIBCXX_3.4
_ZNSs6assignERKSs
_ZNSs6assignERKSs@@GLIBCXX_3.4
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@@GLIBCXX_3.4
_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base
_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base@@GLIBCXX_3.4
_ZSt20__throw_length_errorPKc
_ZSt20__throw_length_errorPKc@@GLIBCXX_3.4
_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_
_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_@@GLIBCXX_3.4
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@@GLIBCXX_3.4
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv117__class_type_infoE@@CXXABI_1.3
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTVN10__cxxabiv120__si_class_type_infoE@@CXXABI_1.3
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTVN10__cxxabiv121__vmi_class_type_infoE@@CXXABI_1.3
__SqTypes
__acos_finite
__acos_finite@@GLIBC_2.15
__acosf_finite
__acosf_finite@@GLIBC_2.15
__asin_finite
__asin_finite@@GLIBC_2.15
__atan2_finite
__atan2_finite@@GLIBC_2.15
__atan2f_finite
__atan2f_finite@@GLIBC_2.15
__bss_start
__cxa_allocate_exception
__cxa_allocate_exception@@CXXABI_1.3
__cxa_atexit
__cxa_atexit@@GLIBC_2.2.5
__cxa_begin_catch
__cxa_begin_catch@@CXXABI_1.3
__cxa_end_catch
__cxa_end_catch@@CXXABI_1.3
__cxa_finalize
__cxa_finalize@@GLIBC_2.2.5
__cxa_free_exception
__cxa_free_exception@@CXXABI_1.3
__cxa_guard_acquire
__cxa_guard_acquire@@CXXABI_1.3
__cxa_guard_release
__cxa_guard_release@@CXXABI_1.3
__cxa_rethrow
__cxa_rethrow@@CXXABI_1.3
__cxa_throw
__cxa_throw@@CXXABI_1.3
__dynamic_cast
__dynamic_cast@@CXXABI_1.3
__exp_finite
__exp_finite@@GLIBC_2.15
__expf_finite
__expf_finite@@GLIBC_2.15
__fdelt_chk
__fdelt_chk@@GLIBC_2.15
__gmon_start__
__gxx_personality_v0
__gxx_personality_v0@@CXXABI_1.3
__log10_finite
__log10_finite@@GLIBC_2.15
__log_finite
__log_finite@@GLIBC_2.15
__longjmp_chk
__longjmp_chk@@GLIBC_2.11
__memcpy_chk
__memcpy_chk@@GLIBC_2.3.4
__pow_finite
__pow_finite@@GLIBC_2.15
__printf_chk
__printf_chk@@GLIBC_2.3.4
__pthread_key_create
__pthread_key_create@@GLIBC_2.2.5
__snprintf_chk
__snprintf_chk@@GLIBC_2.3.4
__sprintf_chk
__sprintf_chk@@GLIBC_2.3.4
__stack_chk_fail
__stack_chk_fail@@GLIBC_2.4
__strcpy_chk
__strcpy_chk@@GLIBC_2.3.4
__vsnprintf_chk
__vsnprintf_chk@@GLIBC_2.3.4
__vsprintf_chk
__vsprintf_chk@@GLIBC_2.3.4
__vswprintf_chk
__vswprintf_chk@@GLIBC_2.4
_array_default_delegate
_attributes
_base 
_call
_charsize_
_class 
_class_default_delegate
_client.so
_cloned
_closure_default_delegate
_consts
_debughook
_defaultvalues
_delegate 
_delslot
_edata
_errorhandler
_fini
_floatsize_
_generator_default_delegate
_inherited
_init
_instance_default_delegate
_intsize_
_lasterror
_members
_metamethods
_metamethodsmap
_methods
_modulo
_newmember
_newslot
_nexti
_nexti failed
_nexti returned an invalid idx
_number_default_delegate
_registry
_roottable
_setjmp
_setjmp@@GLIBC_2.2.5
_sqdbg_debug_hook_
_sqdbg_error_handler_
_stack
_string_default_delegate
_table_default_delegate
_thread_default_delegate
_tostring
_typeof
_valveinternal
_vargsstack
_version_
_weakref_default_delegate
_xlsp
`[A\A]A^]
`[A\]
abort
abort@@GLIBC_2.2.5
accept
accept@@GLIBC_2.2.5
addbreakpoint
added bp %d %s
added watch %d
added watch %d %s
archive
arith op %c on between '%s' and '%s'
arith op %c on between '%s' and '%s' (%s)
assert
assertion failed
atan2
atan@@GLIBC_2.2.5
attempt to call '%s'
attempt to delete a slot from a %s
attempt to negate a %s
attempt to perform a bitwise op on a %s
attribute
begin
beginelement
bind@@GLIBC_2.2.5
bindenv
bitwise op between '%s' and '%s'
break
c [A\]
c x|y|t
c8M;g@
call already initialized
call not initialized
can't 'create' a local slot
can't assign expression
can't delete an expression
cannot apply instanceof between a %s and a %s
cannot brake deref/or comma needed after [exp]=exp slot declaration
cannot convert the string
cannot create a class in a local with the syntax(class <local>)
cannot create blob with negative size
cannot delete a local
cannot delete a slot from %s
cannot iterate %s
cannot iterate a generator
cannot resume a vm that is not running any code
cannot serialize a %s
cannot suspend an already suspended vm
cannot suspend through native calls/metamethods
cannot use character classes in ranges
cannot wakeup a idle thread
cannot wakeup a running thread
capture
castf2i
casti2f
catch
cbrtf
cbrtf@@GLIBC_2.2.5
chdir
chdir@@GLIBC_2.2.5
cheat
class CCallChainer
class CSimpleCallChainer
class LateBinder
class instances do not support the new slot operator
clear
clear only works on table and array
client
clientcmd_can_execute
clone
cloning a %s
close@@GLIBC_2.2.5
collectgarbage
compare func failed
comparsion between '%.50s' and '%.50s'
compilestring
complex_types <- {
const
constant too long
constructor
continue
cos@@GLIBC_2.2.5
dH34%(
dH3<%(
default
delagate cycle
delegate cycle detected
delegating a '%s'
developer
disabled
disconnected
division by zero
dl_iterate_phdr
dl_iterate_phdr@@GLIBC_2.2.5
dlclose
dlclose@@GLIBC_2.2.5
dlerror
dlerror@@GLIBC_2.2.5
dlopen
dlopen@@GLIBC_2.2.5
dlsym
dlsym@@GLIBC_2.2.5
dummy
empty class
empty constant
empty separators string
enabledebuginfo
end of statement expected (; or lf)
endelement
error accept(socket)
error compiling the serialization function
error on listen(socket)
error parsing add breakpoint
error parsing add watch
error parsing remove breakpoint
error parsing remove watch
error parsing the string
expected '%c'
expected '%s'
expected ')'
expected ')' or ','
expected '='
expected paren
exponent expected
expression expected
expression expected, found ')'
extend
extends
f+PHf
f=rbu
f=siu
f=spf
failed to initialize the debugger
false
ffff.
fffff.
ffffff.
float expected for the specified format
floor
flush
foreach
free variables cannot be modified
free@@GLIBC_2.2.5
function 
function Assert( b, msg = null )
function Msg( text )
function VSquirrel_OnCreateScope( name, outer )
function VSquirrel_OnReleaseScope( scope )
function build_refs(t):(objs_reg)
function build_tree():(objs_reg)
function emitvalue(type_attrib,value_attrib,val)
function evaluate_watch(locals,id,expression)
function getvalue(v):(objs_reg)
function iterateobject(obj,func)
function pack_type(type):(packed_types)
function printl( text )
function with default parameters cannot have variable number of parameters
g_pMemAlloc
getInstanceVarInfo: Could not retrieve UserData
getVar(): Could not create instance: %s
getVar(): Invalid type+access: 'ScriptStringVarBase' with VAR_ACCESS_CONSTANT (use VAR_ACCESS_READ_ONLY instead)
getVar(): Invalid type+access: 'const SQChar *' without VAR_ACCESS_CONSTANT
getVarInfo: Could not retrieve UserData
getattributes
getclass
getconsttable
getcwd
getcwd@@GLIBC_2.2.5
getinfos
getroottable
getstackinfos
getstatus
go (execution resumed)
h[A\A]A^A_]
h[A\A]]
handle
hexadecimal number expected
iconv
iconv@@GLIBC_2.2.5
iconv_close
iconv_close@@GLIBC_2.2.5
iconv_open
iconv_open@@GLIBC_2.2.5
idx out of range
if ( ::getroottable().parent )
if ( currentscope )
if ( developer() > 0 )
image not found
indexing %s with %s
indexing 'vargv' with %s
insert
instanceof
integer expected for the specified format
internal VM error
internal compiler error: too many literals
internal compiler error: too many locals
internal error (_nexti) wrong argument type
internal vm error bitwise op failed
internal vm error, yielding a dead generator
internal vm error, yielding dead generator
invalid base type
invalid class name
invalid constant [%s.%s]
invalid environment
invalid format
invalid free var index
invalid numeric format
invalid object type
invalid octal number
invalid or corrupted closure stream
invalid origin
invalid param
invalid param type
invalid parameter
invalid range
invalid stream
invalid token '..'
invalid type tag
invalid typemask
io error
io error (write function failure)
io error, read function failure, the origin stream could be corrupted/trucated
isalnum
isalnum@@GLIBC_2.2.5
isalpha
isalpha@@GLIBC_2.2.5
iscntrl
iscntrl@@GLIBC_2.2.5
islower
islower@@GLIBC_2.2.5
isprint
isprint@@GLIBC_2.2.5
ispunct
ispunct@@GLIBC_2.2.5
isspace
isspace@@GLIBC_2.2.5
isupper
isupper@@GLIBC_2.2.5
iswalnum
iswalnum@@GLIBC_2.2.5
iswalpha
iswalpha@@GLIBC_2.2.5
iswspace
iswspace@@GLIBC_2.2.5
isxdigit
isxdigit@@GLIBC_2.2.5
ivalid type
ivalid type, expected table
ld-linux-x86-64.so.2
letter expected
libc.so.6
libdl.so.2
libm.so.6
libpthread.so.0
libstdc++.so.6
libtier0_client.so
libvstdlib_client.so
listen
listen@@GLIBC_2.2.5
local currentscope;
local level=3;
local objs_reg = { maxid=0 ,refs={} }
local packed_types={
local si;
local stack=[]
locals
log10
lstrip
malloc
malloc@@GLIBC_2.2.5
match
mbstowcs
mbstowcs@@GLIBC_2.2.5
memcmp
memcmp@@GLIBC_2.2.5
memcpy
memcpy@@GLIBC_2.14
memmove
memmove@@GLIBC_2.2.5
memset
memset@@GLIBC_2.2.5
missing "*/" in comment
modulo by zero
native
native closure expected
native function
negative size
newline in a constant
newthread
no data left to read
not enough params in the stack
not enough paramters for the given format string
notconnected
notify
null cannot be used as index
null is not a valid key
null key
null vector
o ATL
only generators can be resumed
overflow in numeric constant
p[A\A]A^]
p[A\]
pacall
parameter %d has an invalid type '%s' ; expected: '%s'
paramscheck
parent
parent cannot be set
pcall
precision format too long
print
pthread_mutex_lock
pthread_mutex_lock@@GLIBC_2.2.5
pthread_mutex_unlock
pthread_mutex_unlock@@GLIBC_2.2.5
pthread_once
pthread_once@@GLIBC_2.2.5
puts@@GLIBC_2.2.5
r""\\
rand@@GLIBC_2.2.5
rawdelete
rawget
rawget works only on array/table/instance and class
rawin
rawset
rawset works only on array/table/class and instance
readblob
readn
ready
recv@@GLIBC_2.2.5
regexp
remove
removebreakpoint
removed bp %d %s
removed watch %d
replicated
resize
resize failed
resume
resumed
resuming active generator
resuming dead generator
reverse
rstrip
running
s s n 
s0[A\A]]
s@Ic<$H
sXt(H
s_pInterfaceRegs
scalar expected : integer,float
scalar expected : integer,float or string
search
select
select@@GLIBC_2.2.5
send@@GLIBC_2.2.5
server_can_execute
setVar(): Cannot write to an SQUserPointer: %s
setVar(): Cannot write to constant: %s
setattributes
setconsttable
setdebughook
seterrorhandler
setroottable
sin@@GLIBC_2.2.5
sincosf
sincosf@@GLIBC_2.2.5
sinf@@GLIBC_2.2.5
singleplayer
size must be a number
slice
slice out of range
socket
socket error
socket failed
socket@@GLIBC_2.2.5
split
srand
srand@@GLIBC_2.2.5
ss_added
sscanf
sscanf@@GLIBC_2.2.5
static
std_blob
std_stream
steam://openurl/
steam://openurl_external/
step into
step return
strcasecmp
strcasecmp@@GLIBC_2.2.5
strchr
strchr@@GLIBC_2.2.5
strcmp
strcmp@@GLIBC_2.2.5
strcpy
strcpy@@GLIBC_2.2.5
string expected
string expected for the specified format
strlen
strlen@@GLIBC_2.2.5
strncat
strncat@@GLIBC_2.2.5
strnlen
strnlen@@GLIBC_2.2.5
strstr
strstr@@GLIBC_2.2.5
strtod
strtod@@GLIBC_2.2.5
strtok
strtok@@GLIBC_2.2.5
strtol
strtol@@GLIBC_2.2.5
strtoll
strtoll@@GLIBC_2.2.5
strtoul
strtoul@@GLIBC_2.2.5
strtoull
strtoull@@GLIBC_2.2.5
subexpcount
suspend
suspended
swap2
swap4
swapfloat
switch
sxHc@4H
t	D; u
t	[A\]
t H=6
t"H;2H
t"H=6
t#~1= 
t$@A\]
t$@L9
t$@L;sHv?M
t$H9h
t$H=6
t$XL;s`
t'H=2
t(HcO
t)< ~
t-H=7
t.L9u
t/<.u
t/L9{(u
t1<*tH
t4[A\A]A^]
t9H9Sxw
tDH=6
tGH9H
tNH9P
tPHcE
tWA9]
tWH9H
t_H;P
table expected
tan@@GLIBC_2.2.5
tanf@@GLIBC_2.2.5
tcA:]
temp_reg
terminate from user
terminated
terminated by debugger
the %s type doesn't have a parent slot
the breakpoint doesn't exists
the class is locked
the function doesn't have var args
the index '%.50s' does not exist
the index doesn't exist
the object is not a class
the object is not a class instance
the object is not a closure
the object is not a nativeclosure
the object must be a weakref
the property '%s' already exists
the stream is invalid
the target is not a closure
the type doesn't have a default delegate
the watch does not exists
throw
ti~lfH
toA9W L
tochar
tofloat
tointeger
tolower
tolower@@GLIBC_2.2.5
too many digits for an Hex number
top() on a empty array
toupper
toupper@@GLIBC_2.2.5
towlower
towlower@@GLIBC_2.2.5
towupper
towupper@@GLIBC_2.2.5
try {
trying to inherit from a %s
trying to modify a class that has already been instantiated
trying to resume a '%s',only genenerator can be resumed
trying to set '%s'
trying to yield a '%s',only genenerator can be yielded
ttIcG
typecheck
t|y|L
t|y|x%s
u&Hcu
unexpected character
unexpected character(control)
unexpected type %s
unfinished range
unfinished string
unknown
unknown error
unknown packet
unnamed
unnamedbuffer
unrecognised escaper char
userdata
userpointer
using '%s' as delegate
v.f=di
vP<_tL
vQf=sr
varargs
vargc
vargv
vargv index out of range
vector::_M_default_append
vscript
vscript_client.so.dbg
wakeup
watches
wcslen
wcslen@@GLIBC_2.2.5
wcsncat
wcsncat@@GLIBC_2.2.5
wcsncpy
wcsncpy@@GLIBC_2.2.5
wcstombs
wcstombs@@GLIBC_2.2.5
while
width format too long
writeblob
writen
wrong argument type, expected '%s' got '%.50s'
wrong index
wrong indexes
wrong number of parameters
wrong parameter
wrong type
x@LcH4H
x[A\A]A^A_]
xbH;Q8}\H
yield
{(r2f
{pH97tpH
{}()':
|$0L)
|$@I9
|$XH9Shw
}catch(e)
}zLke
}{D9u
~)A;]
~0[A\A]A^]
~2D9e
~6H;r
